
StatikItki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0800ad70  0800ad70  0000bd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b788  0800b788  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b788  0800b788  0000c788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b790  0800b790  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b794  0800b794  0000c794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b798  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001ec  0800b984  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800b984  0000d544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef26  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274f  00000000  00000000  0001c142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0001e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bf  00000000  00000000  0001f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183b0  00000000  00000000  0001ff27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010893  00000000  00000000  000382d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4e6  00000000  00000000  00048b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  000d4094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d8a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad58 	.word	0x0800ad58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800ad58 	.word	0x0800ad58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9c0 	b.w	800124c <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f85c 	bl	8000f90 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b82a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f06:	f000 f825 	bl	8000f54 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_f2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	f7ff fb1f 	bl	8000558 <__aeabi_f2d>
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <__aeabi_f2ulz+0x38>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4606      	mov	r6, r0
 8000f20:	460f      	mov	r7, r1
 8000f22:	f7ff fb71 	bl	8000608 <__aeabi_dmul>
 8000f26:	f7ff fe47 	bl	8000bb8 <__aeabi_d2uiz>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	f7ff faf2 	bl	8000514 <__aeabi_ui2d>
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <__aeabi_f2ulz+0x3c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f7ff fb68 	bl	8000608 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	4639      	mov	r1, r7
 8000f40:	f7ff f9aa 	bl	8000298 <__aeabi_dsub>
 8000f44:	f7ff fe38 	bl	8000bb8 <__aeabi_d2uiz>
 8000f48:	4621      	mov	r1, r4
 8000f4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f4c:	3df00000 	.word	0x3df00000
 8000f50:	41f00000 	.word	0x41f00000

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb53 	bl	8000608 <__aeabi_dmul>
 8000f62:	f7ff fe29 	bl	8000bb8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff fad4 	bl	8000514 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb4a 	bl	8000608 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f98c 	bl	8000298 <__aeabi_dsub>
 8000f80:	f7ff fe1a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	460c      	mov	r4, r1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d14e      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	458c      	cmp	ip, r1
 8000fa0:	4686      	mov	lr, r0
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	d962      	bls.n	800106e <__udivmoddi4+0xde>
 8000fa8:	b14a      	cbz	r2, 8000fbe <__udivmoddi4+0x2e>
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f f68c 	uxth.w	r6, ip
 8000fc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fe6:	f080 8112 	bcs.w	800120e <__udivmoddi4+0x27e>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 810f 	bls.w	800120e <__udivmoddi4+0x27e>
 8000ff0:	3c02      	subs	r4, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a59      	subs	r1, r3, r1
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ffe:	fb07 1110 	mls	r1, r7, r0, r1
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f606 	mul.w	r6, r0, r6
 800100a:	429e      	cmp	r6, r3
 800100c:	d90a      	bls.n	8001024 <__udivmoddi4+0x94>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 31ff 	add.w	r1, r0, #4294967295
 8001016:	f080 80fc 	bcs.w	8001212 <__udivmoddi4+0x282>
 800101a:	429e      	cmp	r6, r3
 800101c:	f240 80f9 	bls.w	8001212 <__udivmoddi4+0x282>
 8001020:	4463      	add	r3, ip
 8001022:	3802      	subs	r0, #2
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800102a:	2100      	movs	r1, #0
 800102c:	b11d      	cbz	r5, 8001036 <__udivmoddi4+0xa6>
 800102e:	40d3      	lsrs	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e9c5 3200 	strd	r3, r2, [r5]
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d905      	bls.n	800104a <__udivmoddi4+0xba>
 800103e:	b10d      	cbz	r5, 8001044 <__udivmoddi4+0xb4>
 8001040:	e9c5 0100 	strd	r0, r1, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	4608      	mov	r0, r1
 8001048:	e7f5      	b.n	8001036 <__udivmoddi4+0xa6>
 800104a:	fab3 f183 	clz	r1, r3
 800104e:	2900      	cmp	r1, #0
 8001050:	d146      	bne.n	80010e0 <__udivmoddi4+0x150>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d302      	bcc.n	800105c <__udivmoddi4+0xcc>
 8001056:	4290      	cmp	r0, r2
 8001058:	f0c0 80f0 	bcc.w	800123c <__udivmoddi4+0x2ac>
 800105c:	1a86      	subs	r6, r0, r2
 800105e:	eb64 0303 	sbc.w	r3, r4, r3
 8001062:	2001      	movs	r0, #1
 8001064:	2d00      	cmp	r5, #0
 8001066:	d0e6      	beq.n	8001036 <__udivmoddi4+0xa6>
 8001068:	e9c5 6300 	strd	r6, r3, [r5]
 800106c:	e7e3      	b.n	8001036 <__udivmoddi4+0xa6>
 800106e:	2a00      	cmp	r2, #0
 8001070:	f040 8090 	bne.w	8001194 <__udivmoddi4+0x204>
 8001074:	eba1 040c 	sub.w	r4, r1, ip
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	2101      	movs	r1, #1
 8001082:	fbb4 f6f8 	udiv	r6, r4, r8
 8001086:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800108a:	fb08 4416 	mls	r4, r8, r6, r4
 800108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001092:	fb07 f006 	mul.w	r0, r7, r6
 8001096:	4298      	cmp	r0, r3
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x11c>
 800109a:	eb1c 0303 	adds.w	r3, ip, r3
 800109e:	f106 34ff 	add.w	r4, r6, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x11a>
 80010a4:	4298      	cmp	r0, r3
 80010a6:	f200 80cd 	bhi.w	8001244 <__udivmoddi4+0x2b4>
 80010aa:	4626      	mov	r6, r4
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	fa1f f38e 	uxth.w	r3, lr
 80010b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010b6:	fb08 4410 	mls	r4, r8, r0, r4
 80010ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010be:	fb00 f707 	mul.w	r7, r0, r7
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x148>
 80010c6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x146>
 80010d0:	429f      	cmp	r7, r3
 80010d2:	f200 80b0 	bhi.w	8001236 <__udivmoddi4+0x2a6>
 80010d6:	4620      	mov	r0, r4
 80010d8:	1bdb      	subs	r3, r3, r7
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	e7a5      	b.n	800102c <__udivmoddi4+0x9c>
 80010e0:	f1c1 0620 	rsb	r6, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f0:	fa04 f301 	lsl.w	r3, r4, r1
 80010f4:	ea43 030c 	orr.w	r3, r3, ip
 80010f8:	40f4      	lsrs	r4, r6
 80010fa:	fa00 f801 	lsl.w	r8, r0, r1
 80010fe:	0c38      	lsrs	r0, r7, #16
 8001100:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001104:	fbb4 fef0 	udiv	lr, r4, r0
 8001108:	fa1f fc87 	uxth.w	ip, r7
 800110c:	fb00 441e 	mls	r4, r0, lr, r4
 8001110:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001114:	fb0e f90c 	mul.w	r9, lr, ip
 8001118:	45a1      	cmp	r9, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x1a6>
 8001120:	193c      	adds	r4, r7, r4
 8001122:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001126:	f080 8084 	bcs.w	8001232 <__udivmoddi4+0x2a2>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f240 8081 	bls.w	8001232 <__udivmoddi4+0x2a2>
 8001130:	f1ae 0e02 	sub.w	lr, lr, #2
 8001134:	443c      	add	r4, r7
 8001136:	eba4 0409 	sub.w	r4, r4, r9
 800113a:	fa1f f983 	uxth.w	r9, r3
 800113e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001142:	fb00 4413 	mls	r4, r0, r3, r4
 8001146:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800114a:	fb03 fc0c 	mul.w	ip, r3, ip
 800114e:	45a4      	cmp	ip, r4
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x1d2>
 8001152:	193c      	adds	r4, r7, r4
 8001154:	f103 30ff 	add.w	r0, r3, #4294967295
 8001158:	d267      	bcs.n	800122a <__udivmoddi4+0x29a>
 800115a:	45a4      	cmp	ip, r4
 800115c:	d965      	bls.n	800122a <__udivmoddi4+0x29a>
 800115e:	3b02      	subs	r3, #2
 8001160:	443c      	add	r4, r7
 8001162:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001166:	fba0 9302 	umull	r9, r3, r0, r2
 800116a:	eba4 040c 	sub.w	r4, r4, ip
 800116e:	429c      	cmp	r4, r3
 8001170:	46ce      	mov	lr, r9
 8001172:	469c      	mov	ip, r3
 8001174:	d351      	bcc.n	800121a <__udivmoddi4+0x28a>
 8001176:	d04e      	beq.n	8001216 <__udivmoddi4+0x286>
 8001178:	b155      	cbz	r5, 8001190 <__udivmoddi4+0x200>
 800117a:	ebb8 030e 	subs.w	r3, r8, lr
 800117e:	eb64 040c 	sbc.w	r4, r4, ip
 8001182:	fa04 f606 	lsl.w	r6, r4, r6
 8001186:	40cb      	lsrs	r3, r1
 8001188:	431e      	orrs	r6, r3
 800118a:	40cc      	lsrs	r4, r1
 800118c:	e9c5 6400 	strd	r6, r4, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	e750      	b.n	8001036 <__udivmoddi4+0xa6>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f103 	lsr.w	r1, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	fa24 f303 	lsr.w	r3, r4, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	430c      	orrs	r4, r1
 80011a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b0:	fa1f f78c 	uxth.w	r7, ip
 80011b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b8:	fb08 3110 	mls	r1, r8, r0, r3
 80011bc:	0c23      	lsrs	r3, r4, #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb00 f107 	mul.w	r1, r0, r7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x24c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80011d2:	d22c      	bcs.n	800122e <__udivmoddi4+0x29e>
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d92a      	bls.n	800122e <__udivmoddi4+0x29e>
 80011d8:	3802      	subs	r0, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a5b      	subs	r3, r3, r1
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011e4:	fb08 3311 	mls	r3, r8, r1, r3
 80011e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ec:	fb01 f307 	mul.w	r3, r1, r7
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0x276>
 80011f4:	eb1c 0404 	adds.w	r4, ip, r4
 80011f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011fc:	d213      	bcs.n	8001226 <__udivmoddi4+0x296>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d911      	bls.n	8001226 <__udivmoddi4+0x296>
 8001202:	3902      	subs	r1, #2
 8001204:	4464      	add	r4, ip
 8001206:	1ae4      	subs	r4, r4, r3
 8001208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800120c:	e739      	b.n	8001082 <__udivmoddi4+0xf2>
 800120e:	4604      	mov	r4, r0
 8001210:	e6f0      	b.n	8000ff4 <__udivmoddi4+0x64>
 8001212:	4608      	mov	r0, r1
 8001214:	e706      	b.n	8001024 <__udivmoddi4+0x94>
 8001216:	45c8      	cmp	r8, r9
 8001218:	d2ae      	bcs.n	8001178 <__udivmoddi4+0x1e8>
 800121a:	ebb9 0e02 	subs.w	lr, r9, r2
 800121e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001222:	3801      	subs	r0, #1
 8001224:	e7a8      	b.n	8001178 <__udivmoddi4+0x1e8>
 8001226:	4631      	mov	r1, r6
 8001228:	e7ed      	b.n	8001206 <__udivmoddi4+0x276>
 800122a:	4603      	mov	r3, r0
 800122c:	e799      	b.n	8001162 <__udivmoddi4+0x1d2>
 800122e:	4630      	mov	r0, r6
 8001230:	e7d4      	b.n	80011dc <__udivmoddi4+0x24c>
 8001232:	46d6      	mov	lr, sl
 8001234:	e77f      	b.n	8001136 <__udivmoddi4+0x1a6>
 8001236:	4463      	add	r3, ip
 8001238:	3802      	subs	r0, #2
 800123a:	e74d      	b.n	80010d8 <__udivmoddi4+0x148>
 800123c:	4606      	mov	r6, r0
 800123e:	4623      	mov	r3, r4
 8001240:	4608      	mov	r0, r1
 8001242:	e70f      	b.n	8001064 <__udivmoddi4+0xd4>
 8001244:	3e02      	subs	r6, #2
 8001246:	4463      	add	r3, ip
 8001248:	e730      	b.n	80010ac <__udivmoddi4+0x11c>
 800124a:	bf00      	nop

0800124c <__aeabi_idiv0>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <hx711_delay>:
#include "hx711.h"

void hx711_delay(uint32_t delay) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	while (delay--)
 8001258:	bf00      	nop
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1fa      	bne.n	800125a <hx711_delay+0xa>
		;
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HX711_Init>:

void HX711_Init(hx711_t *hx711, GPIO_TypeDef *clkPort, uint16_t clkPin,
		GPIO_TypeDef *datPort, uint16_t datPin) {
 8001272:	b580      	push	{r7, lr}
 8001274:	b08a      	sub	sp, #40	@ 0x28
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	80fb      	strh	r3, [r7, #6]
	hx711->debuggerPort = NULL;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
	hx711->clk_gpio = clkPort;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
	hx711->clk_pin = clkPin;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	811a      	strh	r2, [r3, #8]
	hx711->dat_gpio = datPort;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	605a      	str	r2, [r3, #4]
	hx711->dat_pin = datPin;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800129e:	815a      	strh	r2, [r3, #10]

	GPIO_InitTypeDef gpio = { 0 };
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

	// Clock (PD_SCK) pin is configured as an output
	gpio.Pin = hx711->clk_pin;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(hx711->clk_gpio, &gpio);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f107 0214 	add.w	r2, r7, #20
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fbd1 	bl	8003a74 <HAL_GPIO_Init>

	// Data (DOUT) pin is configured as an input
	gpio.Pin = hx711->dat_pin;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	895b      	ldrh	r3, [r3, #10]
 80012d6:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(hx711->dat_gpio, &gpio);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f107 0214 	add.w	r2, r7, #20
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fbc2 	bl	8003a74 <HAL_GPIO_Init>

	// Initial state
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	891b      	ldrh	r3, [r3, #8]
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	f002 fd56 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HX711_Read>:
	sprintf(buffer, "Calibration Factor: %.6f\r\n", hx711->calibration_factor);
	HAL_UART_Transmit(hx711->debuggerPort, (uint8_t*) buffer, strlen(buffer),
			HAL_MAX_DELAY);
}

uint32_t HX711_Read(hx711_t *hx711) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint32_t hx711_data = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

	while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8001314:	bf00      	nop
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	895b      	ldrh	r3, [r3, #10]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f002 fd2b 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d0f4      	beq.n	8001316 <HX711_Read+0xe>
		// wait until data is ready
	}

	for (int i = 0; i < 24; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	e027      	b.n	8001382 <HX711_Read+0x7a>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET); // PD_SCK = HIGH
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	891b      	ldrh	r3, [r3, #8]
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	f002 fd35 	bl	8003dac <HAL_GPIO_WritePin>
		hx711_delay(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001346:	f7ff ff83 	bl	8001250 <hx711_delay>
		hx711_data = (hx711_data << 1)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	005c      	lsls	r4, r3, #1
				| HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin); // data read from DOUT
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	895b      	ldrh	r3, [r3, #10]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f002 fd0f 	bl	8003d7c <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
		hx711_data = (hx711_data << 1)
 8001360:	4323      	orrs	r3, r4
 8001362:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET); // PD_SCK = LOW
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	891b      	ldrh	r3, [r3, #8]
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	f002 fd1c 	bl	8003dac <HAL_GPIO_WritePin>
		hx711_delay(1000);
 8001374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001378:	f7ff ff6a 	bl	8001250 <hx711_delay>
	for (int i = 0; i < 24; i++) {
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b17      	cmp	r3, #23
 8001386:	ddd4      	ble.n	8001332 <HX711_Read+0x2a>
	}

	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET); // PD_SCK = HIGH (again)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	891b      	ldrh	r3, [r3, #8]
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	f002 fd0a 	bl	8003dac <HAL_GPIO_WritePin>
	hx711_delay(1000);
 8001398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139c:	f7ff ff58 	bl	8001250 <hx711_delay>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	891b      	ldrh	r3, [r3, #8]
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	f002 fcfe 	bl	8003dac <HAL_GPIO_WritePin>
	hx711_delay(1000);
 80013b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b4:	f7ff ff4c 	bl	8001250 <hx711_delay>

	hx711_data = hx711_data ^ 0x800000; //for ex. 0x900000 ^ 0x800000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80013be:	60fb      	str	r3, [r7, #12]
	return hx711_data;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}

080013ca <HX711_GetWeight>:

float HX711_GetWeight(hx711_t *hx711) {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	uint32_t raw_data = HX711_Read(hx711);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff98 	bl	8001308 <HX711_Read>
 80013d8:	60f8      	str	r0, [r7, #12]
	return raw_data / hx711->calibration_factor;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b087      	sub	sp, #28
 8001400:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001402:	f002 f93f 	bl	8003684 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001406:	f000 f8db 	bl	80015c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800140a:	f000 f9cb 	bl	80017a4 <MX_GPIO_Init>
	MX_SPI2_Init();
 800140e:	f000 f93f 	bl	8001690 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8001412:	f000 f973 	bl	80016fc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001416:	f000 f99b 	bl	8001750 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 800141a:	f004 fb57 	bl	8005acc <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(Ignition_Pin_GPIO_Port, Ignition_Pin_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	485d      	ldr	r0, [pc, #372]	@ (8001598 <main+0x19c>)
 8001424:	f002 fcc2 	bl	8003dac <HAL_GPIO_WritePin>

	HX711_Init(&MassSensor, HX711_SCK_GPIO_Port, HX711_SCK_Pin,
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <main+0x1a0>)
 8001430:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001434:	4959      	ldr	r1, [pc, #356]	@ (800159c <main+0x1a0>)
 8001436:	485a      	ldr	r0, [pc, #360]	@ (80015a0 <main+0x1a4>)
 8001438:	f7ff ff1b 	bl	8001272 <HX711_Init>
			HX711_DOUT_GPIO_Port, HX711_DOUT_Pin);

	//RFPinSet(&(RFPins.M1Pin), RF_M0_GPIO_Port, RF_M0_Pin);
	//RFPinSet(&(RFPins.M1Pin), RF_M1_GPIO_Port, RF_M1_Pin);
	//RFPinSet(&(RFPins.AUXPin), RF_AUX_GPIO_Port, RF_AUX_Pin);
	RFInit_Debugger(&RFModule, &huart1, &huart2, RFPins);
 800143c:	4e59      	ldr	r6, [pc, #356]	@ (80015a4 <main+0x1a8>)
 800143e:	466d      	mov	r5, sp
 8001440:	1d34      	adds	r4, r6, #4
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	602b      	str	r3, [r5, #0]
 800144a:	6833      	ldr	r3, [r6, #0]
 800144c:	4a56      	ldr	r2, [pc, #344]	@ (80015a8 <main+0x1ac>)
 800144e:	4957      	ldr	r1, [pc, #348]	@ (80015ac <main+0x1b0>)
 8001450:	4857      	ldr	r0, [pc, #348]	@ (80015b0 <main+0x1b4>)
 8001452:	f001 fe8c 	bl	800316e <RFInit_Debugger>

	RFModule.setChannel(&RFModule, RF_Channel);
 8001456:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <main+0x1b4>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145a:	2117      	movs	r1, #23
 800145c:	4854      	ldr	r0, [pc, #336]	@ (80015b0 <main+0x1b4>)
 800145e:	4798      	blx	r3
	RFModule.setAddresses(&RFModule, RF_Add_HIGH, RF_Add_LOW);
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <main+0x1b4>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001464:	2203      	movs	r2, #3
 8001466:	2103      	movs	r1, #3
 8001468:	4851      	ldr	r0, [pc, #324]	@ (80015b0 <main+0x1b4>)
 800146a:	4798      	blx	r3
	RFModule.setAirDataRate(&RFModule, AIRDATARATE_24k);
 800146c:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <main+0x1b4>)
 800146e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001472:	2102      	movs	r1, #2
 8001474:	484e      	ldr	r0, [pc, #312]	@ (80015b0 <main+0x1b4>)
 8001476:	4798      	blx	r3
	RFModule.setTransmissionMode(&RFModule, FIXEDMODE);
 8001478:	4b4d      	ldr	r3, [pc, #308]	@ (80015b0 <main+0x1b4>)
 800147a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800147c:	2101      	movs	r1, #1
 800147e:	484c      	ldr	r0, [pc, #304]	@ (80015b0 <main+0x1b4>)
 8001480:	4798      	blx	r3
	RFModule.setTransmissionPower(&RFModule, TRANSMISSIONPOWER_30);
 8001482:	4b4b      	ldr	r3, [pc, #300]	@ (80015b0 <main+0x1b4>)
 8001484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001486:	2100      	movs	r1, #0
 8001488:	4849      	ldr	r0, [pc, #292]	@ (80015b0 <main+0x1b4>)
 800148a:	4798      	blx	r3
	RFModule.setUARTBaudRate(&RFModule, UARTBAUDRATE_115200);
 800148c:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <main+0x1b4>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001492:	2107      	movs	r1, #7
 8001494:	4846      	ldr	r0, [pc, #280]	@ (80015b0 <main+0x1b4>)
 8001496:	4798      	blx	r3
	RFModule.setDebuggerUARTBaudRate(&RFModule, UARTBAUDRATE_115200);
 8001498:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <main+0x1b4>)
 800149a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800149e:	2107      	movs	r1, #7
 80014a0:	4843      	ldr	r0, [pc, #268]	@ (80015b0 <main+0x1b4>)
 80014a2:	4798      	blx	r3

	RFStart(&RFModule);
 80014a4:	4842      	ldr	r0, [pc, #264]	@ (80015b0 <main+0x1b4>)
 80014a6:	f001 fe8e 	bl	80031c6 <RFStart>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		mass = HX711_GetWeight(&MassSensor);
 80014aa:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <main+0x1a4>)
 80014ac:	f7ff ff8d 	bl	80013ca <HX711_GetWeight>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
 80014b4:	4b3f      	ldr	r3, [pc, #252]	@ (80015b4 <main+0x1b8>)
 80014b6:	edc3 7a00 	vstr	s15, [r3]

		if (RFModule.receiveDataPacket(&RFModule, message, sizeof(message))
 80014ba:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <main+0x1b4>)
 80014bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014be:	2204      	movs	r2, #4
 80014c0:	493d      	ldr	r1, [pc, #244]	@ (80015b8 <main+0x1bc>)
 80014c2:	483b      	ldr	r0, [pc, #236]	@ (80015b0 <main+0x1b4>)
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d157      	bne.n	800157c <main+0x180>
				== E32_Success) {
			// Patlatma
			if (message[0] == 'y') {
 80014cc:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <main+0x1bc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b79      	cmp	r3, #121	@ 0x79
 80014d2:	d12e      	bne.n	8001532 <main+0x136>
				if (message[1] == 'e') {
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <main+0x1bc>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	2b65      	cmp	r3, #101	@ 0x65
 80014da:	d142      	bne.n	8001562 <main+0x166>
					if (message[2] == 's') {
 80014dc:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <main+0x1bc>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	2b73      	cmp	r3, #115	@ 0x73
 80014e2:	d13e      	bne.n	8001562 <main+0x166>
						HAL_GPIO_WritePin(Ignition_Pin_GPIO_Port,
 80014e4:	2201      	movs	r2, #1
 80014e6:	2101      	movs	r1, #1
 80014e8:	482b      	ldr	r0, [pc, #172]	@ (8001598 <main+0x19c>)
 80014ea:	f002 fc5f 	bl	8003dac <HAL_GPIO_WritePin>
						Ignition_Pin_Pin, GPIO_PIN_SET);
						HAL_Delay(500);
 80014ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f2:	f002 f939 	bl	8003768 <HAL_Delay>
						HAL_GPIO_WritePin(Ignition_Pin_GPIO_Port,
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	4827      	ldr	r0, [pc, #156]	@ (8001598 <main+0x19c>)
 80014fc:	f002 fc56 	bl	8003dac <HAL_GPIO_WritePin>
						Ignition_Pin_Pin, GPIO_PIN_RESET);
						HAL_Delay(500);
 8001500:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001504:	f002 f930 	bl	8003768 <HAL_Delay>

						sendPack[0] = 11;
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <main+0x1c0>)
 800150a:	220b      	movs	r2, #11
 800150c:	701a      	strb	r2, [r3, #0]
						sendPack[1] = 45;
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <main+0x1c0>)
 8001510:	222d      	movs	r2, #45	@ 0x2d
 8001512:	705a      	strb	r2, [r3, #1]
						sendPack[2] = 101;
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <main+0x1c0>)
 8001516:	2265      	movs	r2, #101	@ 0x65
 8001518:	709a      	strb	r2, [r3, #2]
						RFModule.sendFixedDataPacket(&RFModule,
 800151a:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <main+0x1b4>)
 800151c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800151e:	2304      	movs	r3, #4
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <main+0x1c0>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2317      	movs	r3, #23
 8001528:	2207      	movs	r2, #7
 800152a:	2106      	movs	r1, #6
 800152c:	4820      	ldr	r0, [pc, #128]	@ (80015b0 <main+0x1b4>)
 800152e:	47a0      	blx	r4
 8001530:	e017      	b.n	8001562 <main+0x166>
					}
				}
			}

			// Sistem Kontrol
			else if (message[0] == 'k') {
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <main+0x1bc>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b6b      	cmp	r3, #107	@ 0x6b
 8001538:	d113      	bne.n	8001562 <main+0x166>
				sendPack[0] = 201;
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <main+0x1c0>)
 800153c:	22c9      	movs	r2, #201	@ 0xc9
 800153e:	701a      	strb	r2, [r3, #0]
				sendPack[1] = 16;
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <main+0x1c0>)
 8001542:	2210      	movs	r2, #16
 8001544:	705a      	strb	r2, [r3, #1]
				sendPack[2] = 67;
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <main+0x1c0>)
 8001548:	2243      	movs	r2, #67	@ 0x43
 800154a:	709a      	strb	r2, [r3, #2]
				RFModule.sendFixedDataPacket(&RFModule,
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <main+0x1b4>)
 800154e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8001550:	2304      	movs	r3, #4
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <main+0x1c0>)
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2317      	movs	r3, #23
 800155a:	2207      	movs	r2, #7
 800155c:	2106      	movs	r1, #6
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <main+0x1b4>)
 8001560:	47a0      	blx	r4
				RF_Gonderilecek_Add_HIGH,
				RF_Gonderilecek_Add_LOW, RF_Gonderilecek_Channel, sendPack,
						sizeof(sendPack));
			}

			sendPack[0] = 0;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <main+0x1c0>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			sendPack[1] = 0;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <main+0x1c0>)
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
			sendPack[2] = 0;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <main+0x1c0>)
 8001570:	2200      	movs	r2, #0
 8001572:	709a      	strb	r2, [r3, #2]
			sendPack[3] = 0;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <main+0x1c0>)
 8001576:	2200      	movs	r2, #0
 8001578:	70da      	strb	r2, [r3, #3]
 800157a:	e796      	b.n	80014aa <main+0xae>
		} else {
			message[0] = 0;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <main+0x1bc>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
			message[1] = 0;
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <main+0x1bc>)
 8001584:	2200      	movs	r2, #0
 8001586:	705a      	strb	r2, [r3, #1]
			message[2] = 0;
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <main+0x1bc>)
 800158a:	2200      	movs	r2, #0
 800158c:	709a      	strb	r2, [r3, #2]
			message[3] = 0;
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <main+0x1bc>)
 8001590:	2200      	movs	r2, #0
 8001592:	70da      	strb	r2, [r3, #3]
		mass = HX711_GetWeight(&MassSensor);
 8001594:	e789      	b.n	80014aa <main+0xae>
 8001596:	bf00      	nop
 8001598:	40020400 	.word	0x40020400
 800159c:	40020000 	.word	0x40020000
 80015a0:	200003b0 	.word	0x200003b0
 80015a4:	20000398 	.word	0x20000398
 80015a8:	200002a8 	.word	0x200002a8
 80015ac:	20000260 	.word	0x20000260
 80015b0:	200002f0 	.word	0x200002f0
 80015b4:	200003cc 	.word	0x200003cc
 80015b8:	200003c4 	.word	0x200003c4
 80015bc:	200003c8 	.word	0x200003c8

080015c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	@ 0x50
 80015c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	@ 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 ff3e 	bl	8008450 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <SystemClock_Config+0xc8>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <SystemClock_Config+0xc8>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <SystemClock_Config+0xc8>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <SystemClock_Config+0xcc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <SystemClock_Config+0xcc>)
 800160a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <SystemClock_Config+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001630:	2308      	movs	r3, #8
 8001632:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001634:	2364      	movs	r3, #100	@ 0x64
 8001636:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800163c:	2304      	movs	r3, #4
 800163e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f002 fbcb 	bl	8003de0 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x94>
		Error_Handler();
 8001650:	f000 f95a 	bl	8001908 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2103      	movs	r1, #3
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fe2d 	bl	80042d0 <HAL_RCC_ClockConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xc0>
		Error_Handler();
 800167c:	f000 f944 	bl	8001908 <Error_Handler>
	}
}
 8001680:	bf00      	nop
 8001682:	3750      	adds	r7, #80	@ 0x50
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000

08001690 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_SPI2_Init+0x64>)
 8001696:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <MX_SPI2_Init+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_SPI2_Init+0x64>)
 800169c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016a2:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016c4:	2238      	movs	r2, #56	@ 0x38
 80016c6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016dc:	220a      	movs	r2, #10
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_SPI2_Init+0x64>)
 80016e2:	f003 f813 	bl	800470c <HAL_SPI_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80016ec:	f000 f90c 	bl	8001908 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000208 	.word	0x20000208
 80016f8:	40003800 	.word	0x40003800

080016fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_USART1_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_USART1_UART_Init+0x4c>)
 8001734:	f003 fc3c 	bl	8004fb0 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800173e:	f000 f8e3 	bl	8001908 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000260 	.word	0x20000260
 800174c:	40011000 	.word	0x40011000

08001750 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <MX_USART2_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001788:	f003 fc12 	bl	8004fb0 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001792:	f000 f8b9 	bl	8001908 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002a8 	.word	0x200002a8
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	@ 0x28
 80017a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b4e      	ldr	r3, [pc, #312]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a4d      	ldr	r2, [pc, #308]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b4b      	ldr	r3, [pc, #300]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b44      	ldr	r3, [pc, #272]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a3f      	ldr	r2, [pc, #252]	@ (80018f8 <MX_GPIO_Init+0x154>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b39      	ldr	r3, [pc, #228]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a38      	ldr	r2, [pc, #224]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <MX_GPIO_Init+0x154>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <MX_GPIO_Init+0x154>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Ignition_Pin_Pin | SPI2_CS_Pin | RF_M0_Pin,
 8001846:	2200      	movs	r2, #0
 8001848:	210d      	movs	r1, #13
 800184a:	482c      	ldr	r0, [pc, #176]	@ (80018fc <MX_GPIO_Init+0x158>)
 800184c:	f002 faae 	bl	8003dac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001856:	482a      	ldr	r0, [pc, #168]	@ (8001900 <MX_GPIO_Init+0x15c>)
 8001858:	f002 faa8 	bl	8003dac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2104      	movs	r1, #4
 8001860:	4828      	ldr	r0, [pc, #160]	@ (8001904 <MX_GPIO_Init+0x160>)
 8001862:	f002 faa3 	bl	8003dac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Ignition_Pin_Pin SPI2_CS_Pin RF_M0_Pin */
	GPIO_InitStruct.Pin = Ignition_Pin_Pin | SPI2_CS_Pin | RF_M0_Pin;
 8001866:	230d      	movs	r3, #13
 8001868:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	481f      	ldr	r0, [pc, #124]	@ (80018fc <MX_GPIO_Init+0x158>)
 800187e:	f002 f8f9 	bl	8003a74 <HAL_GPIO_Init>

	/*Configure GPIO pin : HX711_SCK_Pin */
	GPIO_InitStruct.Pin = HX711_SCK_Pin;
 8001882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001886:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HX711_SCK_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4819      	ldr	r0, [pc, #100]	@ (8001900 <MX_GPIO_Init+0x15c>)
 800189c:	f002 f8ea 	bl	8003a74 <HAL_GPIO_Init>

	/*Configure GPIO pin : HX711_DOUT_Pin */
	GPIO_InitStruct.Pin = HX711_DOUT_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(HX711_DOUT_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4812      	ldr	r0, [pc, #72]	@ (8001900 <MX_GPIO_Init+0x15c>)
 80018b6:	f002 f8dd 	bl	8003a74 <HAL_GPIO_Init>

	/*Configure GPIO pin : RF_M1_Pin */
	GPIO_InitStruct.Pin = RF_M1_Pin;
 80018ba:	2304      	movs	r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RF_M1_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_GPIO_Init+0x160>)
 80018d2:	f002 f8cf 	bl	8003a74 <HAL_GPIO_Init>

	/*Configure GPIO pin : RF_AUX_Pin */
	GPIO_InitStruct.Pin = RF_AUX_Pin;
 80018d6:	2310      	movs	r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RF_AUX_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_GPIO_Init+0x158>)
 80018ea:	f002 f8c3 	bl	8003a74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020000 	.word	0x40020000
 8001904:	40020c00 	.word	0x40020c00

08001908 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <__debugPrintf>:
 *      Author: batum
 */

#include "rf.h"

void __debugPrintf(E32_433T30D* this, const char *format, ...){
 8001914:	b40e      	push	{r1, r2, r3}
 8001916:	b580      	push	{r7, lr}
 8001918:	b087      	sub	sp, #28
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	if (this->DebugPort != NULL) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d031      	beq.n	800198a <__debugPrintf+0x76>
		va_list args;

		va_start(args, format);
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	60fb      	str	r3, [r7, #12]
		int len = vsnprintf(NULL, 0, format, args);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001930:	2100      	movs	r1, #0
 8001932:	2000      	movs	r0, #0
 8001934:	f006 fcea 	bl	800830c <vsniprintf>
 8001938:	6178      	str	r0, [r7, #20]
		va_end(args);

		if (len <= 0) {
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd21      	ble.n	8001984 <__debugPrintf+0x70>
			return;
		}

		char *bufferTemp = (char*) malloc(len + 1);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fe5f 	bl	8006608 <malloc>
 800194a:	4603      	mov	r3, r0
 800194c:	613b      	str	r3, [r7, #16]
		if (bufferTemp == NULL) {
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d019      	beq.n	8001988 <__debugPrintf+0x74>
			return;
		}

		va_start(args, format);
 8001954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001958:	60fb      	str	r3, [r7, #12]
		vsnprintf(bufferTemp, len + 1, format, args);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	4619      	mov	r1, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001964:	6938      	ldr	r0, [r7, #16]
 8001966:	f006 fcd1 	bl	800830c <vsniprintf>
		va_end(args);

		HAL_UART_Transmit(this->DebugPort, (uint8_t*) bufferTemp, len,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6858      	ldr	r0, [r3, #4]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	b29a      	uxth	r2, r3
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	6939      	ldr	r1, [r7, #16]
 8001978:	f003 fb6a 	bl	8005050 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		free(bufferTemp);
 800197c:	6938      	ldr	r0, [r7, #16]
 800197e:	f004 fe4b 	bl	8006618 <free>
 8001982:	e002      	b.n	800198a <__debugPrintf+0x76>
			return;
 8001984:	bf00      	nop
 8001986:	e000      	b.n	800198a <__debugPrintf+0x76>
			return;
 8001988:	bf00      	nop
	}
}
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001992:	b003      	add	sp, #12
 8001994:	4770      	bx	lr

08001996 <__clearSerialBuffer>:

void __clearSerialBuffer(E32_433T30D* this){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_ORE)) {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d10c      	bne.n	80019c8 <__clearSerialBuffer+0x32>
		__HAL_UART_CLEAR_OREFLAG(this->SerialPort);
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
	}

	__HAL_UART_FLUSH_DRREGISTER(this->SerialPort);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <__waitAUX>:

Status __waitAUX(E32_433T30D* this, uint32_t timeout){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	uint32_t startTime = HAL_GetTick();
 80019e6:	f001 feb3 	bl	8003750 <HAL_GetTick>
 80019ea:	60f8      	str	r0, [r7, #12]
	if (this->_pinConfs.AUXPin.set != 0) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d023      	beq.n	8001a3e <__waitAUX+0x62>
		while (HAL_GPIO_ReadPin(this->_pinConfs.AUXPin.handle, this->_pinConfs.AUXPin.pin) == GPIO_PIN_RESET) {
 80019f6:	e00d      	b.n	8001a14 <__waitAUX+0x38>
			if (HAL_GetTick() - startTime > timeout) {
 80019f8:	f001 feaa 	bl	8003750 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d201      	bcs.n	8001a0c <__waitAUX+0x30>
				return E32_Timeout;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e022      	b.n	8001a52 <__waitAUX+0x76>
			}
			__managedDelay(this, 2);
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f823 	bl	8001a5a <__managedDelay>
		while (HAL_GPIO_ReadPin(this->_pinConfs.AUXPin.handle, this->_pinConfs.AUXPin.pin) == GPIO_PIN_RESET) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f002 f9ab 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0e5      	beq.n	80019f8 <__waitAUX+0x1c>
		}

		__managedDelay(this, 10);
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f813 	bl	8001a5a <__managedDelay>
 8001a34:	e00c      	b.n	8001a50 <__waitAUX+0x74>
	} else {
		while (HAL_GetTick() - startTime < this->_paramConfs.noAuxTimeOut) {
			__managedDelay(this, 2);
 8001a36:	2102      	movs	r1, #2
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f80e 	bl	8001a5a <__managedDelay>
		while (HAL_GetTick() - startTime < this->_paramConfs.noAuxTimeOut) {
 8001a3e:	f001 fe87 	bl	8003750 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3f2      	bcc.n	8001a36 <__waitAUX+0x5a>
		}
	}
	return E32_Success;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <__managedDelay>:

void __managedDelay(E32_433T30D* this, uint32_t timeout){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	uint32_t temp = HAL_GetTick();
 8001a64:	f001 fe74 	bl	8003750 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

	if((uint32_t) (temp) <= 0){
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <__managedDelay+0x1a>
		temp = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - temp) < timeout){}
 8001a74:	bf00      	nop
 8001a76:	f001 fe6b 	bl	8003750 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d8f7      	bhi.n	8001a76 <__managedDelay+0x1c>
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <__calculateCRC8>:

uint8_t __calculateCRC8(E32_433T30D* this, const uint8_t *data, const size_t length){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
    if(length + 1 > MAX_TX_BUFFER_SIZE){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001aa2:	d905      	bls.n	8001ab0 <__calculateCRC8+0x20>
    	__debugPrintf(this, "CRC8 Fonksiyonu Maksimum Paketten Büyük/n");
 8001aa4:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <__calculateCRC8+0x84>)
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ff34 	bl	8001914 <__debugPrintf>
        return E32_CrcBroken;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e02c      	b.n	8001b0a <__calculateCRC8+0x7a>
    }

    uint8_t crc = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]

    for (size_t i = 0; i < length - 1; ++i) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	e021      	b.n	8001afe <__calculateCRC8+0x6e>
        crc ^= data[i];
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	4053      	eors	r3, r2
 8001ac6:	77fb      	strb	r3, [r7, #31]
        for (uint8_t j = 0; j < 8; ++j) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
 8001acc:	e011      	b.n	8001af2 <__calculateCRC8+0x62>
            if (crc & 0x80){
 8001ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da07      	bge.n	8001ae6 <__calculateCRC8+0x56>
                crc = (crc << 1) ^ 0x07;
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	f083 0307 	eor.w	r3, r3, #7
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	77fb      	strb	r3, [r7, #31]
 8001ae4:	e002      	b.n	8001aec <__calculateCRC8+0x5c>
            } else {
                crc <<= 1;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	77fb      	strb	r3, [r7, #31]
        for (uint8_t j = 0; j < 8; ++j) {
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	3301      	adds	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d9ea      	bls.n	8001ace <__calculateCRC8+0x3e>
    for (size_t i = 0; i < length - 1; ++i) {
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3d8      	bcc.n	8001aba <__calculateCRC8+0x2a>
            }
        }
    }

    return crc;
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	0800ad70 	.word	0x0800ad70

08001b18 <__changeRFUARTBaudRate>:

void __changeRFUARTBaudRate(UART_HandleTypeDef *port, uint32_t newBaudRate, uint32_t newParity){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	HAL_UART_Abort(port);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f003 fbb5 	bl	8005294 <HAL_UART_Abort>

	__HAL_UART_FLUSH_DRREGISTER(port);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]

	port->Init.BaudRate = newBaudRate;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	605a      	str	r2, [r3, #4]
	port->Init.Parity = newParity;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	611a      	str	r2, [r3, #16]

	if(HAL_UART_Init(port) != HAL_OK){
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f003 fa37 	bl	8004fb0 <HAL_UART_Init>
		//Error_Handler();
	}
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <__setSettings>:

Status __setSettings(E32_433T30D *this) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	if (this->_pinConfs.M0Pin.set != 0) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80b9 	beq.w	8001cd2 <__setSettings+0x186>
		uint8_t SpedByte = 0, OptionByte = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	77fb      	strb	r3, [r7, #31]
 8001b64:	2300      	movs	r3, #0
 8001b66:	77bb      	strb	r3, [r7, #30]
		uint8_t MesArr[6];

		SpedByte = (this->_devConfs.RFSped.UARTParity << 6)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b6e:	019b      	lsls	r3, r3, #6
				| (this->_devConfs.RFSped.UARTBaud << 3)
 8001b70:	b25a      	sxtb	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b25a      	sxtb	r2, r3
				| (this->_devConfs.RFSped.AirDataRate);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b25b      	sxtb	r3, r3
		SpedByte = (this->_devConfs.RFSped.UARTParity << 6)
 8001b8c:	77fb      	strb	r3, [r7, #31]
		OptionByte = (this->_devConfs.RFOption.TransmissionMode << 7)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001b94:	01db      	lsls	r3, r3, #7
				| (this->_devConfs.RFOption.IODriver << 6)
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b25a      	sxtb	r2, r3
				| (this->_devConfs.RFOption.WirelessWakeUp << 3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b25a      	sxtb	r2, r3
				| (this->_devConfs.RFOption.FECset << 2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b25a      	sxtb	r2, r3
				| (this->_devConfs.RFOption.TransmissionPower);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
		OptionByte = (this->_devConfs.RFOption.TransmissionMode << 7)
 8001bce:	77bb      	strb	r3, [r7, #30]

		RF_WaitAUX(this);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff00 	bl	80019dc <__waitAUX>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d101      	bne.n	8001be6 <__setSettings+0x9a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e07a      	b.n	8001cdc <__setSettings+0x190>

		uint32_t originalBaudRate = this->SerialPort->Init.BaudRate;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
		uint32_t originalParity = this->SerialPort->Init.Parity;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	617b      	str	r3, [r7, #20]
		__changeRFUARTBaudRate(this->SerialPort, 9600, UART_PARITY_NONE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff89 	bl	8001b18 <__changeRFUARTBaudRate>
		__managedDelay(this, 200);
 8001c06:	21c8      	movs	r1, #200	@ 0xc8
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff26 	bl	8001a5a <__managedDelay>

		RF_Operating_Config();
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001c16:	2201      	movs	r2, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f002 f8c7 	bl	8003dac <HAL_GPIO_WritePin>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f002 f8be 	bl	8003dac <HAL_GPIO_WritePin>

		__managedDelay(this, 20);
 8001c30:	2114      	movs	r1, #20
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff11 	bl	8001a5a <__managedDelay>

		MesArr[0] = 0xC0;
 8001c38:	23c0      	movs	r3, #192	@ 0xc0
 8001c3a:	733b      	strb	r3, [r7, #12]
		MesArr[1] = this->_devConfs.AddHigh;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c42:	737b      	strb	r3, [r7, #13]
		MesArr[2] = this->_devConfs.AddLow;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c4a:	73bb      	strb	r3, [r7, #14]
		MesArr[3] = SpedByte;
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	73fb      	strb	r3, [r7, #15]
		MesArr[4] = this->_devConfs.channel;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c56:	743b      	strb	r3, [r7, #16]
		MesArr[5] = OptionByte;
 8001c58:	7fbb      	ldrb	r3, [r7, #30]
 8001c5a:	747b      	strb	r3, [r7, #17]

		HAL_UART_Transmit(this->SerialPort, (uint8_t*) MesArr,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	2206      	movs	r2, #6
 8001c6a:	f003 f9f1 	bl	8005050 <HAL_UART_Transmit>
				sizeof(MesArr) / sizeof(MesArr[0]), HAL_MAX_DELAY);

		RF_WaitAUX(this);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff feb1 	bl	80019dc <__waitAUX>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d101      	bne.n	8001c84 <__setSettings+0x138>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e02b      	b.n	8001cdc <__setSettings+0x190>

		__managedDelay(this, 750);
 8001c84:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fee6 	bl	8001a5a <__managedDelay>

		RF_Operating_Normal();
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001c96:	2200      	movs	r2, #0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f002 f887 	bl	8003dac <HAL_GPIO_WritePin>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	f002 f87e 	bl	8003dac <HAL_GPIO_WritePin>

		__changeRFUARTBaudRate(this->SerialPort, originalBaudRate,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff2d 	bl	8001b18 <__changeRFUARTBaudRate>
				originalParity);
		__managedDelay(this, 200);
 8001cbe:	21c8      	movs	r1, #200	@ 0xc8
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff feca 	bl	8001a5a <__managedDelay>

		__managedDelay(this, 20);
 8001cc6:	2114      	movs	r1, #20
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fec6 	bl	8001a5a <__managedDelay>

		return E32_Success;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e004      	b.n	8001cdc <__setSettings+0x190>
	}
	else{
		__debugPrintf(this, "M0 and M1 pins not set. Device's configs cannot be change./n");
 8001cd2:	4904      	ldr	r1, [pc, #16]	@ (8001ce4 <__setSettings+0x198>)
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe1d 	bl	8001914 <__debugPrintf>
		return E32_FailureMode;
 8001cda:	2304      	movs	r3, #4
	}
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0800ad9c 	.word	0x0800ad9c

08001ce8 <__getSettings>:

Status __getSettings(E32_433T30D* this){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (this->_pinConfs.M0Pin.set != 0) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8102 	beq.w	8001f00 <__getSettings+0x218>
		this->tempConfig = (ConfigRF*) malloc(sizeof(ConfigRF));
 8001cfc:	200b      	movs	r0, #11
 8001cfe:	f004 fc83 	bl	8006608 <malloc>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
		if (this->tempConfig == NULL) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <__getSettings+0x2e>
			return E32_BrokenGetSet;
 8001d12:	2307      	movs	r3, #7
 8001d14:	e0f9      	b.n	8001f0a <__getSettings+0x222>
		}

		__clearSerialBuffer(this);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fe3d 	bl	8001996 <__clearSerialBuffer>
		uint8_t SpedByte = 0, OptionByte = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		uint8_t MesArr[6], sendpack[3];

		RF_WaitAUX(this);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fe54 	bl	80019dc <__waitAUX>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d101      	bne.n	8001d3e <__getSettings+0x56>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0e5      	b.n	8001f0a <__getSettings+0x222>

		uint32_t originalBaudRate = this->SerialPort->Init.BaudRate;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	623b      	str	r3, [r7, #32]
		uint32_t originalParity = this->SerialPort->Init.Parity;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	61fb      	str	r3, [r7, #28]
		__changeRFUARTBaudRate(this->SerialPort, 9600, UART_PARITY_NONE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fedd 	bl	8001b18 <__changeRFUARTBaudRate>

		__managedDelay(this, 200);
 8001d5e:	21c8      	movs	r1, #200	@ 0xc8
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fe7a 	bl	8001a5a <__managedDelay>
		RF_Operating_Config();
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4619      	mov	r1, r3
 8001d72:	f002 f81b 	bl	8003dac <HAL_GPIO_WritePin>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d80:	2201      	movs	r2, #1
 8001d82:	4619      	mov	r1, r3
 8001d84:	f002 f812 	bl	8003dac <HAL_GPIO_WritePin>

		__managedDelay(this, 100);
 8001d88:	2164      	movs	r1, #100	@ 0x64
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe65 	bl	8001a5a <__managedDelay>

		sendpack[0] = 0xC1;
 8001d90:	23c1      	movs	r3, #193	@ 0xc1
 8001d92:	733b      	strb	r3, [r7, #12]
		sendpack[1] = 0xC1;
 8001d94:	23c1      	movs	r3, #193	@ 0xc1
 8001d96:	737b      	strb	r3, [r7, #13]
		sendpack[2] = 0xC1;
 8001d98:	23c1      	movs	r3, #193	@ 0xc1
 8001d9a:	73bb      	strb	r3, [r7, #14]

		HAL_UART_Transmit(this->SerialPort, (uint8_t*) sendpack,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	f107 010c 	add.w	r1, r7, #12
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
 8001da8:	2203      	movs	r2, #3
 8001daa:	f003 f951 	bl	8005050 <HAL_UART_Transmit>
				sizeof(sendpack) / sizeof(sendpack[0]), HAL_MAX_DELAY);

		long startTime = HAL_GetTick();
 8001dae:	f001 fccf 	bl	8003750 <HAL_GetTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	61bb      	str	r3, [r7, #24]
		uint8_t cnt = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		while (cnt < sizeof(MesArr)) {
 8001dbc:	e022      	b.n	8001e04 <__getSettings+0x11c>
			if (HAL_GetTick() - startTime > this->_paramConfs.serialTimeout) {
 8001dbe:	f001 fcc7 	bl	8003750 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d901      	bls.n	8001dd4 <__getSettings+0xec>
				return E32_Timeout;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e09a      	b.n	8001f0a <__getSettings+0x222>
			}

			if (__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_RXNE)) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d10f      	bne.n	8001e04 <__getSettings+0x11c>
				HAL_UART_Receive(this->SerialPort, &MesArr[cnt], 1, 10);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	18d1      	adds	r1, r2, r3
 8001df2:	230a      	movs	r3, #10
 8001df4:	2201      	movs	r2, #1
 8001df6:	f003 f9b6 	bl	8005166 <HAL_UART_Receive>
				cnt++;
 8001dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		while (cnt < sizeof(MesArr)) {
 8001e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d9d8      	bls.n	8001dbe <__getSettings+0xd6>
		 if(__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_RXNE)){
		 HAL_UART_Receive(this->SerialPort, MesArr, sizeof(MesArr), 10);
		 }
		 */

		this->tempConfig->AddressHigh = MesArr[1];
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	7c7a      	ldrb	r2, [r7, #17]
 8001e12:	725a      	strb	r2, [r3, #9]
		this->tempConfig->AddressLow = MesArr[2];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	7cba      	ldrb	r2, [r7, #18]
 8001e1a:	729a      	strb	r2, [r3, #10]
		SpedByte = MesArr[3];
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		this->tempConfig->Channel = MesArr[4];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	7d3a      	ldrb	r2, [r7, #20]
 8001e28:	721a      	strb	r2, [r3, #8]
		OptionByte = MesArr[5];
 8001e2a:	7d7b      	ldrb	r3, [r7, #21]
 8001e2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		this->tempConfig->RFSped.UARTParity = (RF_UART_PARITY) ((SpedByte >> 6)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001e38:	0992      	lsrs	r2, r2, #6
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
				& 0b11);
		this->tempConfig->RFSped.UARTBaud = (RF_UART_BAUD) ((SpedByte >> 3)
 8001e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
				& 0b111);
 8001e4a:	f002 0207 	and.w	r2, r2, #7
 8001e4e:	b2d2      	uxtb	r2, r2
		this->tempConfig->RFSped.UARTBaud = (RF_UART_BAUD) ((SpedByte >> 3)
 8001e50:	705a      	strb	r2, [r3, #1]
		this->tempConfig->RFSped.AirDataRate =
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
				(RF_AIR_DATA) ((SpedByte) & 0b111);
 8001e56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001e5a:	f002 0207 	and.w	r2, r2, #7
 8001e5e:	b2d2      	uxtb	r2, r2
		this->tempConfig->RFSped.AirDataRate =
 8001e60:	709a      	strb	r2, [r3, #2]

		this->tempConfig->RFOption.TransmissionMode =
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001e6a:	09d2      	lsrs	r2, r2, #7
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	70da      	strb	r2, [r3, #3]
				(RF_TRANS_MODE) ((OptionByte >> 7) & 0b1);
		this->tempConfig->RFOption.IODriver = (RF_IO_MODE) ((OptionByte >> 6)
 8001e70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
				& 0b1);
 8001e7c:	f002 0201 	and.w	r2, r2, #1
 8001e80:	b2d2      	uxtb	r2, r2
		this->tempConfig->RFOption.IODriver = (RF_IO_MODE) ((OptionByte >> 6)
 8001e82:	711a      	strb	r2, [r3, #4]
		this->tempConfig->RFOption.WirelessWakeUp = (RF_WIRELESS) ((OptionByte
 8001e84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
				>> 3) & 0b111);
 8001e90:	f002 0207 	and.w	r2, r2, #7
 8001e94:	b2d2      	uxtb	r2, r2
		this->tempConfig->RFOption.WirelessWakeUp = (RF_WIRELESS) ((OptionByte
 8001e96:	715a      	strb	r2, [r3, #5]
		this->tempConfig->RFOption.FECset = (RF_FEC) ((OptionByte >> 2) & 0b1);
 8001e98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f002 0201 	and.w	r2, r2, #1
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	719a      	strb	r2, [r3, #6]
		this->tempConfig->RFOption.TransmissionPower =
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
				(RF_TRANS_POWER) ((OptionByte) & 0b11);
 8001eb0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	b2d2      	uxtb	r2, r2
		this->tempConfig->RFOption.TransmissionPower =
 8001eba:	71da      	strb	r2, [r3, #7]

		RF_Operating_Normal();
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f001 ff70 	bl	8003dac <HAL_GPIO_WritePin>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f001 ff67 	bl	8003dac <HAL_GPIO_WritePin>

		__changeRFUARTBaudRate(this->SerialPort, originalBaudRate, originalParity);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	6a39      	ldr	r1, [r7, #32]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe16 	bl	8001b18 <__changeRFUARTBaudRate>
		__managedDelay(this, 200);
 8001eec:	21c8      	movs	r1, #200	@ 0xc8
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fdb3 	bl	8001a5a <__managedDelay>

		__managedDelay(this, 100);
 8001ef4:	2164      	movs	r1, #100	@ 0x64
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fdaf 	bl	8001a5a <__managedDelay>

		return E32_Success;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e004      	b.n	8001f0a <__getSettings+0x222>
	}
	else{
		__debugPrintf(this, "M0 and M1 pins not set. Device's configs cannot be fetch./n");
 8001f00:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <__getSettings+0x22c>)
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd06 	bl	8001914 <__debugPrintf>
		return E32_FailureMode;
 8001f08:	2304      	movs	r3, #4
	}
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3728      	adds	r7, #40	@ 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	0800addc 	.word	0x0800addc

08001f18 <__getTranmissionPower>:

char* __getTranmissionPower(const E32_433T30D* this) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFOption.TransmissionPower) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	79db      	ldrb	r3, [r3, #7]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d812      	bhi.n	8001f50 <__getTranmissionPower+0x38>
 8001f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f30 <__getTranmissionPower+0x18>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001f4d 	.word	0x08001f4d
 8001f34:	08001f49 	.word	0x08001f49
 8001f38:	08001f45 	.word	0x08001f45
 8001f3c:	08001f41 	.word	0x08001f41
	case TRANSMISSIONPOWER_21:
		return "21 dBm";
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <__getTranmissionPower+0x48>)
 8001f42:	e006      	b.n	8001f52 <__getTranmissionPower+0x3a>
		break;

	case TRANSMISSIONPOWER_24:
		return "24 dBm";
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <__getTranmissionPower+0x4c>)
 8001f46:	e004      	b.n	8001f52 <__getTranmissionPower+0x3a>
		break;

	case TRANSMISSIONPOWER_27:
		return "27 dBm";
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <__getTranmissionPower+0x50>)
 8001f4a:	e002      	b.n	8001f52 <__getTranmissionPower+0x3a>
		break;

	case TRANSMISSIONPOWER_30:
		return "30 dBm";
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <__getTranmissionPower+0x54>)
 8001f4e:	e000      	b.n	8001f52 <__getTranmissionPower+0x3a>
		break;
	}
	return "30 dBm";
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <__getTranmissionPower+0x54>)
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	0800ae18 	.word	0x0800ae18
 8001f64:	0800ae20 	.word	0x0800ae20
 8001f68:	0800ae28 	.word	0x0800ae28
 8001f6c:	0800ae30 	.word	0x0800ae30

08001f70 <__getFECFilter>:

char* __getFECFilter(const E32_433T30D* this) {
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFOption.FECset) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	799b      	ldrb	r3, [r3, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <__getFECFilter+0x1a>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d103      	bne.n	8001f8e <__getFECFilter+0x1e>
	case FEC_ON:
		return "Aktif";
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <__getFECFilter+0x2c>)
 8001f88:	e002      	b.n	8001f90 <__getFECFilter+0x20>
		break;

	case FEC_OFF:
		return "Devre Disi";
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <__getFECFilter+0x30>)
 8001f8c:	e000      	b.n	8001f90 <__getFECFilter+0x20>
		break;
	}
	return "30 dBm";
 8001f8e:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <__getFECFilter+0x34>)
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	0800ae38 	.word	0x0800ae38
 8001fa0:	0800ae40 	.word	0x0800ae40
 8001fa4:	0800ae30 	.word	0x0800ae30

08001fa8 <__getWirelessWakeup>:

char* __getWirelessWakeup(const E32_433T30D* this) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFOption.WirelessWakeUp) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	795b      	ldrb	r3, [r3, #5]
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	d822      	bhi.n	8002000 <__getWirelessWakeup+0x58>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <__getWirelessWakeup+0x18>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fe1 	.word	0x08001fe1
 8001fc4:	08001fe5 	.word	0x08001fe5
 8001fc8:	08001fe9 	.word	0x08001fe9
 8001fcc:	08001fed 	.word	0x08001fed
 8001fd0:	08001ff1 	.word	0x08001ff1
 8001fd4:	08001ff5 	.word	0x08001ff5
 8001fd8:	08001ff9 	.word	0x08001ff9
 8001fdc:	08001ffd 	.word	0x08001ffd
	case WIRELESSWAKEUP_250:
		return "250 ms";
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <__getWirelessWakeup+0x68>)
 8001fe2:	e00e      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_500:
		return "500 ms";
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <__getWirelessWakeup+0x6c>)
 8001fe6:	e00c      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_750:
		return "750 ms";
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <__getWirelessWakeup+0x70>)
 8001fea:	e00a      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_1000:
		return "1000 ms";
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <__getWirelessWakeup+0x74>)
 8001fee:	e008      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_1250:
		return "1250 ms";
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <__getWirelessWakeup+0x78>)
 8001ff2:	e006      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_1500:
		return "1500 ms";
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <__getWirelessWakeup+0x7c>)
 8001ff6:	e004      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_1750:
		return "1750 ms";
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <__getWirelessWakeup+0x80>)
 8001ffa:	e002      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;

	case WIRELESSWAKEUP_2000:
		return "2000 ms";
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <__getWirelessWakeup+0x84>)
 8001ffe:	e000      	b.n	8002002 <__getWirelessWakeup+0x5a>
		break;
	}
	return "30 dBm";
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <__getWirelessWakeup+0x88>)
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0800ae4c 	.word	0x0800ae4c
 8002014:	0800ae54 	.word	0x0800ae54
 8002018:	0800ae5c 	.word	0x0800ae5c
 800201c:	0800ae64 	.word	0x0800ae64
 8002020:	0800ae6c 	.word	0x0800ae6c
 8002024:	0800ae74 	.word	0x0800ae74
 8002028:	0800ae7c 	.word	0x0800ae7c
 800202c:	0800ae84 	.word	0x0800ae84
 8002030:	0800ae30 	.word	0x0800ae30

08002034 <__getIOMode>:

char* __getIOMode(const E32_433T30D* this) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFOption.IODriver) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <__getIOMode+0x1a>
 8002046:	2b01      	cmp	r3, #1
 8002048:	d103      	bne.n	8002052 <__getIOMode+0x1e>
	case IO_OPENDRAIN:
		return "IO Open Drain Modu";
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <__getIOMode+0x2c>)
 800204c:	e002      	b.n	8002054 <__getIOMode+0x20>
		break;

	case IO_PUSHPULL:
		return "IO Push Pull Modu";
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <__getIOMode+0x30>)
 8002050:	e000      	b.n	8002054 <__getIOMode+0x20>
		break;
	}
	return "30 dBm";
 8002052:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <__getIOMode+0x34>)
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	0800ae8c 	.word	0x0800ae8c
 8002064:	0800aea0 	.word	0x0800aea0
 8002068:	0800ae30 	.word	0x0800ae30

0800206c <__getTransmissionType>:

char* __getTransmissionType(const E32_433T30D* this) {
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFOption.TransmissionMode) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <__getTransmissionType+0x18>
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <__getTransmissionType+0x1c>
 8002082:	e003      	b.n	800208c <__getTransmissionType+0x20>
	case TRANSPARENTMODE:
		return "Seffaf Mod";
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <__getTransmissionType+0x30>)
 8002086:	e002      	b.n	800208e <__getTransmissionType+0x22>
		break;

	case FIXEDMODE:
		return "Sabit Kanal Modu";
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <__getTransmissionType+0x34>)
 800208a:	e000      	b.n	800208e <__getTransmissionType+0x22>
		break;

	default:
		return "Seffaf Mod";
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <__getTransmissionType+0x30>)
		break;
	}
	return "30 dBm";
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	0800aeb4 	.word	0x0800aeb4
 80020a0:	0800aec0 	.word	0x0800aec0

080020a4 <__getAirData>:

char* __getAirData(const E32_433T30D* this) {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFSped.AirDataRate) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	789b      	ldrb	r3, [r3, #2]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d81a      	bhi.n	80020ec <__getAirData+0x48>
 80020b6:	a201      	add	r2, pc, #4	@ (adr r2, 80020bc <__getAirData+0x18>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020d5 	.word	0x080020d5
 80020c0:	080020d9 	.word	0x080020d9
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020e9 	.word	0x080020e9
	case AIRDATARATE_03k:
		return "0.3k bps";
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <__getAirData+0x58>)
 80020d6:	e00a      	b.n	80020ee <__getAirData+0x4a>
		break;

	case AIRDATARATE_12k:
		return "1.2k bps";
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <__getAirData+0x5c>)
 80020da:	e008      	b.n	80020ee <__getAirData+0x4a>
		break;

	case AIRDATARATE_24k:
		return "2.4k bps (Varsayilan)";
 80020dc:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <__getAirData+0x60>)
 80020de:	e006      	b.n	80020ee <__getAirData+0x4a>
		break;

	case AIRDATARATE_48k:
		return "4.8k bps";
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <__getAirData+0x64>)
 80020e2:	e004      	b.n	80020ee <__getAirData+0x4a>
		break;

	case AIRDATARATE_96k:
		return "9.6k bps";
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <__getAirData+0x68>)
 80020e6:	e002      	b.n	80020ee <__getAirData+0x4a>
		break;

	case AIRDATARATE_192k:
		return "19.2k bps";
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <__getAirData+0x6c>)
 80020ea:	e000      	b.n	80020ee <__getAirData+0x4a>
		break;
	}
	return "30 dBm";
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <__getAirData+0x70>)
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	0800aed4 	.word	0x0800aed4
 8002100:	0800aee0 	.word	0x0800aee0
 8002104:	0800aeec 	.word	0x0800aeec
 8002108:	0800af04 	.word	0x0800af04
 800210c:	0800af10 	.word	0x0800af10
 8002110:	0800af1c 	.word	0x0800af1c
 8002114:	0800ae30 	.word	0x0800ae30

08002118 <__getUARTParity>:

char* __getUARTParity(const E32_433T30D* this) {
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFSped.UARTParity) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d008      	beq.n	800213c <__getUARTParity+0x24>
 800212a:	2b02      	cmp	r3, #2
 800212c:	dc0a      	bgt.n	8002144 <__getUARTParity+0x2c>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <__getUARTParity+0x20>
 8002132:	2b01      	cmp	r3, #1
 8002134:	d004      	beq.n	8002140 <__getUARTParity+0x28>
 8002136:	e005      	b.n	8002144 <__getUARTParity+0x2c>
	case UARTPARITY_8N1:
		return "8 Bit, Parity Yok, 1 Durdurma Biti";
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <__getUARTParity+0x3c>)
 800213a:	e004      	b.n	8002146 <__getUARTParity+0x2e>
		break;

	case UARTPARITY_8E1:
		return "8 Bit, Çift Parity, 1 Durdurma Biti";
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <__getUARTParity+0x40>)
 800213e:	e002      	b.n	8002146 <__getUARTParity+0x2e>
		break;

	case UARTPARITY_8O1:
		return "8 Bit, Tek Parity, 1 Durdurma Biti";
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <__getUARTParity+0x44>)
 8002142:	e000      	b.n	8002146 <__getUARTParity+0x2e>
		break;
	}
	return "30 dBm";
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <__getUARTParity+0x48>)
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	0800af28 	.word	0x0800af28
 8002158:	0800af4c 	.word	0x0800af4c
 800215c:	0800af74 	.word	0x0800af74
 8002160:	0800ae30 	.word	0x0800ae30

08002164 <__getUARTBaudRate>:

char* __getUARTBaudRate(const E32_433T30D* this) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFSped.UARTBaud) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	2b07      	cmp	r3, #7
 8002174:	d822      	bhi.n	80021bc <__getUARTBaudRate+0x58>
 8002176:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <__getUARTBaudRate+0x18>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	0800219d 	.word	0x0800219d
 8002180:	080021a1 	.word	0x080021a1
 8002184:	080021a5 	.word	0x080021a5
 8002188:	080021a9 	.word	0x080021a9
 800218c:	080021ad 	.word	0x080021ad
 8002190:	080021b1 	.word	0x080021b1
 8002194:	080021b5 	.word	0x080021b5
 8002198:	080021b9 	.word	0x080021b9
	case UARTBAUDRATE_1200:
		return "1200 bps";
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <__getUARTBaudRate+0x68>)
 800219e:	e00e      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_2400:
		return "2400 bps";
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <__getUARTBaudRate+0x6c>)
 80021a2:	e00c      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_4800:
		return "4800 bps";
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <__getUARTBaudRate+0x70>)
 80021a6:	e00a      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_9600:
		return "9600 bps (Varsayilan)";
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <__getUARTBaudRate+0x74>)
 80021aa:	e008      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_19200:
		return "19200 bps";
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <__getUARTBaudRate+0x78>)
 80021ae:	e006      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_38400:
		return "38400 bps";
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <__getUARTBaudRate+0x7c>)
 80021b2:	e004      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_57600:
		return "57600 bps";
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <__getUARTBaudRate+0x80>)
 80021b6:	e002      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;

	case UARTBAUDRATE_115200:
		return "115200 bps";
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <__getUARTBaudRate+0x84>)
 80021ba:	e000      	b.n	80021be <__getUARTBaudRate+0x5a>
		break;
	}
	return "30 dBm";
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <__getUARTBaudRate+0x88>)
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	0800af98 	.word	0x0800af98
 80021d0:	0800afa4 	.word	0x0800afa4
 80021d4:	0800afb0 	.word	0x0800afb0
 80021d8:	0800afbc 	.word	0x0800afbc
 80021dc:	0800afd4 	.word	0x0800afd4
 80021e0:	0800afe0 	.word	0x0800afe0
 80021e4:	0800afec 	.word	0x0800afec
 80021e8:	0800aff8 	.word	0x0800aff8
 80021ec:	0800ae30 	.word	0x0800ae30

080021f0 <__airDataRateEnum2Value>:

float __airDataRateEnum2Value(const E32_433T30D* this){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	switch (this->tempConfig->RFSped.AirDataRate) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	789b      	ldrb	r3, [r3, #2]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d81a      	bhi.n	8002238 <__airDataRateEnum2Value+0x48>
 8002202:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <__airDataRateEnum2Value+0x18>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002221 	.word	0x08002221
 800220c:	08002225 	.word	0x08002225
 8002210:	08002229 	.word	0x08002229
 8002214:	0800222d 	.word	0x0800222d
 8002218:	08002231 	.word	0x08002231
 800221c:	08002235 	.word	0x08002235
	case AIRDATARATE_03k:
		return 0.3;
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <__airDataRateEnum2Value+0x5c>)
 8002222:	e00a      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	case AIRDATARATE_12k:
		return 1.2;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <__airDataRateEnum2Value+0x60>)
 8002226:	e008      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	case AIRDATARATE_24k:
		return 2.4;
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <__airDataRateEnum2Value+0x64>)
 800222a:	e006      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	case AIRDATARATE_48k:
		return 4.8;
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <__airDataRateEnum2Value+0x68>)
 800222e:	e004      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	case AIRDATARATE_96k:
		return 9.6;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <__airDataRateEnum2Value+0x6c>)
 8002232:	e002      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	case AIRDATARATE_192k:
		return 19.2;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <__airDataRateEnum2Value+0x70>)
 8002236:	e000      	b.n	800223a <__airDataRateEnum2Value+0x4a>
	default:
		return 4.8;
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <__airDataRateEnum2Value+0x68>)
	}
}
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	3e99999a 	.word	0x3e99999a
 8002250:	3f99999a 	.word	0x3f99999a
 8002254:	4019999a 	.word	0x4019999a
 8002258:	4099999a 	.word	0x4099999a
 800225c:	4119999a 	.word	0x4119999a
 8002260:	4199999a 	.word	0x4199999a

08002264 <__UARTRateEnum2Value>:

uint32_t __UARTRateEnum2Value(const RF_UART_BAUD baud){
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
	switch (baud) {
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b07      	cmp	r3, #7
 8002272:	d82b      	bhi.n	80022cc <__UARTRateEnum2Value+0x68>
 8002274:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <__UARTRateEnum2Value+0x18>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	0800229d 	.word	0x0800229d
 8002280:	080022a3 	.word	0x080022a3
 8002284:	080022a9 	.word	0x080022a9
 8002288:	080022af 	.word	0x080022af
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022bb 	.word	0x080022bb
 8002294:	080022c1 	.word	0x080022c1
 8002298:	080022c7 	.word	0x080022c7
	case UARTBAUDRATE_1200:
		return 1200;
 800229c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80022a0:	e016      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_2400:
		return 2400;
 80022a2:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80022a6:	e013      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_4800:
		return 4800;
 80022a8:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80022ac:	e010      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_9600:
		return 9600;
 80022ae:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80022b2:	e00d      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_19200:
		return 19200;
 80022b4:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80022b8:	e00a      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_38400:
		return 38400;
 80022ba:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80022be:	e007      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_57600:
		return 57600;
 80022c0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80022c4:	e004      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	case UARTBAUDRATE_115200:
		return 115200;
 80022c6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80022ca:	e001      	b.n	80022d0 <__UARTRateEnum2Value+0x6c>
	default:
		return 9600;
 80022cc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
	}
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <__UARTParityEnum2Value>:

uint32_t __UARTParityEnum2Value(const RF_UART_PARITY parity){
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
	switch (parity) {
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d00b      	beq.n	8002304 <__UARTParityEnum2Value+0x28>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	dc0c      	bgt.n	800230a <__UARTParityEnum2Value+0x2e>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <__UARTParityEnum2Value+0x1e>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d002      	beq.n	80022fe <__UARTParityEnum2Value+0x22>
 80022f8:	e007      	b.n	800230a <__UARTParityEnum2Value+0x2e>
	case UARTPARITY_8N1:
		return UART_PARITY_NONE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e006      	b.n	800230c <__UARTParityEnum2Value+0x30>
	case UARTPARITY_8O1:
		return UART_PARITY_ODD;
 80022fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002302:	e003      	b.n	800230c <__UARTParityEnum2Value+0x30>
	case UARTPARITY_8E1:
		return UART_PARITY_EVEN;
 8002304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002308:	e000      	b.n	800230c <__UARTParityEnum2Value+0x30>
	default:
		return UART_PARITY_NONE;
 800230a:	2300      	movs	r3, #0
	}
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <__calculatePacketSendTime>:

uint64_t  __calculatePacketSendTime(E32_433T30D* this, const size_t packetSize){
 8002318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800231c:	ed2d 8b02 	vpush	{d8}
 8002320:	b087      	sub	sp, #28
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
    uint16_t packetBitSize = packetSize * 8;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	82fb      	strh	r3, [r7, #22]
    uint64_t  packetTime = 0;
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Air Data Rate Time
    packetTime += (1000 * packetBitSize) / (__airDataRateEnum2Value(this) * 1000);
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff4e 	bl	80021f0 <__airDataRateEnum2Value>
 8002354:	eef0 7a40 	vmov.f32	s15, s0
 8002358:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80023cc <__calculatePacketSendTime+0xb4>
 800235c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002360:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8002364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002368:	f7fe fd5e 	bl	8000e28 <__aeabi_ul2f>
 800236c:	ee07 0a90 	vmov	s15, r0
 8002370:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002374:	ee17 0a90 	vmov	r0, s15
 8002378:	f7fe fdcc 	bl	8000f14 <__aeabi_f2ulz>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // UART Time
    packetTime += (1000 * packetBitSize) / __UARTRateEnum2Value(this->tempConfig->RFSped.UARTBaud);
 8002384:	8afb      	ldrh	r3, [r7, #22]
 8002386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	461e      	mov	r6, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff64 	bl	8002264 <__UARTRateEnum2Value>
 800239c:	4603      	mov	r3, r0
 800239e:	fbb6 f3f3 	udiv	r3, r6, r3
 80023a2:	2200      	movs	r2, #0
 80023a4:	461c      	mov	r4, r3
 80023a6:	4615      	mov	r5, r2
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	eb12 0804 	adds.w	r8, r2, r4
 80023b0:	eb43 0905 	adc.w	r9, r3, r5
 80023b4:	e9c7 8902 	strd	r8, r9, [r7, #8]

    return packetTime;
 80023b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	ecbd 8b02 	vpop	{d8}
 80023c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023cc:	447a0000 	.word	0x447a0000

080023d0 <__setPinConfig>:

Status __setPinConfig(E32_433T30D* this, const RF_GPIOPinData m0, const RF_GPIOPinData m1, const RF_GPIOPinData aux){
 80023d0:	b082      	sub	sp, #8
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b096      	sub	sp, #88	@ 0x58
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	1d38      	adds	r0, r7, #4
 80023dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80023e0:	667b      	str	r3, [r7, #100]	@ 0x64
	this->_pinConfs.AUXPin = aux;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3344      	adds	r3, #68	@ 0x44
 80023e6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80023ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ee:	e883 0003 	stmia.w	r3, {r0, r1}
	this->_pinConfs.M0Pin = m0;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3334      	adds	r3, #52	@ 0x34
 80023f6:	1d3a      	adds	r2, r7, #4
 80023f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fc:	e883 0003 	stmia.w	r3, {r0, r1}
	this->_pinConfs.M1Pin = m1;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	333c      	adds	r3, #60	@ 0x3c
 8002404:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	e883 0003 	stmia.w	r3, {r0, r1}

	if (this->_pinConfs.AUXPin.handle != NULL) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05e      	beq.n	80024d6 <__setPinConfig+0x106>
		this->_pinConfs.AUXPin.set = 1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

		GPIO_InitTypeDef GPIO_Temp = { 0 };
 8002420:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]

		__HAL_RCC_GPIOH_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	@ 0x40
 8002434:	4b65      	ldr	r3, [pc, #404]	@ (80025cc <__setPinConfig+0x1fc>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	4a64      	ldr	r2, [pc, #400]	@ (80025cc <__setPinConfig+0x1fc>)
 800243a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002440:	4b62      	ldr	r3, [pc, #392]	@ (80025cc <__setPinConfig+0x1fc>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	643b      	str	r3, [r7, #64]	@ 0x40
 800244a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002450:	4b5e      	ldr	r3, [pc, #376]	@ (80025cc <__setPinConfig+0x1fc>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <__setPinConfig+0x1fc>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6313      	str	r3, [r2, #48]	@ 0x30
 800245c:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <__setPinConfig+0x1fc>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800246c:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <__setPinConfig+0x1fc>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	4a56      	ldr	r2, [pc, #344]	@ (80025cc <__setPinConfig+0x1fc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6313      	str	r3, [r2, #48]	@ 0x30
 8002478:	4b54      	ldr	r3, [pc, #336]	@ (80025cc <__setPinConfig+0x1fc>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
 8002488:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <__setPinConfig+0x1fc>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	4a4f      	ldr	r2, [pc, #316]	@ (80025cc <__setPinConfig+0x1fc>)
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	6313      	str	r3, [r2, #48]	@ 0x30
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <__setPinConfig+0x1fc>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

		HAL_GPIO_WritePin(this->_pinConfs.AUXPin.handle, this->_pinConfs.AUXPin.pin, GPIO_PIN_RESET);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024aa:	2200      	movs	r2, #0
 80024ac:	4619      	mov	r1, r3
 80024ae:	f001 fc7d 	bl	8003dac <HAL_GPIO_WritePin>

		GPIO_Temp.Pin = this->_pinConfs.AUXPin.pin;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
		GPIO_Temp.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	64bb      	str	r3, [r7, #72]	@ 0x48
		GPIO_Temp.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		GPIO_Temp.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	653b      	str	r3, [r7, #80]	@ 0x50

		HAL_GPIO_Init(this->_pinConfs.AUXPin.handle, &GPIO_Temp);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 facf 	bl	8003a74 <HAL_GPIO_Init>
	}

	if (this->_pinConfs.M0Pin.handle != NULL && this->_pinConfs.M1Pin.handle != NULL) {
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06e      	beq.n	80025bc <__setPinConfig+0x1ec>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d06a      	beq.n	80025bc <__setPinConfig+0x1ec>
		this->_pinConfs.M0Pin.set = 1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		this->_pinConfs.M1Pin.set = 1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

		GPIO_InitTypeDef GPIO_Temp = {0};
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	611a      	str	r2, [r3, #16]

		__HAL_RCC_GPIOH_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	4b30      	ldr	r3, [pc, #192]	@ (80025cc <__setPinConfig+0x1fc>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a2f      	ldr	r2, [pc, #188]	@ (80025cc <__setPinConfig+0x1fc>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b2d      	ldr	r3, [pc, #180]	@ (80025cc <__setPinConfig+0x1fc>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <__setPinConfig+0x1fc>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <__setPinConfig+0x1fc>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b26      	ldr	r3, [pc, #152]	@ (80025cc <__setPinConfig+0x1fc>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <__setPinConfig+0x1fc>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <__setPinConfig+0x1fc>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b1f      	ldr	r3, [pc, #124]	@ (80025cc <__setPinConfig+0x1fc>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <__setPinConfig+0x1fc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <__setPinConfig+0x1fc>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <__setPinConfig+0x1fc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

		HAL_GPIO_WritePin(this->_pinConfs.M0Pin.handle, this->_pinConfs.M0Pin.pin|this->_pinConfs.M1Pin.pin, GPIO_PIN_RESET);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002584:	4313      	orrs	r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	f001 fc0e 	bl	8003dac <HAL_GPIO_WritePin>

		GPIO_Temp.Pin = this->_pinConfs.M0Pin.pin|this->_pinConfs.M1Pin.pin;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800259a:	4313      	orrs	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	623b      	str	r3, [r7, #32]
		GPIO_Temp.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Temp.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_Temp.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		HAL_GPIO_Init(this->_pinConfs.M0Pin.handle, &GPIO_Temp);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	f107 0220 	add.w	r2, r7, #32
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fa5c 	bl	8003a74 <HAL_GPIO_Init>
	}


	return E32_Success;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3758      	adds	r7, #88	@ 0x58
 80025c2:	46bd      	mov	sp, r7
 80025c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025c8:	b002      	add	sp, #8
 80025ca:	4770      	bx	lr
 80025cc:	40023800 	.word	0x40023800

080025d0 <__packageTimerCheck>:
	this->_devConfs.RFOption.TransmissionPower = transpower;

	return E32_Success;
}

Status __packageTimerCheck(E32_433T30D* this){
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() <= this->_paramConfs.packetEndTimeStamp) {
 80025d8:	f001 f8ba 	bl	8003750 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d828      	bhi.n	8002638 <__packageTimerCheck+0x68>
		__debugPrintf(this,
 80025e6:	4917      	ldr	r1, [pc, #92]	@ (8002644 <__packageTimerCheck+0x74>)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff f993 	bl	8001914 <__debugPrintf>
				"Delay duration is not enough to send this data packet !!!/n");
		__debugPrintf(this, "Previous Packet Still Sending../n");
 80025ee:	4916      	ldr	r1, [pc, #88]	@ (8002648 <__packageTimerCheck+0x78>)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff f98f 	bl	8001914 <__debugPrintf>
		__debugPrintf(this,
 80025f6:	4915      	ldr	r1, [pc, #84]	@ (800264c <__packageTimerCheck+0x7c>)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff f98b 	bl	8001914 <__debugPrintf>
				"Try to increase UART or Air Data Rate. Or decrease data packet size./n");
		__debugPrintf(this,
 80025fe:	4914      	ldr	r1, [pc, #80]	@ (8002650 <__packageTimerCheck+0x80>)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff f987 	bl	8001914 <__debugPrintf>
				"Working in this config can cause unwanted delays and can cause a damage on device.../n");
		__debugPrintf(this,
				"Delay Time : %d   Previous Package's Start Time : %d/nPrevious Package's End Time : %d   Previous Package's Duration : %d/n",
				HAL_GetTick() - this->_paramConfs.packetStartTimeStamp,
 8002606:	f001 f8a3 	bl	8003750 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
		__debugPrintf(this,
 8002610:	1ad0      	subs	r0, r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699c      	ldr	r4, [r3, #24]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
				this->_paramConfs.packetStartTimeStamp,
				this->_paramConfs.packetEndTimeStamp,
				this->_paramConfs.packetEndTimeStamp
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	69d1      	ldr	r1, [r2, #28]
						- this->_paramConfs.packetStartTimeStamp);
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6992      	ldr	r2, [r2, #24]
		__debugPrintf(this,
 8002622:	1a8a      	subs	r2, r1, r2
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4623      	mov	r3, r4
 800262a:	4602      	mov	r2, r0
 800262c:	4909      	ldr	r1, [pc, #36]	@ (8002654 <__packageTimerCheck+0x84>)
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff f970 	bl	8001914 <__debugPrintf>
		return E32_NoPackageTime;
 8002634:	2308      	movs	r3, #8
 8002636:	e000      	b.n	800263a <__packageTimerCheck+0x6a>
	}
    return E32_Success;
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	0800b004 	.word	0x0800b004
 8002648:	0800b040 	.word	0x0800b040
 800264c:	0800b064 	.word	0x0800b064
 8002650:	0800b0ac 	.word	0x0800b0ac
 8002654:	0800b104 	.word	0x0800b104

08002658 <__receiveSingleData>:
    this->_devConfs.channel = this->tempConfig->Channel;
    return E32_Success;
}

// Receive Fonksiyonlari tam iyi halinde degil bakilmasi lazim
Status __receiveSingleData(E32_433T30D* this, uint8_t *data){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
    RF_WaitAUX(this);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff f9b7 	bl	80019dc <__waitAUX>
 800266e:	4603      	mov	r3, r0
 8002670:	2b02      	cmp	r3, #2
 8002672:	d101      	bne.n	8002678 <__receiveSingleData+0x20>
 8002674:	2302      	movs	r3, #2
 8002676:	e034      	b.n	80026e2 <__receiveSingleData+0x8a>

    uint32_t t = HAL_GetTick();
 8002678:	f001 f86a 	bl	8003750 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]
    while(!(__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_RXNE))){
 800267e:	e00d      	b.n	800269c <__receiveSingleData+0x44>
        if(HAL_GetTick() - t > 1000){
 8002680:	f001 f866 	bl	8003750 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800268e:	d905      	bls.n	800269c <__receiveSingleData+0x44>
        	__debugPrintf(this, "Veri Okuma Zaman Asimina Ugradi.../n");
 8002690:	4916      	ldr	r1, [pc, #88]	@ (80026ec <__receiveSingleData+0x94>)
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff f93e 	bl	8001914 <__debugPrintf>
            return E32_Timeout;
 8002698:	2302      	movs	r3, #2
 800269a:	e022      	b.n	80026e2 <__receiveSingleData+0x8a>
    while(!(__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_RXNE))){
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d1e9      	bne.n	8002680 <__receiveSingleData+0x28>
        }
    }

    RF_WaitAUX(this);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff f992 	bl	80019dc <__waitAUX>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d101      	bne.n	80026c2 <__receiveSingleData+0x6a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e00f      	b.n	80026e2 <__receiveSingleData+0x8a>

    HAL_UART_Receive(this->SerialPort, data, 1, HAL_MAX_DELAY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	2201      	movs	r2, #1
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	f002 fd4a 	bl	8005166 <HAL_UART_Receive>

    __clearSerialBuffer(this);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff f95f 	bl	8001996 <__clearSerialBuffer>
    __debugPrintf(this, "Veri Alindi.../n");
 80026d8:	4905      	ldr	r1, [pc, #20]	@ (80026f0 <__receiveSingleData+0x98>)
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff f91a 	bl	8001914 <__debugPrintf>
    return E32_Success;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800b180 	.word	0x0800b180
 80026f0:	0800b1a8 	.word	0x0800b1a8

080026f4 <__receiveDataPacket>:

Status __receiveDataPacket(E32_433T30D* this, uint8_t *data, const size_t length){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
    uint32_t t = HAL_GetTick();
 8002700:	f001 f826 	bl	8003750 <HAL_GetTick>
 8002704:	61b8      	str	r0, [r7, #24]

    uint8_t cnt = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	77fb      	strb	r3, [r7, #31]
	while (cnt < length) {
 800270a:	e01e      	b.n	800274a <__receiveDataPacket+0x56>
		if (HAL_GetTick() - t > this->_paramConfs.serialTimeout) {
 800270c:	f001 f820 	bl	8003750 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	429a      	cmp	r2, r3
 800271c:	d901      	bls.n	8002722 <__receiveDataPacket+0x2e>
			return E32_Timeout;
 800271e:	2302      	movs	r3, #2
 8002720:	e03d      	b.n	800279e <__receiveDataPacket+0xaa>
		}

		if (__HAL_UART_GET_FLAG(this->SerialPort, UART_FLAG_RXNE)) {
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d10b      	bne.n	800274a <__receiveDataPacket+0x56>
			HAL_UART_Receive(this->SerialPort, &data[cnt], 1, 30);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	18d1      	adds	r1, r2, r3
 800273c:	231e      	movs	r3, #30
 800273e:	2201      	movs	r2, #1
 8002740:	f002 fd11 	bl	8005166 <HAL_UART_Receive>
			cnt++;
 8002744:	7ffb      	ldrb	r3, [r7, #31]
 8002746:	3301      	adds	r3, #1
 8002748:	77fb      	strb	r3, [r7, #31]
	while (cnt < length) {
 800274a:	7ffb      	ldrb	r3, [r7, #31]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d8dc      	bhi.n	800270c <__receiveDataPacket+0x18>
		}
	}

    RF_WaitAUX(this);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff f93f 	bl	80019dc <__waitAUX>
 800275e:	4603      	mov	r3, r0
 8002760:	2b02      	cmp	r3, #2
 8002762:	d101      	bne.n	8002768 <__receiveDataPacket+0x74>
 8002764:	2302      	movs	r3, #2
 8002766:	e01a      	b.n	800279e <__receiveDataPacket+0xaa>

    uint8_t crc = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	75fb      	strb	r3, [r7, #23]
    crc = __calculateCRC8(this, data, length);
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff f98d 	bl	8001a90 <__calculateCRC8>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]

    if(crc != data[length - 1]){
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3b01      	subs	r3, #1
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	7dfa      	ldrb	r2, [r7, #23]
 8002786:	429a      	cmp	r2, r3
 8002788:	d005      	beq.n	8002796 <__receiveDataPacket+0xa2>
    	__debugPrintf(this, "Paket CRC Uyuşmuyor/n");
 800278a:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <__receiveDataPacket+0xb4>)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff f8c1 	bl	8001914 <__debugPrintf>
        return E32_CrcBroken;
 8002792:	2303      	movs	r3, #3
 8002794:	e003      	b.n	800279e <__receiveDataPacket+0xaa>
    }

    __clearSerialBuffer(this);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff f8fd 	bl	8001996 <__clearSerialBuffer>
    return E32_Success;
 800279c:	2301      	movs	r3, #1
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	0800b1bc 	.word	0x0800b1bc

080027ac <__sendFixedSingleData>:

Status __sendFixedSingleData(E32_433T30D* this, const uint8_t AddressHigh, const uint8_t AddressLow, const uint8_t Channel, const uint8_t* data){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	70fb      	strb	r3, [r7, #3]
 80027be:	460b      	mov	r3, r1
 80027c0:	70bb      	strb	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	707b      	strb	r3, [r7, #1]
	RF_PackageTimerCheck(this);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff02 	bl	80025d0 <__packageTimerCheck>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d101      	bne.n	80027d6 <__sendFixedSingleData+0x2a>
 80027d2:	2308      	movs	r3, #8
 80027d4:	e03e      	b.n	8002854 <__sendFixedSingleData+0xa8>

    uint8_t packet[4];
    packet[0] = AddressHigh;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	723b      	strb	r3, [r7, #8]
    packet[1] = AddressLow;
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	727b      	strb	r3, [r7, #9]
    packet[2] = Channel;
 80027de:	787b      	ldrb	r3, [r7, #1]
 80027e0:	72bb      	strb	r3, [r7, #10]
    packet[3] = *data;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	72fb      	strb	r3, [r7, #11]

    size_t packageTime = __calculatePacketSendTime(this, sizeof(packet));
 80027e8:	2104      	movs	r1, #4
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fd94 	bl	8002318 <__calculatePacketSendTime>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4613      	mov	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    RF_WaitAUX(this);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff f8ec 	bl	80019dc <__waitAUX>
 8002804:	4603      	mov	r3, r0
 8002806:	2b02      	cmp	r3, #2
 8002808:	d101      	bne.n	800280e <__sendFixedSingleData+0x62>
 800280a:	2302      	movs	r3, #2
 800280c:	e022      	b.n	8002854 <__sendFixedSingleData+0xa8>

    this->_paramConfs.packetStartTimeStamp = HAL_GetTick();
 800280e:	f000 ff9f 	bl	8003750 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
    this->_paramConfs.packetEndTimeStamp = this->_paramConfs.packetStartTimeStamp + packageTime;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	441a      	add	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	61da      	str	r2, [r3, #28]
    HAL_UART_Transmit(this->SerialPort, packet, sizeof(packet) / sizeof(packet[0]), 400);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f107 0108 	add.w	r1, r7, #8
 800282c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002830:	2204      	movs	r2, #4
 8002832:	f002 fc0d 	bl	8005050 <HAL_UART_Transmit>

    RF_WaitAUX(this);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff f8cd 	bl	80019dc <__waitAUX>
 8002842:	4603      	mov	r3, r0
 8002844:	2b02      	cmp	r3, #2
 8002846:	d101      	bne.n	800284c <__sendFixedSingleData+0xa0>
 8002848:	2302      	movs	r3, #2
 800284a:	e003      	b.n	8002854 <__sendFixedSingleData+0xa8>

    __clearSerialBuffer(this);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff f8a2 	bl	8001996 <__clearSerialBuffer>

    return E32_Success;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <__sendTransparentSingleData>:

Status __sendTransparentSingleData(E32_433T30D* this, const uint8_t* data){
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	RF_PackageTimerCheck(this);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff feb2 	bl	80025d0 <__packageTimerCheck>
 800286c:	4603      	mov	r3, r0
 800286e:	2b08      	cmp	r3, #8
 8002870:	d101      	bne.n	8002876 <__sendTransparentSingleData+0x1a>
 8002872:	2308      	movs	r3, #8
 8002874:	e033      	b.n	80028de <__sendTransparentSingleData+0x82>

    RF_WaitAUX(this);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff f8ad 	bl	80019dc <__waitAUX>
 8002882:	4603      	mov	r3, r0
 8002884:	2b02      	cmp	r3, #2
 8002886:	d101      	bne.n	800288c <__sendTransparentSingleData+0x30>
 8002888:	2302      	movs	r3, #2
 800288a:	e028      	b.n	80028de <__sendTransparentSingleData+0x82>

    size_t packageTime = __calculatePacketSendTime(this, 1);
 800288c:	2101      	movs	r1, #1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fd42 	bl	8002318 <__calculatePacketSendTime>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

    this->_paramConfs.packetStartTimeStamp = HAL_GetTick();
 800289c:	f000 ff58 	bl	8003750 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
    this->_paramConfs.packetEndTimeStamp = this->_paramConfs.packetStartTimeStamp + packageTime;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	441a      	add	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	61da      	str	r2, [r3, #28]
    HAL_UART_Transmit(this->SerialPort, data, 1, 200);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	23c8      	movs	r3, #200	@ 0xc8
 80028b8:	2201      	movs	r2, #1
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	f002 fbc8 	bl	8005050 <HAL_UART_Transmit>

    RF_WaitAUX(this);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff f888 	bl	80019dc <__waitAUX>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d101      	bne.n	80028d6 <__sendTransparentSingleData+0x7a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e003      	b.n	80028de <__sendTransparentSingleData+0x82>

    __clearSerialBuffer(this);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f85d 	bl	8001996 <__clearSerialBuffer>

    return E32_Success;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <__sendFixedDataPacket>:

Status __sendFixedDataPacket(E32_433T30D* this, const uint8_t AddressHigh, const uint8_t AddressLow, const uint8_t Channel, const uint8_t *data, const size_t size){
 80028e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	70fb      	strb	r3, [r7, #3]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70bb      	strb	r3, [r7, #2]
 80028fe:	4613      	mov	r3, r2
 8002900:	707b      	strb	r3, [r7, #1]
 8002902:	466b      	mov	r3, sp
 8002904:	469a      	mov	sl, r3
	RF_PackageTimerCheck(this);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fe62 	bl	80025d0 <__packageTimerCheck>
 800290c:	4603      	mov	r3, r0
 800290e:	2b08      	cmp	r3, #8
 8002910:	d101      	bne.n	8002916 <__sendFixedDataPacket+0x30>
 8002912:	2308      	movs	r3, #8
 8002914:	e085      	b.n	8002a22 <__sendFixedDataPacket+0x13c>

    if(size > MAX_TX_BUFFER_SIZE_FIXED_CRC){
 8002916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002918:	2b36      	cmp	r3, #54	@ 0x36
 800291a:	d901      	bls.n	8002920 <__sendFixedDataPacket+0x3a>
        return E32_BigPacket;
 800291c:	2306      	movs	r3, #6
 800291e:	e080      	b.n	8002a22 <__sendFixedDataPacket+0x13c>
    }

    uint8_t packetSize = size + 4;
 8002920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3304      	adds	r3, #4
 8002926:	77fb      	strb	r3, [r7, #31]

    uint8_t packet[packetSize];
 8002928:	7ffe      	ldrb	r6, [r7, #31]
 800292a:	4633      	mov	r3, r6
 800292c:	3b01      	subs	r3, #1
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	b2f3      	uxtb	r3, r6
 8002932:	2200      	movs	r2, #0
 8002934:	4698      	mov	r8, r3
 8002936:	4691      	mov	r9, r2
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002944:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002948:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294c:	b2f3      	uxtb	r3, r6
 800294e:	2200      	movs	r2, #0
 8002950:	461c      	mov	r4, r3
 8002952:	4615      	mov	r5, r2
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	00eb      	lsls	r3, r5, #3
 800295e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002962:	00e2      	lsls	r2, r4, #3
 8002964:	4633      	mov	r3, r6
 8002966:	3307      	adds	r3, #7
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	ebad 0d03 	sub.w	sp, sp, r3
 8002970:	466b      	mov	r3, sp
 8002972:	3300      	adds	r3, #0
 8002974:	617b      	str	r3, [r7, #20]

    packet[0] = AddressHigh;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	701a      	strb	r2, [r3, #0]
    packet[1] = AddressLow;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	78ba      	ldrb	r2, [r7, #2]
 8002980:	705a      	strb	r2, [r3, #1]
    packet[2] = Channel;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	787a      	ldrb	r2, [r7, #1]
 8002986:	709a      	strb	r2, [r3, #2]
    memcpy(&packet[3], data, size);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3303      	adds	r3, #3
 800298c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800298e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f005 fdfe 	bl	8008592 <memcpy>

    size_t packageTime = __calculatePacketSendTime(this, sizeof(packet));
 8002996:	4633      	mov	r3, r6
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fcbc 	bl	8002318 <__calculatePacketSendTime>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

    uint8_t crc;
    crc = __calculateCRC8(this, data, size);
 80029a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff f86f 	bl	8001a90 <__calculateCRC8>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
    packet[packetSize - 1] = crc;
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	7bf9      	ldrb	r1, [r7, #15]
 80029be:	54d1      	strb	r1, [r2, r3]

    RF_WaitAUX(this);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff f808 	bl	80019dc <__waitAUX>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d101      	bne.n	80029d6 <__sendFixedDataPacket+0xf0>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e025      	b.n	8002a22 <__sendFixedDataPacket+0x13c>

    this->_paramConfs.packetStartTimeStamp = HAL_GetTick();
 80029d6:	f000 febb 	bl	8003750 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
    this->_paramConfs.packetEndTimeStamp = this->_paramConfs.packetStartTimeStamp + packageTime;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	61da      	str	r2, [r3, #28]
    HAL_UART_Transmit(this->SerialPort, packet, sizeof(packet), 400);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	4632      	mov	r2, r6
 80029f2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	f002 fb2a 	bl	8005050 <HAL_UART_Transmit>

    RF_WaitAUX(this);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe ffea 	bl	80019dc <__waitAUX>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d101      	bne.n	8002a12 <__sendFixedDataPacket+0x12c>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e007      	b.n	8002a22 <__sendFixedDataPacket+0x13c>

    __managedDelay(this, 5);
 8002a12:	2105      	movs	r1, #5
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff f820 	bl	8001a5a <__managedDelay>

    __clearSerialBuffer(this);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe ffbb 	bl	8001996 <__clearSerialBuffer>

    return E32_Success;
 8002a20:	2301      	movs	r3, #1
 8002a22:	46d5      	mov	sp, sl
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a2e <__sendBroadcastDataPacket>:

Status __sendBroadcastDataPacket(E32_433T30D* this, const uint8_t Channel, const uint8_t *data, const size_t size){
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	72fb      	strb	r3, [r7, #11]
	return __sendFixedDataPacket(this, 0x00, 0x00, Channel, data, size);
 8002a3e:	7afa      	ldrb	r2, [r7, #11]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff ff49 	bl	80028e6 <__sendFixedDataPacket>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <__sendTransparentDataPacket>:

Status __sendTransparentDataPacket(E32_433T30D* this, uint8_t *data, const size_t size){
 8002a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	466b      	mov	r3, sp
 8002a6e:	469a      	mov	sl, r3
	RF_PackageTimerCheck(this);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff fdad 	bl	80025d0 <__packageTimerCheck>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d101      	bne.n	8002a80 <__sendTransparentDataPacket+0x22>
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	e07c      	b.n	8002b7a <__sendTransparentDataPacket+0x11c>

    if(size > MAX_TX_BUFFER_SIZE_CRC){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b39      	cmp	r3, #57	@ 0x39
 8002a84:	d901      	bls.n	8002a8a <__sendTransparentDataPacket+0x2c>
        return E32_BigPacket;
 8002a86:	2306      	movs	r3, #6
 8002a88:	e077      	b.n	8002b7a <__sendTransparentDataPacket+0x11c>
    }

    uint8_t packetSize = size + 1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    uint8_t packet[packetSize];
 8002a94:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 8002a98:	4633      	mov	r3, r6
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	b2f3      	uxtb	r3, r6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4698      	mov	r8, r3
 8002aa4:	4691      	mov	r9, r2
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	b2f3      	uxtb	r3, r6
 8002abc:	2200      	movs	r2, #0
 8002abe:	461c      	mov	r4, r3
 8002ac0:	4615      	mov	r5, r2
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	00eb      	lsls	r3, r5, #3
 8002acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad0:	00e2      	lsls	r2, r4, #3
 8002ad2:	4633      	mov	r3, r6
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	ebad 0d03 	sub.w	sp, sp, r3
 8002ade:	466b      	mov	r3, sp
 8002ae0:	3300      	adds	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
    memcpy(packet, data, size);
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	69f8      	ldr	r0, [r7, #28]
 8002aea:	f005 fd52 	bl	8008592 <memcpy>

    uint8_t crc = __calculateCRC8(this, packet, size);
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	69f9      	ldr	r1, [r7, #28]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7fe ffcc 	bl	8001a90 <__calculateCRC8>
 8002af8:	4603      	mov	r3, r0
 8002afa:	76fb      	strb	r3, [r7, #27]
    packet[size] = crc;
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	7efa      	ldrb	r2, [r7, #27]
 8002b04:	701a      	strb	r2, [r3, #0]

    size_t packageTime = __calculatePacketSendTime(this, sizeof(packet));
 8002b06:	4633      	mov	r3, r6
 8002b08:	4619      	mov	r1, r3
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff fc04 	bl	8002318 <__calculatePacketSendTime>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4613      	mov	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

    RF_WaitAUX(this);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7fe ff5c 	bl	80019dc <__waitAUX>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d101      	bne.n	8002b2e <__sendTransparentDataPacket+0xd0>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e025      	b.n	8002b7a <__sendTransparentDataPacket+0x11c>

    this->_paramConfs.packetStartTimeStamp = HAL_GetTick();
 8002b2e:	f000 fe0f 	bl	8003750 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	619a      	str	r2, [r3, #24]
    this->_paramConfs.packetEndTimeStamp = this->_paramConfs.packetStartTimeStamp + packageTime;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	61da      	str	r2, [r3, #28]
    HAL_UART_Transmit(this->SerialPort, packet, sizeof(packet), 400);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	4632      	mov	r2, r6
 8002b4a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002b4e:	69f9      	ldr	r1, [r7, #28]
 8002b50:	f002 fa7e 	bl	8005050 <HAL_UART_Transmit>

    RF_WaitAUX(this);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7fe ff3e 	bl	80019dc <__waitAUX>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d101      	bne.n	8002b6a <__sendTransparentDataPacket+0x10c>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e007      	b.n	8002b7a <__sendTransparentDataPacket+0x11c>

    __managedDelay(this, 5);
 8002b6a:	2105      	movs	r1, #5
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7fe ff74 	bl	8001a5a <__managedDelay>

    __clearSerialBuffer(this);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7fe ff0f 	bl	8001996 <__clearSerialBuffer>

    return E32_Success;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	46d5      	mov	sp, sl
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	@ 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b86 <__setTransmissionMode>:

Status __setTransmissionMode(E32_433T30D* this, const RF_TRANS_MODE Mode){
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
    switch (Mode)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	2b1f      	cmp	r3, #31
 8002b96:	d010      	beq.n	8002bba <__setTransmissionMode+0x34>
 8002b98:	2b1f      	cmp	r3, #31
 8002b9a:	dc13      	bgt.n	8002bc4 <__setTransmissionMode+0x3e>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <__setTransmissionMode+0x20>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d005      	beq.n	8002bb0 <__setTransmissionMode+0x2a>
 8002ba4:	e00e      	b.n	8002bc4 <__setTransmissionMode+0x3e>
    {
    case TRANSPARENTMODE:
        this->_devConfs.RFOption.TransmissionMode = TRANSPARENTMODE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
        break;
 8002bae:	e00f      	b.n	8002bd0 <__setTransmissionMode+0x4a>

    case FIXEDMODE:
        this->_devConfs.RFOption.TransmissionMode = FIXEDMODE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
        break;
 8002bb8:	e00a      	b.n	8002bd0 <__setTransmissionMode+0x4a>

    case BROADCASTMODE:
        this->_devConfs.RFOption.TransmissionMode = FIXEDMODE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
        break;
 8002bc2:	e005      	b.n	8002bd0 <__setTransmissionMode+0x4a>

    default:
        this->_devConfs.RFOption.TransmissionMode = TRANSPARENTMODE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
        return E32_FailureMode;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e000      	b.n	8002bd2 <__setTransmissionMode+0x4c>
    }

    return E32_Success;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <__setAddresses>:

Status __setAddresses(E32_433T30D* this, const uint8_t AddHigh, const uint8_t AddLow){
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
 8002bea:	4613      	mov	r3, r2
 8002bec:	70bb      	strb	r3, [r7, #2]
    }
    if(AddLow > MAX_FREQ_VAL || AddLow < MIN_FREQ_VAL){
        return E32_OutOfLimit;
    }

    this->_devConfs.AddHigh = AddHigh;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    this->_devConfs.AddLow = AddLow;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	78ba      	ldrb	r2, [r7, #2]
 8002bfa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    return E32_Success;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <__setChannel>:

Status __setChannel(E32_433T30D* this, const RF_FREQ channel){
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
    if(channel > FREQ_441 || channel < FREQ_410){
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b1f      	cmp	r3, #31
 8002c1c:	d901      	bls.n	8002c22 <__setChannel+0x16>
        return E32_OutOfLimit;
 8002c1e:	2309      	movs	r3, #9
 8002c20:	e004      	b.n	8002c2c <__setChannel+0x20>
    }

    this->_devConfs.channel = channel;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return E32_Success;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <__setTransmissionPower>:

Status __setTransmissionPower(E32_433T30D* this, const RF_TRANS_POWER power){
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
    if(power > TRANSMISSIONPOWER_21 || power < TRANSMISSIONPOWER_30){
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d901      	bls.n	8002c4e <__setTransmissionPower+0x16>
        return E32_FailureMode;
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e004      	b.n	8002c58 <__setTransmissionPower+0x20>
    }

    this->_devConfs.RFOption.TransmissionPower = power;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    return E32_Success;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <__setIODriver>:

Status __setIODriver(E32_433T30D* this, const RF_IO_MODE driver){
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
    if(driver > IO_OPENDRAIN || driver < IO_PUSHPULL){
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d901      	bls.n	8002c7a <__setIODriver+0x16>
        return E32_FailureMode;
 8002c76:	2304      	movs	r3, #4
 8002c78:	e004      	b.n	8002c84 <__setIODriver+0x20>
    }

    this->_devConfs.RFOption.IODriver = driver;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    return E32_Success;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <__setFECSettings>:

Status __setFECSettings(E32_433T30D* this, const RF_FEC fecmode){
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
    if(fecmode > FEC_ON || fecmode < FEC_OFF){
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d901      	bls.n	8002ca6 <__setFECSettings+0x16>
        return E32_FailureMode;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	e004      	b.n	8002cb0 <__setFECSettings+0x20>
    }

    this->_devConfs.RFOption.FECset = fecmode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    return E32_Success;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <__setWirelesWakeup>:

Status __setWirelesWakeup(E32_433T30D* this, const RF_WIRELESS time){
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
    if(!(time > WIRELESSWAKEUP_2000 || time < WIRELESSWAKEUP_250)){
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d801      	bhi.n	8002cd2 <__setWirelesWakeup+0x16>
        return E32_Success;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e004      	b.n	8002cdc <__setWirelesWakeup+0x20>
    }

    this->_devConfs.RFOption.WirelessWakeUp = time;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    return E32_Success;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <__setUARTParity>:

Status __setUARTParity(E32_433T30D* this, const RF_UART_PARITY paritybyte){
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
    if(paritybyte > UARTPARITY_8E1 || paritybyte < UARTPARITY_8N1){
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <__setUARTParity+0x16>
        return E32_FailureMode;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e004      	b.n	8002d08 <__setUARTParity+0x20>
    }

    this->_devConfs.RFSped.UARTParity = paritybyte;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    return E32_Success;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <__setUARTBaudRate>:

Status __setUARTBaudRate(E32_433T30D* this, const RF_UART_BAUD baudrate){
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
    if(baudrate > UARTBAUDRATE_115200 || baudrate < UARTBAUDRATE_1200){
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b07      	cmp	r3, #7
 8002d24:	d901      	bls.n	8002d2a <__setUARTBaudRate+0x16>
        return E32_FailureMode;
 8002d26:	2304      	movs	r3, #4
 8002d28:	e004      	b.n	8002d34 <__setUARTBaudRate+0x20>
    }

    this->_devConfs.RFSped.UARTBaud = baudrate;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    return E32_Success;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <__setDebuggerUARTParity>:

Status __setDebuggerUARTParity(E32_433T30D* this, const RF_UART_PARITY paritybyte){
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
    if(paritybyte > UARTPARITY_8E1 || paritybyte < UARTPARITY_8N1){
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <__setDebuggerUARTParity+0x16>
        return E32_FailureMode;
 8002d52:	2304      	movs	r3, #4
 8002d54:	e004      	b.n	8002d60 <__setDebuggerUARTParity+0x20>
    }

    this->_debuggerConfs.parity = paritybyte;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    return E32_Success;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <__setDebuggerUARTBaudRate>:

Status __setDebuggerUARTBaudRate(E32_433T30D* this, const RF_UART_BAUD baudrate){
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
    if(baudrate > UARTBAUDRATE_115200 || baudrate < UARTBAUDRATE_1200){
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	d901      	bls.n	8002d82 <__setDebuggerUARTBaudRate+0x16>
        return E32_FailureMode;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e003      	b.n	8002d8a <__setDebuggerUARTBaudRate+0x1e>
    }

    this->_debuggerConfs.baudRate = baudrate;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	621a      	str	r2, [r3, #32]
    return E32_Success;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <__setAirDataRate>:

Status __setAirDataRate(E32_433T30D* this, const RF_AIR_DATA airdatarate){
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70fb      	strb	r3, [r7, #3]
    if(airdatarate > AIRDATARATE_192k || airdatarate < AIRDATARATE_03k){
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d901      	bls.n	8002dac <__setAirDataRate+0x16>
        return E32_FailureMode;
 8002da8:	2304      	movs	r3, #4
 8002daa:	e004      	b.n	8002db6 <__setAirDataRate+0x20>
    }

    this->_devConfs.RFSped.AirDataRate = airdatarate;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    return E32_Success;
 8002db4:	2301      	movs	r3, #1
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <__setAuxTimeoutTime>:

Status __setAuxTimeoutTime(E32_433T30D* this, const size_t time){
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
    if(time < 30){
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b1d      	cmp	r3, #29
 8002dd0:	d804      	bhi.n	8002ddc <__setAuxTimeoutTime+0x1a>
    	this->_paramConfs.auxTimeout = 30;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	221e      	movs	r2, #30
 8002dd6:	60da      	str	r2, [r3, #12]
        return E32_FailureMode;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e003      	b.n	8002de4 <__setAuxTimeoutTime+0x22>
    }

    this->_paramConfs.auxTimeout = time;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	60da      	str	r2, [r3, #12]
    return E32_Success;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <__setNoAuxTimeoutTime>:

Status __setNoAuxTimeoutTime(E32_433T30D* this, const size_t time){
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    if(time < 30){
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b1d      	cmp	r3, #29
 8002dfe:	d804      	bhi.n	8002e0a <__setNoAuxTimeoutTime+0x1a>
    	this->_paramConfs.noAuxTimeOut = 30;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	221e      	movs	r2, #30
 8002e04:	611a      	str	r2, [r3, #16]
        return E32_FailureMode;
 8002e06:	2304      	movs	r3, #4
 8002e08:	e003      	b.n	8002e12 <__setNoAuxTimeoutTime+0x22>
    }

    this->_paramConfs.noAuxTimeOut = time;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	611a      	str	r2, [r3, #16]
    return E32_Success;
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <__viewSettings>:

void __viewSettings(E32_433T30D* this){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	__debugPrintf(this, "------------------------------------------------------/n");
 8002e28:	493c      	ldr	r1, [pc, #240]	@ (8002f1c <__viewSettings+0xfc>)
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fd72 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "Yuksek Adres: %d/n", this->_devConfs.AddHigh);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e36:	461a      	mov	r2, r3
 8002e38:	4939      	ldr	r1, [pc, #228]	@ (8002f20 <__viewSettings+0x100>)
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fd6a 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "Dusuk Adres: %d/n", this->_devConfs.AddLow);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002e46:	461a      	mov	r2, r3
 8002e48:	4936      	ldr	r1, [pc, #216]	@ (8002f24 <__viewSettings+0x104>)
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fd62 	bl	8001914 <__debugPrintf>

	__debugPrintf(this, "Kanal: %d - %d MHz/n/n", this->_devConfs.channel, this->_devConfs.channel + 410);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e5e:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 8002e62:	4931      	ldr	r1, [pc, #196]	@ (8002f28 <__viewSettings+0x108>)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fd55 	bl	8001914 <__debugPrintf>

	__debugPrintf(this, "Sped Ayarlari/n");
 8002e6a:	4930      	ldr	r1, [pc, #192]	@ (8002f2c <__viewSettings+0x10c>)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe fd51 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  UART Baud Rate: %s/n", __getUARTBaudRate(this));
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff f976 	bl	8002164 <__getUARTBaudRate>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	492c      	ldr	r1, [pc, #176]	@ (8002f30 <__viewSettings+0x110>)
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fd48 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  UART Parity: %s/n", __getUARTParity(this));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff f947 	bl	8002118 <__getUARTParity>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4929      	ldr	r1, [pc, #164]	@ (8002f34 <__viewSettings+0x114>)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fd3f 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  Air Data Rate: %s/n/n", __getAirData(this));
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f904 	bl	80020a4 <__getAirData>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4925      	ldr	r1, [pc, #148]	@ (8002f38 <__viewSettings+0x118>)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fd36 	bl	8001914 <__debugPrintf>

	__debugPrintf(this, "Option Ayarlari/n");
 8002ea8:	4924      	ldr	r1, [pc, #144]	@ (8002f3c <__viewSettings+0x11c>)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fd32 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  Transfer Turu: %s/n", __getTransmissionType(this));
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff f8db 	bl	800206c <__getTransmissionType>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4921      	ldr	r1, [pc, #132]	@ (8002f40 <__viewSettings+0x120>)
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe fd29 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  IO Turu: %s/n", __getIOMode(this));
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff f8b6 	bl	8002034 <__getIOMode>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	491d      	ldr	r1, [pc, #116]	@ (8002f44 <__viewSettings+0x124>)
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe fd20 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  Wireless Uyanma Suresi: %s/n", __getWirelessWakeup(this));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff f867 	bl	8001fa8 <__getWirelessWakeup>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	491a      	ldr	r1, [pc, #104]	@ (8002f48 <__viewSettings+0x128>)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe fd17 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  FEC Filtresi: %s/n", __getFECFilter(this));
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f842 	bl	8001f70 <__getFECFilter>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4916      	ldr	r1, [pc, #88]	@ (8002f4c <__viewSettings+0x12c>)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fd0e 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "  Aktarim Gucu: %s/n", __getTranmissionPower(this));
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff f80d 	bl	8001f18 <__getTranmissionPower>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	4913      	ldr	r1, [pc, #76]	@ (8002f50 <__viewSettings+0x130>)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe fd05 	bl	8001914 <__debugPrintf>
	__debugPrintf(this, "------------------------------------------------------/n");
 8002f0a:	4904      	ldr	r1, [pc, #16]	@ (8002f1c <__viewSettings+0xfc>)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe fd01 	bl	8001914 <__debugPrintf>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0800b1d4 	.word	0x0800b1d4
 8002f20:	0800b210 	.word	0x0800b210
 8002f24:	0800b224 	.word	0x0800b224
 8002f28:	0800b238 	.word	0x0800b238
 8002f2c:	0800b250 	.word	0x0800b250
 8002f30:	0800b260 	.word	0x0800b260
 8002f34:	0800b278 	.word	0x0800b278
 8002f38:	0800b28c 	.word	0x0800b28c
 8002f3c:	0800b2a4 	.word	0x0800b2a4
 8002f40:	0800b2b8 	.word	0x0800b2b8
 8002f44:	0800b2d0 	.word	0x0800b2d0
 8002f48:	0800b2e0 	.word	0x0800b2e0
 8002f4c:	0800b300 	.word	0x0800b300
 8002f50:	0800b318 	.word	0x0800b318

08002f54 <__setFunctionPointers>:

void __setFunctionPointers(E32_433T30D* this){
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	this->calculateCRC8 = __calculateCRC8;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003008 <__setFunctionPointers+0xb4>)
 8002f60:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->receiveSingleData = __receiveSingleData;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a29      	ldr	r2, [pc, #164]	@ (800300c <__setFunctionPointers+0xb8>)
 8002f66:	651a      	str	r2, [r3, #80]	@ 0x50
	this->receiveDataPacket = __receiveDataPacket;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a29      	ldr	r2, [pc, #164]	@ (8003010 <__setFunctionPointers+0xbc>)
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
	this->sendFixedSingleData = __sendFixedSingleData;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a28      	ldr	r2, [pc, #160]	@ (8003014 <__setFunctionPointers+0xc0>)
 8002f72:	659a      	str	r2, [r3, #88]	@ 0x58
	this->sendTransparentSingleData = __sendTransparentSingleData;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <__setFunctionPointers+0xc4>)
 8002f78:	65da      	str	r2, [r3, #92]	@ 0x5c
	this->sendFixedDataPacket = __sendFixedDataPacket;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	@ (800301c <__setFunctionPointers+0xc8>)
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
	this->sendBroadcastDataPacket = __sendBroadcastDataPacket;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a27      	ldr	r2, [pc, #156]	@ (8003020 <__setFunctionPointers+0xcc>)
 8002f84:	665a      	str	r2, [r3, #100]	@ 0x64
	this->sendTransparentDataPacket = __sendTransparentDataPacket;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a26      	ldr	r2, [pc, #152]	@ (8003024 <__setFunctionPointers+0xd0>)
 8002f8a:	669a      	str	r2, [r3, #104]	@ 0x68
	this->setTransmissionMode = __setTransmissionMode;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <__setFunctionPointers+0xd4>)
 8002f90:	66da      	str	r2, [r3, #108]	@ 0x6c
	this->setAddresses = __setAddresses;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a25      	ldr	r2, [pc, #148]	@ (800302c <__setFunctionPointers+0xd8>)
 8002f96:	671a      	str	r2, [r3, #112]	@ 0x70
	this->setChannel = __setChannel;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a25      	ldr	r2, [pc, #148]	@ (8003030 <__setFunctionPointers+0xdc>)
 8002f9c:	675a      	str	r2, [r3, #116]	@ 0x74
	this->setTransmissionPower = __setTransmissionPower;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <__setFunctionPointers+0xe0>)
 8002fa2:	679a      	str	r2, [r3, #120]	@ 0x78
	this->setIODriver = __setIODriver;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a24      	ldr	r2, [pc, #144]	@ (8003038 <__setFunctionPointers+0xe4>)
 8002fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
	this->setFECSettings = __setFECSettings;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <__setFunctionPointers+0xe8>)
 8002fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	this->setWirelesWakeup = __setWirelesWakeup;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <__setFunctionPointers+0xec>)
 8002fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	this->setUARTParity = __setUARTParity;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <__setFunctionPointers+0xf0>)
 8002fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	this->setUARTBaudRate = __setUARTBaudRate;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	@ (8003048 <__setFunctionPointers+0xf4>)
 8002fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	this->setDebuggerUARTParity = __setDebuggerUARTParity;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800304c <__setFunctionPointers+0xf8>)
 8002fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	this->setDebuggerUARTBaudRate = __setDebuggerUARTBaudRate;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003050 <__setFunctionPointers+0xfc>)
 8002fd6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	this->setAirDataRate = __setAirDataRate;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <__setFunctionPointers+0x100>)
 8002fde:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	this->setAuxTimeoutTime = __setAuxTimeoutTime;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <__setFunctionPointers+0x104>)
 8002fe6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	this->setNoAuxTimeoutTime = __setNoAuxTimeoutTime;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <__setFunctionPointers+0x108>)
 8002fee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	this->viewSettings = __viewSettings;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8003060 <__setFunctionPointers+0x10c>)
 8002ff6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	08001a91 	.word	0x08001a91
 800300c:	08002659 	.word	0x08002659
 8003010:	080026f5 	.word	0x080026f5
 8003014:	080027ad 	.word	0x080027ad
 8003018:	0800285d 	.word	0x0800285d
 800301c:	080028e7 	.word	0x080028e7
 8003020:	08002a2f 	.word	0x08002a2f
 8003024:	08002a5f 	.word	0x08002a5f
 8003028:	08002b87 	.word	0x08002b87
 800302c:	08002bdf 	.word	0x08002bdf
 8003030:	08002c0d 	.word	0x08002c0d
 8003034:	08002c39 	.word	0x08002c39
 8003038:	08002c65 	.word	0x08002c65
 800303c:	08002c91 	.word	0x08002c91
 8003040:	08002cbd 	.word	0x08002cbd
 8003044:	08002ce9 	.word	0x08002ce9
 8003048:	08002d15 	.word	0x08002d15
 800304c:	08002d41 	.word	0x08002d41
 8003050:	08002d6d 	.word	0x08002d6d
 8003054:	08002d97 	.word	0x08002d97
 8003058:	08002dc3 	.word	0x08002dc3
 800305c:	08002df1 	.word	0x08002df1
 8003060:	08002e21 	.word	0x08002e21

08003064 <__setInitialValues>:

void __setInitialValues(E32_433T30D *this){
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	this->SerialPort = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
	this->DebugPort = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
	this->_paramConfs.auxTimeout = 1000;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800307e:	60da      	str	r2, [r3, #12]
	this->_paramConfs.noAuxTimeOut = 30;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	221e      	movs	r2, #30
 8003084:	611a      	str	r2, [r3, #16]
	this->_paramConfs.serialTimeout = 1000;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800308c:	615a      	str	r2, [r3, #20]
	this->_paramConfs.packetStartTimeStamp = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
	this->_paramConfs.packetEndTimeStamp = 0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
	this->_debuggerConfs.baudRate = 9600;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80030a0:	621a      	str	r2, [r3, #32]
	this->_debuggerConfs.parity = DEBUGGER_UART_PARITY_8N1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	849a      	strh	r2, [r3, #36]	@ 0x24
	this->_devConfs.RFSped.UARTParity = UARTPARITY_8N1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	this->_devConfs.RFSped.UARTBaud = UARTBAUDRATE_9600;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	this->_devConfs.RFSped.AirDataRate = AIRDATARATE_24k;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	this->_devConfs.RFOption.TransmissionMode = TRANSPARENTMODE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	this->_devConfs.RFOption.IODriver = IO_PUSHPULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	this->_devConfs.RFOption.WirelessWakeUp = WIRELESSWAKEUP_250;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	this->_devConfs.RFOption.FECset = FEC_ON;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	this->_devConfs.RFOption.TransmissionPower = TRANSMISSIONPOWER_30;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	this->_devConfs.AddHigh = 0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	this->_devConfs.AddLow = 0;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	this->_devConfs.channel = FREQ_433;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2217      	movs	r2, #23
 80030fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	this->tempConfig = NULL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <__setRFUARTPort>:

void __setRFUARTPort(E32_433T30D *this){
 8003112:	b5b0      	push	{r4, r5, r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	__changeRFUARTBaudRate(this->SerialPort, __UARTRateEnum2Value(this->_devConfs.RFSped.UARTBaud), __UARTParityEnum2Value(this->_devConfs.RFSped.UARTParity));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff f89d 	bl	8002264 <__UARTRateEnum2Value>
 800312a:	4605      	mov	r5, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f8d2 	bl	80022dc <__UARTParityEnum2Value>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	4629      	mov	r1, r5
 800313e:	4620      	mov	r0, r4
 8003140:	f7fe fcea 	bl	8001b18 <__changeRFUARTBaudRate>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bdb0      	pop	{r4, r5, r7, pc}

0800314c <__setDebuggerUARTPort>:

void __setDebuggerUARTPort(E32_433T30D* this) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	__changeRFUARTBaudRate(this->DebugPort, this->_debuggerConfs.baudRate, this->_debuggerConfs.parity);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6858      	ldr	r0, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a19      	ldr	r1, [r3, #32]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003160:	461a      	mov	r2, r3
 8003162:	f7fe fcd9 	bl	8001b18 <__changeRFUARTBaudRate>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <RFInit_Debugger>:
	__setPinConfig(handler, pinData.M0Pin, pinData.M1Pin, pinData.AUXPin);
	handler->SerialPort = RFPort;
	return E32_Success;
}

Status RFInit_Debugger(E32_433T30D* handler, UART_HandleTypeDef *RFPort, UART_HandleTypeDef *debuggerPort, RF_GPIOPins pinData){
 800316e:	b082      	sub	sp, #8
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af04      	add	r7, sp, #16
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	61fb      	str	r3, [r7, #28]
	__setInitialValues(handler);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ff70 	bl	8003064 <__setInitialValues>
	__setFunctionPointers(handler);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fee5 	bl	8002f54 <__setFunctionPointers>
	__setPinConfig(handler, pinData.M0Pin, pinData.M1Pin, pinData.AUXPin);
 800318a:	aa01      	add	r2, sp, #4
 800318c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003190:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003194:	e882 0003 	stmia.w	r2, {r0, r1}
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	f107 021c 	add.w	r2, r7, #28
 80031a2:	ca06      	ldmia	r2, {r1, r2}
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff f913 	bl	80023d0 <__setPinConfig>
	handler->SerialPort = RFPort;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	601a      	str	r2, [r3, #0]
	handler->DebugPort = debuggerPort;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	605a      	str	r2, [r3, #4]
	return E32_Success;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031c2:	b002      	add	sp, #8
 80031c4:	4770      	bx	lr

080031c6 <RFStart>:
		handler->tempConfig = NULL;
	}
	return E32_Success;
}

Status RFStart(E32_433T30D *handler){
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
	__setRFUARTPort(handler);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ff9f 	bl	8003112 <__setRFUARTPort>
	if (handler->DebugPort != NULL){
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <RFStart+0x1c>
		__setDebuggerUARTPort(handler);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ffb5 	bl	800314c <__setDebuggerUARTPort>
	}

	__managedDelay(handler, 50);
 80031e2:	2132      	movs	r1, #50	@ 0x32
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fc38 	bl	8001a5a <__managedDelay>

	__setSettings(handler);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe fcae 	bl	8001b4c <__setSettings>

	__managedDelay(handler, 100);
 80031f0:	2164      	movs	r1, #100	@ 0x64
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fc31 	bl	8001a5a <__managedDelay>

	__getSettings(handler);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe fd75 	bl	8001ce8 <__getSettings>

	return E32_Success;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <HAL_MspInit+0x4c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_MspInit+0x4c>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800321c:	6453      	str	r3, [r2, #68]	@ 0x44
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_MspInit+0x4c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a28      	ldr	r2, [pc, #160]	@ (8003318 <HAL_SPI_MspInit+0xc0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d14a      	bne.n	8003310 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a26      	ldr	r2, [pc, #152]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_SPI_MspInit+0xc4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032ce:	230c      	movs	r3, #12
 80032d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032da:	2303      	movs	r3, #3
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032de:	2305      	movs	r3, #5
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	480d      	ldr	r0, [pc, #52]	@ (8003320 <HAL_SPI_MspInit+0xc8>)
 80032ea:	f000 fbc3 	bl	8003a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003300:	2305      	movs	r3, #5
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4619      	mov	r1, r3
 800330a:	4806      	ldr	r0, [pc, #24]	@ (8003324 <HAL_SPI_MspInit+0xcc>)
 800330c:	f000 fbb2 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003310:	bf00      	nop
 8003312:	3728      	adds	r7, #40	@ 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40003800 	.word	0x40003800
 800331c:	40023800 	.word	0x40023800
 8003320:	40020800 	.word	0x40020800
 8003324:	40020400 	.word	0x40020400

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	@ 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a32      	ldr	r2, [pc, #200]	@ (8003410 <HAL_UART_MspInit+0xe8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12d      	bne.n	80033a6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <HAL_UART_MspInit+0xec>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	4a30      	ldr	r2, [pc, #192]	@ (8003414 <HAL_UART_MspInit+0xec>)
 8003354:	f043 0310 	orr.w	r3, r3, #16
 8003358:	6453      	str	r3, [r2, #68]	@ 0x44
 800335a:	4b2e      	ldr	r3, [pc, #184]	@ (8003414 <HAL_UART_MspInit+0xec>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <HAL_UART_MspInit+0xec>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <HAL_UART_MspInit+0xec>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6313      	str	r3, [r2, #48]	@ 0x30
 8003376:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <HAL_UART_MspInit+0xec>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RF_TX_Pin|RF_RX_Pin;
 8003382:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003394:	2307      	movs	r3, #7
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	481e      	ldr	r0, [pc, #120]	@ (8003418 <HAL_UART_MspInit+0xf0>)
 80033a0:	f000 fb68 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033a4:	e030      	b.n	8003408 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <HAL_UART_MspInit+0xf4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d12b      	bne.n	8003408 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033be:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6313      	str	r3, [r2, #48]	@ 0x30
 80033dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <HAL_UART_MspInit+0xec>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033e8:	230c      	movs	r3, #12
 80033ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	2303      	movs	r3, #3
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033f8:	2307      	movs	r3, #7
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	4619      	mov	r1, r3
 8003402:	4805      	ldr	r0, [pc, #20]	@ (8003418 <HAL_UART_MspInit+0xf0>)
 8003404:	f000 fb36 	bl	8003a74 <HAL_GPIO_Init>
}
 8003408:	bf00      	nop
 800340a:	3730      	adds	r7, #48	@ 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40011000 	.word	0x40011000
 8003414:	40023800 	.word	0x40023800
 8003418:	40020000 	.word	0x40020000
 800341c:	40004400 	.word	0x40004400

08003420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <NMI_Handler+0x4>

08003428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <HardFault_Handler+0x4>

08003430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <MemManage_Handler+0x4>

08003438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <BusFault_Handler+0x4>

08003440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <UsageFault_Handler+0x4>

08003448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003476:	f000 f957 	bl	8003728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}

0800347e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  return 1;
 8003482:	2301      	movs	r3, #1
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_kill>:

int _kill(int pid, int sig)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003498:	f005 f84e 	bl	8008538 <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	2216      	movs	r2, #22
 80034a0:	601a      	str	r2, [r3, #0]
  return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_exit>:

void _exit (int status)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034b6:	f04f 31ff 	mov.w	r1, #4294967295
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffe7 	bl	800348e <_kill>
  while (1) {}    /* Make sure we hang here */
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <_exit+0x12>

080034c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e00a      	b.n	80034ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034d6:	f3af 8000 	nop.w
 80034da:	4601      	mov	r1, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	b2ca      	uxtb	r2, r1
 80034e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3301      	adds	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	dbf0      	blt.n	80034d6 <_read+0x12>
  }

  return len;
 80034f4:	687b      	ldr	r3, [r7, #4]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e009      	b.n	8003524 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	60ba      	str	r2, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	dbf1      	blt.n	8003510 <_write+0x12>
  }
  return len;
 800352c:	687b      	ldr	r3, [r7, #4]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_close>:

int _close(int file)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800355e:	605a      	str	r2, [r3, #4]
  return 0;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <_isatty>:

int _isatty(int file)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003576:	2301      	movs	r3, #1
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a8:	4a14      	ldr	r2, [pc, #80]	@ (80035fc <_sbrk+0x5c>)
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <_sbrk+0x60>)
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b4:	4b13      	ldr	r3, [pc, #76]	@ (8003604 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <_sbrk+0x64>)
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <_sbrk+0x68>)
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c2:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <_sbrk+0x64>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d207      	bcs.n	80035e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d0:	f004 ffb2 	bl	8008538 <__errno>
 80035d4:	4603      	mov	r3, r0
 80035d6:	220c      	movs	r2, #12
 80035d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	e009      	b.n	80035f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e6:	4b07      	ldr	r3, [pc, #28]	@ (8003604 <_sbrk+0x64>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <_sbrk+0x64>)
 80035f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20020000 	.word	0x20020000
 8003600:	00000400 	.word	0x00000400
 8003604:	200003d0 	.word	0x200003d0
 8003608:	20000548 	.word	0x20000548

0800360c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <SystemInit+0x20>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	4a05      	ldr	r2, [pc, #20]	@ (800362c <SystemInit+0x20>)
 8003618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800361c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003634:	f7ff ffea 	bl	800360c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003638:	480c      	ldr	r0, [pc, #48]	@ (800366c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800363a:	490d      	ldr	r1, [pc, #52]	@ (8003670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800363c:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003650:	4c0a      	ldr	r4, [pc, #40]	@ (800367c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800365e:	f004 ff71 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003662:	f7fd fecb 	bl	80013fc <main>
  bx  lr    
 8003666:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003670:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003674:	0800b798 	.word	0x0800b798
  ldr r2, =_sbss
 8003678:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800367c:	20000544 	.word	0x20000544

08003680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003680:	e7fe      	b.n	8003680 <ADC_IRQHandler>
	...

08003684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003688:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <HAL_Init+0x40>)
 800368e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <HAL_Init+0x40>)
 800369a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800369e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a0:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <HAL_Init+0x40>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <HAL_Init+0x40>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ac:	2003      	movs	r0, #3
 80036ae:	f000 f931 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b2:	200f      	movs	r0, #15
 80036b4:	f000 f808 	bl	80036c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b8:	f7ff fda6 	bl	8003208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00

080036c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_InitTick+0x54>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <HAL_InitTick+0x58>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036de:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f93b 	bl	8003962 <HAL_SYSTICK_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00e      	b.n	8003714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d80a      	bhi.n	8003712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	f000 f911 	bl	800392a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003708:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <HAL_InitTick+0x5c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000000 	.word	0x20000000
 8003720:	20000008 	.word	0x20000008
 8003724:	20000004 	.word	0x20000004

08003728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_IncTick+0x20>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_IncTick+0x24>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4413      	add	r3, r2
 8003738:	4a04      	ldr	r2, [pc, #16]	@ (800374c <HAL_IncTick+0x24>)
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000008 	.word	0x20000008
 800374c:	200003d4 	.word	0x200003d4

08003750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_GetTick+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	200003d4 	.word	0x200003d4

08003768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff ffee 	bl	8003750 <HAL_GetTick>
 8003774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d005      	beq.n	800378e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_Delay+0x44>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800378e:	bf00      	nop
 8003790:	f7ff ffde 	bl	8003750 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	429a      	cmp	r2, r3
 800379e:	d8f7      	bhi.n	8003790 <HAL_Delay+0x28>
  {
  }
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000008 	.word	0x20000008

080037b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037cc:	4013      	ands	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e2:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	60d3      	str	r3, [r2, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__NVIC_GetPriorityGrouping+0x18>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	f003 0307 	and.w	r3, r3, #7
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	@ (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e0:	d301      	bcc.n	80038e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <SysTick_Config+0x40>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ee:	210f      	movs	r1, #15
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f7ff ff8e 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <SysTick_Config+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <SysTick_Config+0x40>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010

08003914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff47 	bl	80037b0 <__NVIC_SetPriorityGrouping>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393c:	f7ff ff5c 	bl	80037f8 <__NVIC_GetPriorityGrouping>
 8003940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff8e 	bl	8003868 <NVIC_EncodePriority>
 800394c:	4602      	mov	r2, r0
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff5d 	bl	8003814 <__NVIC_SetPriority>
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffb0 	bl	80038d0 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003988:	f7ff fee2 	bl	8003750 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d008      	beq.n	80039ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e052      	b.n	8003a52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0216 	bic.w	r2, r2, #22
 80039ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <HAL_DMA_Abort+0x62>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0208 	bic.w	r2, r2, #8
 80039ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fc:	e013      	b.n	8003a26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039fe:	f7ff fea7 	bl	8003750 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d90c      	bls.n	8003a26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e015      	b.n	8003a52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e4      	bne.n	80039fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a38:	223f      	movs	r2, #63	@ 0x3f
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	@ 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e159      	b.n	8003d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a90:	2201      	movs	r2, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	f040 8148 	bne.w	8003d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d005      	beq.n	8003ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d130      	bne.n	8003b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0201 	and.w	r2, r3, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d017      	beq.n	8003b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d123      	bne.n	8003bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3208      	adds	r2, #8
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a2 	beq.w	8003d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	4a56      	ldr	r2, [pc, #344]	@ (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0a:	4b54      	ldr	r3, [pc, #336]	@ (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c16:	4a52      	ldr	r2, [pc, #328]	@ (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a49      	ldr	r2, [pc, #292]	@ (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x202>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a48      	ldr	r2, [pc, #288]	@ (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x1fe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a47      	ldr	r2, [pc, #284]	@ (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x1fa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a46      	ldr	r2, [pc, #280]	@ (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x1f6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a45      	ldr	r2, [pc, #276]	@ (8003d74 <HAL_GPIO_Init+0x300>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x1f2>
 8003c62:	2304      	movs	r3, #4
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c88:	4935      	ldr	r1, [pc, #212]	@ (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b38      	ldr	r3, [pc, #224]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a2f      	ldr	r2, [pc, #188]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d14:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d38:	4a0f      	ldr	r2, [pc, #60]	@ (8003d78 <HAL_GPIO_Init+0x304>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f aea2 	bls.w	8003a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3724      	adds	r7, #36	@ 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e267      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dfe:	4b88      	ldr	r3, [pc, #544]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b85      	ldr	r3, [pc, #532]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b82      	ldr	r3, [pc, #520]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b7e      	ldr	r3, [pc, #504]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e242      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b70      	ldr	r3, [pc, #448]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6f      	ldr	r2, [pc, #444]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b69      	ldr	r3, [pc, #420]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b66      	ldr	r3, [pc, #408]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a65      	ldr	r2, [pc, #404]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7ff fc5a 	bl	8003750 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff fc56 	bl	8003750 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e207      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7ff fc46 	bl	8003750 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff fc42 	bl	8003750 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f3      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b51      	ldr	r3, [pc, #324]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b44      	ldr	r3, [pc, #272]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b41      	ldr	r3, [pc, #260]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c7      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4937      	ldr	r1, [pc, #220]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7ff fbfb 	bl	8003750 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7ff fbf7 	bl	8003750 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a8      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4925      	ldr	r1, [pc, #148]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b24      	ldr	r3, [pc, #144]	@ (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7ff fbda 	bl	8003750 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7ff fbd6 	bl	8003750 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e187      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d036      	beq.n	8004038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b15      	ldr	r3, [pc, #84]	@ (8004028 <HAL_RCC_OscConfig+0x248>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7ff fbba 	bl	8003750 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7ff fbb6 	bl	8003750 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e167      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <HAL_RCC_OscConfig+0x248>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7ff fba3 	bl	8003750 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e00e      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400e:	f7ff fb9f 	bl	8003750 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d907      	bls.n	800402c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e150      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	42470000 	.word	0x42470000
 8004028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b88      	ldr	r3, [pc, #544]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ea      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8097 	beq.w	8004174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b81      	ldr	r3, [pc, #516]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b7d      	ldr	r3, [pc, #500]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	4a7c      	ldr	r2, [pc, #496]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	@ 0x40
 8004066:	4b7a      	ldr	r3, [pc, #488]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b77      	ldr	r3, [pc, #476]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b74      	ldr	r3, [pc, #464]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7ff fb5f 	bl	8003750 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7ff fb5b 	bl	8003750 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e10c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ea>
 80040bc:	4b64      	ldr	r3, [pc, #400]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	4a63      	ldr	r2, [pc, #396]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c8:	e01c      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x30c>
 80040d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040de:	4b5c      	ldr	r3, [pc, #368]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ec:	4b58      	ldr	r3, [pc, #352]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	4a57      	ldr	r2, [pc, #348]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f8:	4b55      	ldr	r3, [pc, #340]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a54      	ldr	r2, [pc, #336]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7ff fb20 	bl	8003750 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7ff fb1c 	bl	8003750 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0cb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	4b49      	ldr	r3, [pc, #292]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ee      	beq.n	8004114 <HAL_RCC_OscConfig+0x334>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7ff fb0a 	bl	8003750 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7ff fb06 	bl	8003750 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0b5      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004156:	4b3e      	ldr	r3, [pc, #248]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ee      	bne.n	8004140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	4a38      	ldr	r2, [pc, #224]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a1 	beq.w	80042c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417e:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d05c      	beq.n	8004244 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d141      	bne.n	8004216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b31      	ldr	r3, [pc, #196]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7ff fada 	bl	8003750 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7ff fad6 	bl	8003750 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e087      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	491b      	ldr	r1, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7ff faaf 	bl	8003750 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7ff faab 	bl	8003750 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x416>
 8004214:	e054      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff fa98 	bl	8003750 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7ff fa94 	bl	8003750 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e045      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x444>
 8004242:	e03d      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e038      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d028      	beq.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d121      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d11a      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7ff f9c6 	bl	8003750 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7ff f9c2 	bl	8003750 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff f926 	bl	80036c8 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	0800b340 	.word	0x0800b340
 8004494:	20000000 	.word	0x20000000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b094      	sub	sp, #80	@ 0x50
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b79      	ldr	r3, [pc, #484]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80e1 	bhi.w	8004688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e0db      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b73      	ldr	r3, [pc, #460]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d4:	e0db      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b72      	ldr	r3, [pc, #456]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044da:	e0d8      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b6f      	ldr	r3, [pc, #444]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b6d      	ldr	r3, [pc, #436]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
 800450a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800450e:	4622      	mov	r2, r4
 8004510:	462b      	mov	r3, r5
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	0159      	lsls	r1, r3, #5
 800451c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004520:	0150      	lsls	r0, r2, #5
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4621      	mov	r1, r4
 8004528:	1a51      	subs	r1, r2, r1
 800452a:	6139      	str	r1, [r7, #16]
 800452c:	4629      	mov	r1, r5
 800452e:	eb63 0301 	sbc.w	r3, r3, r1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004540:	4659      	mov	r1, fp
 8004542:	018b      	lsls	r3, r1, #6
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800454a:	4651      	mov	r1, sl
 800454c:	018a      	lsls	r2, r1, #6
 800454e:	4651      	mov	r1, sl
 8004550:	ebb2 0801 	subs.w	r8, r2, r1
 8004554:	4659      	mov	r1, fp
 8004556:	eb63 0901 	sbc.w	r9, r3, r1
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456e:	4690      	mov	r8, r2
 8004570:	4699      	mov	r9, r3
 8004572:	4623      	mov	r3, r4
 8004574:	eb18 0303 	adds.w	r3, r8, r3
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	462b      	mov	r3, r5
 800457c:	eb49 0303 	adc.w	r3, r9, r3
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800458e:	4629      	mov	r1, r5
 8004590:	028b      	lsls	r3, r1, #10
 8004592:	4621      	mov	r1, r4
 8004594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004598:	4621      	mov	r1, r4
 800459a:	028a      	lsls	r2, r1, #10
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ac:	f7fc fc82 	bl	8000eb4 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b8:	e058      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ba:	4b38      	ldr	r3, [pc, #224]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	2200      	movs	r2, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	4611      	mov	r1, r2
 80045c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0159      	lsls	r1, r3, #5
 80045e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e6:	0150      	lsls	r0, r2, #5
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4641      	mov	r1, r8
 80045ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800460c:	ebb2 040a 	subs.w	r4, r2, sl
 8004610:	eb63 050b 	sbc.w	r5, r3, fp
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	00eb      	lsls	r3, r5, #3
 800461e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004622:	00e2      	lsls	r2, r4, #3
 8004624:	4614      	mov	r4, r2
 8004626:	461d      	mov	r5, r3
 8004628:	4643      	mov	r3, r8
 800462a:	18e3      	adds	r3, r4, r3
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	464b      	mov	r3, r9
 8004630:	eb45 0303 	adc.w	r3, r5, r3
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004642:	4629      	mov	r1, r5
 8004644:	028b      	lsls	r3, r1, #10
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800464c:	4621      	mov	r1, r4
 800464e:	028a      	lsls	r2, r1, #10
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004656:	2200      	movs	r2, #0
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004660:	f7fc fc28 	bl	8000eb4 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	3301      	adds	r3, #1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800467c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800467e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004686:	e002      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800468c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004690:	4618      	mov	r0, r3
 8004692:	3750      	adds	r7, #80	@ 0x50
 8004694:	46bd      	mov	sp, r7
 8004696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	00f42400 	.word	0x00f42400

080046a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a8:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000000 	.word	0x20000000

080046bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c0:	f7ff fff0 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0a9b      	lsrs	r3, r3, #10
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4903      	ldr	r1, [pc, #12]	@ (80046e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0800b350 	.word	0x0800b350

080046e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046e8:	f7ff ffdc 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0b5b      	lsrs	r3, r3, #13
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	@ (8004708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	0800b350 	.word	0x0800b350

0800470c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07b      	b.n	8004816 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800472e:	d009      	beq.n	8004744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	e005      	b.n	8004744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fd7a 	bl	8003258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800477a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	ea42 0103 	orr.w	r1, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0104 	and.w	r1, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0210 	and.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800482e:	f7fe ff8f 	bl	8003750 <HAL_GetTick>
 8004832:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	e12a      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x36>
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e122      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Transmit+0x48>
 8004862:	2302      	movs	r3, #2
 8004864:	e11b      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b4:	d10f      	bne.n	80048d6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b40      	cmp	r3, #64	@ 0x40
 80048e2:	d007      	beq.n	80048f4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048fc:	d152      	bne.n	80049a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_Transmit+0xee>
 8004906:	8b7b      	ldrh	r3, [r7, #26]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d145      	bne.n	8004998 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004930:	e032      	b.n	8004998 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d112      	bne.n	8004966 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004964:	e018      	b.n	8004998 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004966:	f7fe fef3 	bl	8003750 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d803      	bhi.n	800497e <HAL_SPI_Transmit+0x160>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x166>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e082      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1c7      	bne.n	8004932 <HAL_SPI_Transmit+0x114>
 80049a2:	e053      	b.n	8004a4c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x194>
 80049ac:	8b7b      	ldrh	r3, [r7, #26]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d147      	bne.n	8004a42 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049d8:	e033      	b.n	8004a42 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d113      	bne.n	8004a10 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a0e:	e018      	b.n	8004a42 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a10:	f7fe fe9e 	bl	8003750 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d803      	bhi.n	8004a28 <HAL_SPI_Transmit+0x20a>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d102      	bne.n	8004a2e <HAL_SPI_Transmit+0x210>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e02d      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1c6      	bne.n	80049da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa59 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08a      	sub	sp, #40	@ 0x28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab8:	f7fe fe4a 	bl	8003750 <HAL_GetTick>
 8004abc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ac4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d00c      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x4a>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004adc:	d106      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x46>
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d001      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	e17f      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x5c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x5c>
 8004afc:	887b      	ldrh	r3, [r7, #2]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e174      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x6e>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e16d      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d003      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	887a      	ldrh	r2, [r7, #2]
 8004b52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8c:	d17e      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0xf6>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d16c      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc0:	e059      	b.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d113      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d119      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x1a4>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d014      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c4a:	f7fe fd81 	bl	8003750 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d80d      	bhi.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d009      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0bc      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1a0      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x11c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d19b      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x11c>
 8004c8a:	e082      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x1f4>
 8004c94:	8afb      	ldrh	r3, [r7, #22]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d171      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc0:	e05d      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d11c      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d017      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d114      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d119      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x2a6>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d4c:	f7fe fd00 	bl	8003750 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d803      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x2be>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x2c4>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e038      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d19c      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x21c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d197      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f8b6 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e01d      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	@ 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e08:	f7fe fca2 	bl	8003750 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e18:	f7fe fc9a 	bl	8003750 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1e:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	e054      	b.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d050      	beq.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e38:	f7fe fc8a 	bl	8003750 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e017      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d19b      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000000 	.word	0x20000000

08004f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff ff6a 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e032      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <SPI_EndRxTxTransaction+0xa0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <SPI_EndRxTxTransaction+0xa4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0d5b      	lsrs	r3, r3, #21
 8004f46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f58:	d112      	bne.n	8004f80 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff47 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d016      	beq.n	8004f9e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e00f      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b80      	cmp	r3, #128	@ 0x80
 8004f98:	d0f2      	beq.n	8004f80 <SPI_EndRxTxTransaction+0x78>
 8004f9a:	e000      	b.n	8004f9e <SPI_EndRxTxTransaction+0x96>
        break;
 8004f9c:	bf00      	nop
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	165e9f81 	.word	0x165e9f81

08004fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e042      	b.n	8005048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fe f9a6 	bl	8003328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2224      	movs	r2, #36	@ 0x24
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 faf5 	bl	80055e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	@ 0x28
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	d175      	bne.n	800515c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Transmit+0x2c>
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e06e      	b.n	800515e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508e:	f7fe fb5f 	bl	8003750 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a8:	d108      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e003      	b.n	80050c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050c4:	e02e      	b.n	8005124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f9ca 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03a      	b.n	800515e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e007      	b.n	8005116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1cb      	bne.n	80050c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	2140      	movs	r1, #64	@ 0x40
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f996 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e006      	b.n	800515e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b08a      	sub	sp, #40	@ 0x28
 800516a:	af02      	add	r7, sp, #8
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	f040 8081 	bne.w	800528a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Receive+0x2e>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e079      	b.n	800528c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2222      	movs	r2, #34	@ 0x22
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ac:	f7fe fad0 	bl	8003750 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d108      	bne.n	80051da <HAL_UART_Receive+0x74>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e003      	b.n	80051e2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80051e2:	e047      	b.n	8005274 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2120      	movs	r1, #32
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f93b 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e042      	b.n	800528c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10c      	bne.n	8005226 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	b29a      	uxth	r2, r3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3302      	adds	r3, #2
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	e01f      	b.n	8005266 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	d007      	beq.n	8005240 <HAL_UART_Receive+0xda>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_UART_Receive+0xe8>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e008      	b.n	8005260 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800525a:	b2da      	uxtb	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1b2      	bne.n	80051e4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b0a0      	sub	sp, #128	@ 0x80
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80052ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ae:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80052b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80052bc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80052be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80052c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80052ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80052f0:	657a      	str	r2, [r7, #84]	@ 0x54
 80052f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e5      	bne.n	80052d0 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	2b01      	cmp	r3, #1
 800530a:	d119      	bne.n	8005340 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	677b      	str	r3, [r7, #116]	@ 0x74
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800532c:	643a      	str	r2, [r7, #64]	@ 0x40
 800532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b80      	cmp	r3, #128	@ 0x80
 800534c:	d136      	bne.n	80053bc <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	61fb      	str	r3, [r7, #28]
   return(result);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005364:	673b      	str	r3, [r7, #112]	@ 0x70
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800536e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	2200      	movs	r2, #0
 8005390:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe faef 	bl	800397a <HAL_DMA_Abort>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fb57 	bl	8003a5a <HAL_DMA_GetError>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d104      	bne.n	80053bc <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2210      	movs	r2, #16
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e052      	b.n	8005462 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d136      	bne.n	8005438 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053ea:	61ba      	str	r2, [r7, #24]
 80053ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d018      	beq.n	8005438 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2200      	movs	r2, #0
 800540c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fab1 	bl	800397a <HAL_DMA_Abort>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fb19 	bl	8003a5a <HAL_DMA_GetError>
 8005428:	4603      	mov	r3, r0
 800542a:	2b20      	cmp	r3, #32
 800542c:	d104      	bne.n	8005438 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2210      	movs	r2, #16
 8005432:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e014      	b.n	8005462 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3780      	adds	r7, #128	@ 0x80
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547a:	e03b      	b.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d037      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fe f964 	bl	8003750 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <UART_WaitOnFlagUntilTimeout+0x30>
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e03a      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d023      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b80      	cmp	r3, #128	@ 0x80
 80054b0:	d020      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d01d      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d116      	bne.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f81d 	bl	800551c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2208      	movs	r2, #8
 80054e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e00f      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4013      	ands	r3, r2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	429a      	cmp	r2, r3
 8005510:	d0b4      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b095      	sub	sp, #84	@ 0x54
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800553a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005544:	643a      	str	r2, [r7, #64]	@ 0x40
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800554a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	61fb      	str	r3, [r7, #28]
   return(result);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800557e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	d119      	bne.n	80055c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0310 	bic.w	r3, r3, #16
 80055aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b4:	61ba      	str	r2, [r7, #24]
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	613b      	str	r3, [r7, #16]
   return(result);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055d6:	bf00      	nop
 80055d8:	3754      	adds	r7, #84	@ 0x54
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b0c0      	sub	sp, #256	@ 0x100
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	68d9      	ldr	r1, [r3, #12]
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	ea40 0301 	orr.w	r3, r0, r1
 800560c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	431a      	orrs	r2, r3
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800563c:	f021 010c 	bic.w	r1, r1, #12
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800564a:	430b      	orrs	r3, r1
 800564c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565e:	6999      	ldr	r1, [r3, #24]
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	ea40 0301 	orr.w	r3, r0, r1
 800566a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b8f      	ldr	r3, [pc, #572]	@ (80058b0 <UART_SetConfig+0x2cc>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d005      	beq.n	8005684 <UART_SetConfig+0xa0>
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b8d      	ldr	r3, [pc, #564]	@ (80058b4 <UART_SetConfig+0x2d0>)
 8005680:	429a      	cmp	r2, r3
 8005682:	d104      	bne.n	800568e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7ff f82e 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 8005688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800568c:	e003      	b.n	8005696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800568e:	f7ff f815 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 8005692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a0:	f040 810c 	bne.w	80058bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	1891      	adds	r1, r2, r2
 80056bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056be:	415b      	adcs	r3, r3
 80056c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056c6:	4621      	mov	r1, r4
 80056c8:	eb12 0801 	adds.w	r8, r2, r1
 80056cc:	4629      	mov	r1, r5
 80056ce:	eb43 0901 	adc.w	r9, r3, r1
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056e6:	4690      	mov	r8, r2
 80056e8:	4699      	mov	r9, r3
 80056ea:	4623      	mov	r3, r4
 80056ec:	eb18 0303 	adds.w	r3, r8, r3
 80056f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056f4:	462b      	mov	r3, r5
 80056f6:	eb49 0303 	adc.w	r3, r9, r3
 80056fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800570a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800570e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005712:	460b      	mov	r3, r1
 8005714:	18db      	adds	r3, r3, r3
 8005716:	653b      	str	r3, [r7, #80]	@ 0x50
 8005718:	4613      	mov	r3, r2
 800571a:	eb42 0303 	adc.w	r3, r2, r3
 800571e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005728:	f7fb fbc4 	bl	8000eb4 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4b61      	ldr	r3, [pc, #388]	@ (80058b8 <UART_SetConfig+0x2d4>)
 8005732:	fba3 2302 	umull	r2, r3, r3, r2
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	011c      	lsls	r4, r3, #4
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	1891      	adds	r1, r2, r2
 8005752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005754:	415b      	adcs	r3, r3
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800575c:	4641      	mov	r1, r8
 800575e:	eb12 0a01 	adds.w	sl, r2, r1
 8005762:	4649      	mov	r1, r9
 8005764:	eb43 0b01 	adc.w	fp, r3, r1
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800577c:	4692      	mov	sl, r2
 800577e:	469b      	mov	fp, r3
 8005780:	4643      	mov	r3, r8
 8005782:	eb1a 0303 	adds.w	r3, sl, r3
 8005786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800578a:	464b      	mov	r3, r9
 800578c:	eb4b 0303 	adc.w	r3, fp, r3
 8005790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057a8:	460b      	mov	r3, r1
 80057aa:	18db      	adds	r3, r3, r3
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ae:	4613      	mov	r3, r2
 80057b0:	eb42 0303 	adc.w	r3, r2, r3
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057be:	f7fb fb79 	bl	8000eb4 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	4b3b      	ldr	r3, [pc, #236]	@ (80058b8 <UART_SetConfig+0x2d4>)
 80057ca:	fba3 2301 	umull	r2, r3, r3, r1
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2264      	movs	r2, #100	@ 0x64
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	1acb      	subs	r3, r1, r3
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057de:	4b36      	ldr	r3, [pc, #216]	@ (80058b8 <UART_SetConfig+0x2d4>)
 80057e0:	fba3 2302 	umull	r2, r3, r3, r2
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057ec:	441c      	add	r4, r3
 80057ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	1891      	adds	r1, r2, r2
 8005806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005808:	415b      	adcs	r3, r3
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800580c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005810:	4641      	mov	r1, r8
 8005812:	1851      	adds	r1, r2, r1
 8005814:	6339      	str	r1, [r7, #48]	@ 0x30
 8005816:	4649      	mov	r1, r9
 8005818:	414b      	adcs	r3, r1
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005828:	4659      	mov	r1, fp
 800582a:	00cb      	lsls	r3, r1, #3
 800582c:	4651      	mov	r1, sl
 800582e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005832:	4651      	mov	r1, sl
 8005834:	00ca      	lsls	r2, r1, #3
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
 800583a:	4603      	mov	r3, r0
 800583c:	4642      	mov	r2, r8
 800583e:	189b      	adds	r3, r3, r2
 8005840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005844:	464b      	mov	r3, r9
 8005846:	460a      	mov	r2, r1
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800585c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005864:	460b      	mov	r3, r1
 8005866:	18db      	adds	r3, r3, r3
 8005868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800586a:	4613      	mov	r3, r2
 800586c:	eb42 0303 	adc.w	r3, r2, r3
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800587a:	f7fb fb1b 	bl	8000eb4 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <UART_SetConfig+0x2d4>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	@ 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	3332      	adds	r3, #50	@ 0x32
 8005896:	4a08      	ldr	r2, [pc, #32]	@ (80058b8 <UART_SetConfig+0x2d4>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f003 0207 	and.w	r2, r3, #7
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4422      	add	r2, r4
 80058aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058ac:	e106      	b.n	8005abc <UART_SetConfig+0x4d8>
 80058ae:	bf00      	nop
 80058b0:	40011000 	.word	0x40011000
 80058b4:	40011400 	.word	0x40011400
 80058b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058ce:	4642      	mov	r2, r8
 80058d0:	464b      	mov	r3, r9
 80058d2:	1891      	adds	r1, r2, r2
 80058d4:	6239      	str	r1, [r7, #32]
 80058d6:	415b      	adcs	r3, r3
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058de:	4641      	mov	r1, r8
 80058e0:	1854      	adds	r4, r2, r1
 80058e2:	4649      	mov	r1, r9
 80058e4:	eb43 0501 	adc.w	r5, r3, r1
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	00eb      	lsls	r3, r5, #3
 80058f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058f6:	00e2      	lsls	r2, r4, #3
 80058f8:	4614      	mov	r4, r2
 80058fa:	461d      	mov	r5, r3
 80058fc:	4643      	mov	r3, r8
 80058fe:	18e3      	adds	r3, r4, r3
 8005900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005904:	464b      	mov	r3, r9
 8005906:	eb45 0303 	adc.w	r3, r5, r3
 800590a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800591a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800592a:	4629      	mov	r1, r5
 800592c:	008b      	lsls	r3, r1, #2
 800592e:	4621      	mov	r1, r4
 8005930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005934:	4621      	mov	r1, r4
 8005936:	008a      	lsls	r2, r1, #2
 8005938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800593c:	f7fb faba 	bl	8000eb4 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4b60      	ldr	r3, [pc, #384]	@ (8005ac8 <UART_SetConfig+0x4e4>)
 8005946:	fba3 2302 	umull	r2, r3, r3, r2
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	011c      	lsls	r4, r3, #4
 800594e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005952:	2200      	movs	r2, #0
 8005954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800595c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	1891      	adds	r1, r2, r2
 8005966:	61b9      	str	r1, [r7, #24]
 8005968:	415b      	adcs	r3, r3
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005970:	4641      	mov	r1, r8
 8005972:	1851      	adds	r1, r2, r1
 8005974:	6139      	str	r1, [r7, #16]
 8005976:	4649      	mov	r1, r9
 8005978:	414b      	adcs	r3, r1
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005988:	4659      	mov	r1, fp
 800598a:	00cb      	lsls	r3, r1, #3
 800598c:	4651      	mov	r1, sl
 800598e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005992:	4651      	mov	r1, sl
 8005994:	00ca      	lsls	r2, r1, #3
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	4603      	mov	r3, r0
 800599c:	4642      	mov	r2, r8
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059a4:	464b      	mov	r3, r9
 80059a6:	460a      	mov	r2, r1
 80059a8:	eb42 0303 	adc.w	r3, r2, r3
 80059ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059c8:	4649      	mov	r1, r9
 80059ca:	008b      	lsls	r3, r1, #2
 80059cc:	4641      	mov	r1, r8
 80059ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d2:	4641      	mov	r1, r8
 80059d4:	008a      	lsls	r2, r1, #2
 80059d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059da:	f7fb fa6b 	bl	8000eb4 <__aeabi_uldivmod>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	4b38      	ldr	r3, [pc, #224]	@ (8005ac8 <UART_SetConfig+0x4e4>)
 80059e6:	fba3 2301 	umull	r2, r3, r3, r1
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2264      	movs	r2, #100	@ 0x64
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	1acb      	subs	r3, r1, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	@ 0x32
 80059f8:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <UART_SetConfig+0x4e4>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a04:	441c      	add	r4, r3
 8005a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	1891      	adds	r1, r2, r2
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a24:	4641      	mov	r1, r8
 8005a26:	1851      	adds	r1, r2, r1
 8005a28:	6039      	str	r1, [r7, #0]
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	414b      	adcs	r3, r1
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	00cb      	lsls	r3, r1, #3
 8005a40:	4651      	mov	r1, sl
 8005a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a46:	4651      	mov	r1, sl
 8005a48:	00ca      	lsls	r2, r1, #3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4642      	mov	r2, r8
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a56:	464b      	mov	r3, r9
 8005a58:	460a      	mov	r2, r1
 8005a5a:	eb42 0303 	adc.w	r3, r2, r3
 8005a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a78:	4649      	mov	r1, r9
 8005a7a:	008b      	lsls	r3, r1, #2
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a82:	4641      	mov	r1, r8
 8005a84:	008a      	lsls	r2, r1, #2
 8005a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a8a:	f7fb fa13 	bl	8000eb4 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <UART_SetConfig+0x4e4>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	@ 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	3332      	adds	r3, #50	@ 0x32
 8005aa6:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <UART_SetConfig+0x4e4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4422      	add	r2, r4
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac8:	51eb851f 	.word	0x51eb851f

08005acc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ad0:	4904      	ldr	r1, [pc, #16]	@ (8005ae4 <MX_FATFS_Init+0x18>)
 8005ad2:	4805      	ldr	r0, [pc, #20]	@ (8005ae8 <MX_FATFS_Init+0x1c>)
 8005ad4:	f000 fd88 	bl	80065e8 <FATFS_LinkDriver>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <MX_FATFS_Init+0x20>)
 8005ade:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ae0:	bf00      	nop
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200003dc 	.word	0x200003dc
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	200003d8 	.word	0x200003d8

08005af0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f9d3 	bl	8005ea8 <USER_SPI_initialize>
 8005b02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fab1 	bl	8006080 <USER_SPI_status>
 8005b1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005b38:	7bf8      	ldrb	r0, [r7, #15]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	f000 fab4 	bl	80060ac <USER_SPI_read>
 8005b44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005b5e:	7bf8      	ldrb	r0, [r7, #15]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	f000 fb07 	bl	8006178 <USER_SPI_write>
 8005b6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	603a      	str	r2, [r7, #0]
 8005b7e:	71fb      	strb	r3, [r7, #7]
 8005b80:	460b      	mov	r3, r1
 8005b82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005b84:	79b9      	ldrb	r1, [r7, #6]
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fb70 	bl	8006270 <USER_SPI_ioctl>
 8005b90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005ba4:	f7fd fdd4 	bl	8003750 <HAL_GetTick>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4a04      	ldr	r2, [pc, #16]	@ (8005bbc <SPI_Timer_On+0x20>)
 8005bac:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005bae:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <SPI_Timer_On+0x24>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200003e4 	.word	0x200003e4
 8005bc0:	200003e8 	.word	0x200003e8

08005bc4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005bc8:	f7fd fdc2 	bl	8003750 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <SPI_Timer_Status+0x24>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <SPI_Timer_Status+0x28>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bf34      	ite	cc
 8005bdc:	2301      	movcc	r3, #1
 8005bde:	2300      	movcs	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200003e4 	.word	0x200003e4
 8005bec:	200003e8 	.word	0x200003e8

08005bf0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005bfa:	f107 020f 	add.w	r2, r7, #15
 8005bfe:	1df9      	adds	r1, r7, #7
 8005c00:	2332      	movs	r3, #50	@ 0x32
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	2301      	movs	r3, #1
 8005c06:	4804      	ldr	r0, [pc, #16]	@ (8005c18 <xchg_spi+0x28>)
 8005c08:	f7fe ff4d 	bl	8004aa6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000208 	.word	0x20000208

08005c1c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e00a      	b.n	8005c42 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	18d4      	adds	r4, r2, r3
 8005c32:	20ff      	movs	r0, #255	@ 0xff
 8005c34:	f7ff ffdc 	bl	8005bf0 <xchg_spi>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3f0      	bcc.n	8005c2c <rcvr_spi_multi+0x10>
	}
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd90      	pop	{r4, r7, pc}

08005c54 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f04f 33ff 	mov.w	r3, #4294967295
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4803      	ldr	r0, [pc, #12]	@ (8005c78 <xmit_spi_multi+0x24>)
 8005c6a:	f7fe fdd8 	bl	800481e <HAL_SPI_Transmit>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000208 	.word	0x20000208

08005c7c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005c84:	f7fd fd64 	bl	8003750 <HAL_GetTick>
 8005c88:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005c8e:	20ff      	movs	r0, #255	@ 0xff
 8005c90:	f7ff ffae 	bl	8005bf0 <xchg_spi>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2bff      	cmp	r3, #255	@ 0xff
 8005c9c:	d007      	beq.n	8005cae <wait_ready+0x32>
 8005c9e:	f7fd fd57 	bl	8003750 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d8ef      	bhi.n	8005c8e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2bff      	cmp	r3, #255	@ 0xff
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2301      	moveq	r3, #1
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005cc8:	2201      	movs	r2, #1
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4803      	ldr	r0, [pc, #12]	@ (8005cdc <despiselect+0x18>)
 8005cce:	f7fe f86d 	bl	8003dac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005cd2:	20ff      	movs	r0, #255	@ 0xff
 8005cd4:	f7ff ff8c 	bl	8005bf0 <xchg_spi>

}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40020400 	.word	0x40020400

08005ce0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	4809      	ldr	r0, [pc, #36]	@ (8005d10 <spiselect+0x30>)
 8005cea:	f7fe f85f 	bl	8003dac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005cee:	20ff      	movs	r0, #255	@ 0xff
 8005cf0:	f7ff ff7e 	bl	8005bf0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005cf8:	f7ff ffc0 	bl	8005c7c <wait_ready>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <spiselect+0x26>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e002      	b.n	8005d0c <spiselect+0x2c>

	despiselect();
 8005d06:	f7ff ffdd 	bl	8005cc4 <despiselect>
	return 0;	/* Timeout */
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40020400 	.word	0x40020400

08005d14 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005d1e:	20c8      	movs	r0, #200	@ 0xc8
 8005d20:	f7ff ff3c 	bl	8005b9c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005d24:	20ff      	movs	r0, #255	@ 0xff
 8005d26:	f7ff ff63 	bl	8005bf0 <xchg_spi>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2bff      	cmp	r3, #255	@ 0xff
 8005d32:	d104      	bne.n	8005d3e <rcvr_datablock+0x2a>
 8005d34:	f7ff ff46 	bl	8005bc4 <SPI_Timer_Status>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f2      	bne.n	8005d24 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d42:	d001      	beq.n	8005d48 <rcvr_datablock+0x34>
 8005d44:	2300      	movs	r3, #0
 8005d46:	e00a      	b.n	8005d5e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ff66 	bl	8005c1c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005d50:	20ff      	movs	r0, #255	@ 0xff
 8005d52:	f7ff ff4d 	bl	8005bf0 <xchg_spi>
 8005d56:	20ff      	movs	r0, #255	@ 0xff
 8005d58:	f7ff ff4a 	bl	8005bf0 <xchg_spi>

	return 1;						/* Function succeeded */
 8005d5c:	2301      	movs	r3, #1
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005d72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d76:	f7ff ff81 	bl	8005c7c <wait_ready>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <xmit_datablock+0x1e>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e01e      	b.n	8005dc2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff ff32 	bl	8005bf0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	2bfd      	cmp	r3, #253	@ 0xfd
 8005d90:	d016      	beq.n	8005dc0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005d92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ff5c 	bl	8005c54 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005d9c:	20ff      	movs	r0, #255	@ 0xff
 8005d9e:	f7ff ff27 	bl	8005bf0 <xchg_spi>
 8005da2:	20ff      	movs	r0, #255	@ 0xff
 8005da4:	f7ff ff24 	bl	8005bf0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005da8:	20ff      	movs	r0, #255	@ 0xff
 8005daa:	f7ff ff21 	bl	8005bf0 <xchg_spi>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d001      	beq.n	8005dc0 <xmit_datablock+0x5a>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <xmit_datablock+0x5c>
	}
	return 1;
 8005dc0:	2301      	movs	r3, #1
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	6039      	str	r1, [r7, #0]
 8005dd4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da0e      	bge.n	8005dfc <send_cmd+0x32>
		cmd &= 0x7F;
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005de6:	2100      	movs	r1, #0
 8005de8:	2037      	movs	r0, #55	@ 0x37
 8005dea:	f7ff ffee 	bl	8005dca <send_cmd>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d901      	bls.n	8005dfc <send_cmd+0x32>
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	e051      	b.n	8005ea0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	2b0c      	cmp	r3, #12
 8005e00:	d008      	beq.n	8005e14 <send_cmd+0x4a>
		despiselect();
 8005e02:	f7ff ff5f 	bl	8005cc4 <despiselect>
		if (!spiselect()) return 0xFF;
 8005e06:	f7ff ff6b 	bl	8005ce0 <spiselect>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <send_cmd+0x4a>
 8005e10:	23ff      	movs	r3, #255	@ 0xff
 8005e12:	e045      	b.n	8005ea0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fee7 	bl	8005bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	0e1b      	lsrs	r3, r3, #24
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fee1 	bl	8005bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fedb 	bl	8005bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fed5 	bl	8005bf0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fed0 	bl	8005bf0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <send_cmd+0x94>
 8005e5a:	2395      	movs	r3, #149	@ 0x95
 8005e5c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d101      	bne.n	8005e68 <send_cmd+0x9e>
 8005e64:	2387      	movs	r3, #135	@ 0x87
 8005e66:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fec0 	bl	8005bf0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d102      	bne.n	8005e7c <send_cmd+0xb2>
 8005e76:	20ff      	movs	r0, #255	@ 0xff
 8005e78:	f7ff feba 	bl	8005bf0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005e80:	20ff      	movs	r0, #255	@ 0xff
 8005e82:	f7ff feb5 	bl	8005bf0 <xchg_spi>
 8005e86:	4603      	mov	r3, r0
 8005e88:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da05      	bge.n	8005e9e <send_cmd+0xd4>
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <USER_SPI_initialize+0x14>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0d6      	b.n	800606a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <USER_SPI_initialize+0x2a>
 8005eca:	4b6a      	ldr	r3, [pc, #424]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	e0cb      	b.n	800606a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005ed2:	4b69      	ldr	r3, [pc, #420]	@ (8006078 <USER_SPI_initialize+0x1d0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005edc:	4b66      	ldr	r3, [pc, #408]	@ (8006078 <USER_SPI_initialize+0x1d0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005ee4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	73fb      	strb	r3, [r7, #15]
 8005eea:	e005      	b.n	8005ef8 <USER_SPI_initialize+0x50>
 8005eec:	20ff      	movs	r0, #255	@ 0xff
 8005eee:	f7ff fe7f 	bl	8005bf0 <xchg_spi>
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f6      	bne.n	8005eec <USER_SPI_initialize+0x44>

	ty = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005f02:	2100      	movs	r1, #0
 8005f04:	2000      	movs	r0, #0
 8005f06:	f7ff ff60 	bl	8005dca <send_cmd>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 808b 	bne.w	8006028 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005f12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f16:	f7ff fe41 	bl	8005b9c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005f1a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005f1e:	2008      	movs	r0, #8
 8005f20:	f7ff ff53 	bl	8005dca <send_cmd>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d151      	bne.n	8005fce <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e00d      	b.n	8005f4c <USER_SPI_initialize+0xa4>
 8005f30:	7bfc      	ldrb	r4, [r7, #15]
 8005f32:	20ff      	movs	r0, #255	@ 0xff
 8005f34:	f7ff fe5c 	bl	8005bf0 <xchg_spi>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f104 0310 	add.w	r3, r4, #16
 8005f40:	443b      	add	r3, r7
 8005f42:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d9ee      	bls.n	8005f30 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005f52:	7abb      	ldrb	r3, [r7, #10]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d167      	bne.n	8006028 <USER_SPI_initialize+0x180>
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	2baa      	cmp	r3, #170	@ 0xaa
 8005f5c:	d164      	bne.n	8006028 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005f5e:	bf00      	nop
 8005f60:	f7ff fe30 	bl	8005bc4 <SPI_Timer_Status>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <USER_SPI_initialize+0xd2>
 8005f6a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f6e:	20a9      	movs	r0, #169	@ 0xa9
 8005f70:	f7ff ff2b 	bl	8005dca <send_cmd>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f2      	bne.n	8005f60 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005f7a:	f7ff fe23 	bl	8005bc4 <SPI_Timer_Status>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d051      	beq.n	8006028 <USER_SPI_initialize+0x180>
 8005f84:	2100      	movs	r1, #0
 8005f86:	203a      	movs	r0, #58	@ 0x3a
 8005f88:	f7ff ff1f 	bl	8005dca <send_cmd>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d14a      	bne.n	8006028 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	e00d      	b.n	8005fb4 <USER_SPI_initialize+0x10c>
 8005f98:	7bfc      	ldrb	r4, [r7, #15]
 8005f9a:	20ff      	movs	r0, #255	@ 0xff
 8005f9c:	f7ff fe28 	bl	8005bf0 <xchg_spi>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f104 0310 	add.w	r3, r4, #16
 8005fa8:	443b      	add	r3, r7
 8005faa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d9ee      	bls.n	8005f98 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005fba:	7a3b      	ldrb	r3, [r7, #8]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <USER_SPI_initialize+0x120>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	e000      	b.n	8005fca <USER_SPI_initialize+0x122>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	737b      	strb	r3, [r7, #13]
 8005fcc:	e02c      	b.n	8006028 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005fce:	2100      	movs	r1, #0
 8005fd0:	20a9      	movs	r0, #169	@ 0xa9
 8005fd2:	f7ff fefa 	bl	8005dca <send_cmd>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d804      	bhi.n	8005fe6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005fdc:	2302      	movs	r3, #2
 8005fde:	737b      	strb	r3, [r7, #13]
 8005fe0:	23a9      	movs	r3, #169	@ 0xa9
 8005fe2:	73bb      	strb	r3, [r7, #14]
 8005fe4:	e003      	b.n	8005fee <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	737b      	strb	r3, [r7, #13]
 8005fea:	2301      	movs	r3, #1
 8005fec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005fee:	bf00      	nop
 8005ff0:	f7ff fde8 	bl	8005bc4 <SPI_Timer_Status>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <USER_SPI_initialize+0x162>
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fee3 	bl	8005dca <send_cmd>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f2      	bne.n	8005ff0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800600a:	f7ff fddb 	bl	8005bc4 <SPI_Timer_Status>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <USER_SPI_initialize+0x17c>
 8006014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006018:	2010      	movs	r0, #16
 800601a:	f7ff fed6 	bl	8005dca <send_cmd>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <USER_SPI_initialize+0x180>
				ty = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <USER_SPI_initialize+0x1d4>)
 800602a:	7b7b      	ldrb	r3, [r7, #13]
 800602c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800602e:	f7ff fe49 	bl	8005cc4 <despiselect>

	if (ty) {			/* OK */
 8006032:	7b7b      	ldrb	r3, [r7, #13]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d012      	beq.n	800605e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006038:	4b0f      	ldr	r3, [pc, #60]	@ (8006078 <USER_SPI_initialize+0x1d0>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <USER_SPI_initialize+0x1d0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0210 	orr.w	r2, r2, #16
 800604a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e002      	b.n	8006064 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800605e:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 8006060:	2201      	movs	r2, #1
 8006062:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006064:	4b03      	ldr	r3, [pc, #12]	@ (8006074 <USER_SPI_initialize+0x1cc>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b2db      	uxtb	r3, r3
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	bf00      	nop
 8006074:	20000020 	.word	0x20000020
 8006078:	20000208 	.word	0x20000208
 800607c:	200003e0 	.word	0x200003e0

08006080 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <USER_SPI_status+0x14>
 8006090:	2301      	movs	r3, #1
 8006092:	e002      	b.n	800609a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006094:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <USER_SPI_status+0x28>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	b2db      	uxtb	r3, r3
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000020 	.word	0x20000020

080060ac <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <USER_SPI_read+0x1c>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <USER_SPI_read+0x20>
 80060c8:	2304      	movs	r3, #4
 80060ca:	e04d      	b.n	8006168 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <USER_SPI_read+0xc4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <USER_SPI_read+0x32>
 80060da:	2303      	movs	r3, #3
 80060dc:	e044      	b.n	8006168 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80060de:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <USER_SPI_read+0xc8>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <USER_SPI_read+0x44>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	025b      	lsls	r3, r3, #9
 80060ee:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d111      	bne.n	800611a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	2011      	movs	r0, #17
 80060fa:	f7ff fe66 	bl	8005dca <send_cmd>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d129      	bne.n	8006158 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006104:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006108:	68b8      	ldr	r0, [r7, #8]
 800610a:	f7ff fe03 	bl	8005d14 <rcvr_datablock>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d021      	beq.n	8006158 <USER_SPI_read+0xac>
			count = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	e01e      	b.n	8006158 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	2012      	movs	r0, #18
 800611e:	f7ff fe54 	bl	8005dca <send_cmd>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d117      	bne.n	8006158 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800612c:	68b8      	ldr	r0, [r7, #8]
 800612e:	f7ff fdf1 	bl	8005d14 <rcvr_datablock>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <USER_SPI_read+0xa2>
				buff += 512;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800613e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ed      	bne.n	8006128 <USER_SPI_read+0x7c>
 800614c:	e000      	b.n	8006150 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800614e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006150:	2100      	movs	r1, #0
 8006152:	200c      	movs	r0, #12
 8006154:	f7ff fe39 	bl	8005dca <send_cmd>
		}
	}
	despiselect();
 8006158:	f7ff fdb4 	bl	8005cc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000020 	.word	0x20000020
 8006174:	200003e0 	.word	0x200003e0

08006178 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <USER_SPI_write+0x1c>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <USER_SPI_write+0x20>
 8006194:	2304      	movs	r3, #4
 8006196:	e063      	b.n	8006260 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006198:	4b33      	ldr	r3, [pc, #204]	@ (8006268 <USER_SPI_write+0xf0>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <USER_SPI_write+0x32>
 80061a6:	2303      	movs	r3, #3
 80061a8:	e05a      	b.n	8006260 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80061aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <USER_SPI_write+0xf0>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <USER_SPI_write+0x44>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e051      	b.n	8006260 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80061bc:	4b2b      	ldr	r3, [pc, #172]	@ (800626c <USER_SPI_write+0xf4>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <USER_SPI_write+0x56>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	025b      	lsls	r3, r3, #9
 80061cc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d110      	bne.n	80061f6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	2018      	movs	r0, #24
 80061d8:	f7ff fdf7 	bl	8005dca <send_cmd>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d136      	bne.n	8006250 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80061e2:	21fe      	movs	r1, #254	@ 0xfe
 80061e4:	68b8      	ldr	r0, [r7, #8]
 80061e6:	f7ff fdbe 	bl	8005d66 <xmit_datablock>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d02f      	beq.n	8006250 <USER_SPI_write+0xd8>
			count = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	e02c      	b.n	8006250 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80061f6:	4b1d      	ldr	r3, [pc, #116]	@ (800626c <USER_SPI_write+0xf4>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 0306 	and.w	r3, r3, #6
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <USER_SPI_write+0x92>
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	2097      	movs	r0, #151	@ 0x97
 8006206:	f7ff fde0 	bl	8005dca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	2019      	movs	r0, #25
 800620e:	f7ff fddc 	bl	8005dca <send_cmd>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11b      	bne.n	8006250 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006218:	21fc      	movs	r1, #252	@ 0xfc
 800621a:	68b8      	ldr	r0, [r7, #8]
 800621c:	f7ff fda3 	bl	8005d66 <xmit_datablock>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <USER_SPI_write+0xc4>
				buff += 512;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800622c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1ee      	bne.n	8006218 <USER_SPI_write+0xa0>
 800623a:	e000      	b.n	800623e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800623c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800623e:	21fd      	movs	r1, #253	@ 0xfd
 8006240:	2000      	movs	r0, #0
 8006242:	f7ff fd90 	bl	8005d66 <xmit_datablock>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <USER_SPI_write+0xd8>
 800624c:	2301      	movs	r3, #1
 800624e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006250:	f7ff fd38 	bl	8005cc4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000020 	.word	0x20000020
 800626c:	200003e0 	.word	0x200003e0

08006270 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	@ 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	603a      	str	r2, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
 800627c:	460b      	mov	r3, r1
 800627e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <USER_SPI_ioctl+0x1a>
 8006286:	2304      	movs	r3, #4
 8006288:	e15a      	b.n	8006540 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800628a:	4baf      	ldr	r3, [pc, #700]	@ (8006548 <USER_SPI_ioctl+0x2d8>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <USER_SPI_ioctl+0x2c>
 8006298:	2303      	movs	r3, #3
 800629a:	e151      	b.n	8006540 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80062a2:	79bb      	ldrb	r3, [r7, #6]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	f200 8136 	bhi.w	8006516 <USER_SPI_ioctl+0x2a6>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <USER_SPI_ioctl+0x40>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c5 	.word	0x080062c5
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	08006517 	.word	0x08006517
 80062bc:	08006385 	.word	0x08006385
 80062c0:	0800647b 	.word	0x0800647b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80062c4:	f7ff fd0c 	bl	8005ce0 <spiselect>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8127 	beq.w	800651e <USER_SPI_ioctl+0x2ae>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80062d6:	e122      	b.n	800651e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80062d8:	2100      	movs	r1, #0
 80062da:	2009      	movs	r0, #9
 80062dc:	f7ff fd75 	bl	8005dca <send_cmd>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 811d 	bne.w	8006522 <USER_SPI_ioctl+0x2b2>
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	2110      	movs	r1, #16
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fd10 	bl	8005d14 <rcvr_datablock>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8113 	beq.w	8006522 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80062fc:	7b3b      	ldrb	r3, [r7, #12]
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	d111      	bne.n	800632a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006306:	7d7b      	ldrb	r3, [r7, #21]
 8006308:	461a      	mov	r2, r3
 800630a:	7d3b      	ldrb	r3, [r7, #20]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4413      	add	r3, r2
 8006310:	461a      	mov	r2, r3
 8006312:	7cfb      	ldrb	r3, [r7, #19]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800631a:	4413      	add	r3, r2
 800631c:	3301      	adds	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	029a      	lsls	r2, r3, #10
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e028      	b.n	800637c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800632a:	7c7b      	ldrb	r3, [r7, #17]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	7dbb      	ldrb	r3, [r7, #22]
 8006334:	09db      	lsrs	r3, r3, #7
 8006336:	b2db      	uxtb	r3, r3
 8006338:	4413      	add	r3, r2
 800633a:	b2da      	uxtb	r2, r3
 800633c:	7d7b      	ldrb	r3, [r7, #21]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0306 	and.w	r3, r3, #6
 8006346:	b2db      	uxtb	r3, r3
 8006348:	4413      	add	r3, r2
 800634a:	b2db      	uxtb	r3, r3
 800634c:	3302      	adds	r3, #2
 800634e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006352:	7d3b      	ldrb	r3, [r7, #20]
 8006354:	099b      	lsrs	r3, r3, #6
 8006356:	b2db      	uxtb	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	7cfb      	ldrb	r3, [r7, #19]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	441a      	add	r2, r3
 8006360:	7cbb      	ldrb	r3, [r7, #18]
 8006362:	029b      	lsls	r3, r3, #10
 8006364:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006368:	4413      	add	r3, r2
 800636a:	3301      	adds	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800636e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006372:	3b09      	subs	r3, #9
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	409a      	lsls	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006382:	e0ce      	b.n	8006522 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006384:	4b71      	ldr	r3, [pc, #452]	@ (800654c <USER_SPI_ioctl+0x2dc>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d031      	beq.n	80063f4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006390:	2100      	movs	r1, #0
 8006392:	208d      	movs	r0, #141	@ 0x8d
 8006394:	f7ff fd19 	bl	8005dca <send_cmd>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 80c3 	bne.w	8006526 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80063a0:	20ff      	movs	r0, #255	@ 0xff
 80063a2:	f7ff fc25 	bl	8005bf0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	2110      	movs	r1, #16
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fcb1 	bl	8005d14 <rcvr_datablock>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80b6 	beq.w	8006526 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80063ba:	2330      	movs	r3, #48	@ 0x30
 80063bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80063c0:	e007      	b.n	80063d2 <USER_SPI_ioctl+0x162>
 80063c2:	20ff      	movs	r0, #255	@ 0xff
 80063c4:	f7ff fc14 	bl	8005bf0 <xchg_spi>
 80063c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80063d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f3      	bne.n	80063c2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80063da:	7dbb      	ldrb	r3, [r7, #22]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	2310      	movs	r3, #16
 80063e4:	fa03 f202 	lsl.w	r2, r3, r2
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80063f2:	e098      	b.n	8006526 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80063f4:	2100      	movs	r1, #0
 80063f6:	2009      	movs	r0, #9
 80063f8:	f7ff fce7 	bl	8005dca <send_cmd>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 8091 	bne.w	8006526 <USER_SPI_ioctl+0x2b6>
 8006404:	f107 030c 	add.w	r3, r7, #12
 8006408:	2110      	movs	r1, #16
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fc82 	bl	8005d14 <rcvr_datablock>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8087 	beq.w	8006526 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006418:	4b4c      	ldr	r3, [pc, #304]	@ (800654c <USER_SPI_ioctl+0x2dc>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800642c:	7dfa      	ldrb	r2, [r7, #23]
 800642e:	09d2      	lsrs	r2, r2, #7
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	4413      	add	r3, r2
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	7e7b      	ldrb	r3, [r7, #25]
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	b2db      	uxtb	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	461a      	mov	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e013      	b.n	8006472 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800644a:	7dbb      	ldrb	r3, [r7, #22]
 800644c:	109b      	asrs	r3, r3, #2
 800644e:	b29b      	uxth	r3, r3
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	3301      	adds	r3, #1
 8006456:	7dfa      	ldrb	r2, [r7, #23]
 8006458:	00d2      	lsls	r2, r2, #3
 800645a:	f002 0218 	and.w	r2, r2, #24
 800645e:	7df9      	ldrb	r1, [r7, #23]
 8006460:	0949      	lsrs	r1, r1, #5
 8006462:	b2c9      	uxtb	r1, r1
 8006464:	440a      	add	r2, r1
 8006466:	3201      	adds	r2, #1
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	461a      	mov	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006478:	e055      	b.n	8006526 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800647a:	4b34      	ldr	r3, [pc, #208]	@ (800654c <USER_SPI_ioctl+0x2dc>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 0306 	and.w	r3, r3, #6
 8006482:	2b00      	cmp	r3, #0
 8006484:	d051      	beq.n	800652a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006486:	f107 020c 	add.w	r2, r7, #12
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	210b      	movs	r1, #11
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff feee 	bl	8006270 <USER_SPI_ioctl>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d149      	bne.n	800652e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800649a:	7b3b      	ldrb	r3, [r7, #12]
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USER_SPI_ioctl+0x23e>
 80064a4:	7dbb      	ldrb	r3, [r7, #22]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d041      	beq.n	8006532 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80064be:	4b23      	ldr	r3, [pc, #140]	@ (800654c <USER_SPI_ioctl+0x2dc>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	025b      	lsls	r3, r3, #9
 80064ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	025b      	lsls	r3, r3, #9
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80064d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d8:	2020      	movs	r0, #32
 80064da:	f7ff fc76 	bl	8005dca <send_cmd>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d128      	bne.n	8006536 <USER_SPI_ioctl+0x2c6>
 80064e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e6:	2021      	movs	r0, #33	@ 0x21
 80064e8:	f7ff fc6f 	bl	8005dca <send_cmd>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d121      	bne.n	8006536 <USER_SPI_ioctl+0x2c6>
 80064f2:	2100      	movs	r1, #0
 80064f4:	2026      	movs	r0, #38	@ 0x26
 80064f6:	f7ff fc68 	bl	8005dca <send_cmd>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11a      	bne.n	8006536 <USER_SPI_ioctl+0x2c6>
 8006500:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006504:	f7ff fbba 	bl	8005c7c <wait_ready>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d013      	beq.n	8006536 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800650e:	2300      	movs	r3, #0
 8006510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006514:	e00f      	b.n	8006536 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006516:	2304      	movs	r3, #4
 8006518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800651c:	e00c      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		break;
 800651e:	bf00      	nop
 8006520:	e00a      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		break;
 8006522:	bf00      	nop
 8006524:	e008      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		break;
 8006526:	bf00      	nop
 8006528:	e006      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800652a:	bf00      	nop
 800652c:	e004      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <USER_SPI_ioctl+0x2c8>
		break;
 8006536:	bf00      	nop
	}

	despiselect();
 8006538:	f7ff fbc4 	bl	8005cc4 <despiselect>

	return res;
 800653c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006540:	4618      	mov	r0, r3
 8006542:	3730      	adds	r7, #48	@ 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000020 	.word	0x20000020
 800654c:	200003e0 	.word	0x200003e0

08006550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800655e:	2301      	movs	r3, #1
 8006560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006566:	4b1f      	ldr	r3, [pc, #124]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006568:	7a5b      	ldrb	r3, [r3, #9]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d131      	bne.n	80065d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006570:	4b1c      	ldr	r3, [pc, #112]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006572:	7a5b      	ldrb	r3, [r3, #9]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	4b1a      	ldr	r3, [pc, #104]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800657e:	4b19      	ldr	r3, [pc, #100]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006580:	7a5b      	ldrb	r3, [r3, #9]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4a17      	ldr	r2, [pc, #92]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800658e:	4b15      	ldr	r3, [pc, #84]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006590:	7a5b      	ldrb	r3, [r3, #9]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 8006598:	4413      	add	r3, r2
 800659a:	79fa      	ldrb	r2, [r7, #7]
 800659c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800659e:	4b11      	ldr	r3, [pc, #68]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 80065a0:	7a5b      	ldrb	r3, [r3, #9]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	b2d1      	uxtb	r1, r2
 80065a8:	4a0e      	ldr	r2, [pc, #56]	@ (80065e4 <FATFS_LinkDriverEx+0x94>)
 80065aa:	7251      	strb	r1, [r2, #9]
 80065ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80065ae:	7dbb      	ldrb	r3, [r7, #22]
 80065b0:	3330      	adds	r3, #48	@ 0x30
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3301      	adds	r3, #1
 80065bc:	223a      	movs	r2, #58	@ 0x3a
 80065be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3302      	adds	r3, #2
 80065c4:	222f      	movs	r2, #47	@ 0x2f
 80065c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	3303      	adds	r3, #3
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200003ec 	.word	0x200003ec

080065e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065f2:	2200      	movs	r2, #0
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff ffaa 	bl	8006550 <FATFS_LinkDriverEx>
 80065fc:	4603      	mov	r3, r0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <malloc>:
 8006608:	4b02      	ldr	r3, [pc, #8]	@ (8006614 <malloc+0xc>)
 800660a:	4601      	mov	r1, r0
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f000 b82d 	b.w	800666c <_malloc_r>
 8006612:	bf00      	nop
 8006614:	2000019c 	.word	0x2000019c

08006618 <free>:
 8006618:	4b02      	ldr	r3, [pc, #8]	@ (8006624 <free+0xc>)
 800661a:	4601      	mov	r1, r0
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f002 be23 	b.w	8009268 <_free_r>
 8006622:	bf00      	nop
 8006624:	2000019c 	.word	0x2000019c

08006628 <sbrk_aligned>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	4e0f      	ldr	r6, [pc, #60]	@ (8006668 <sbrk_aligned+0x40>)
 800662c:	460c      	mov	r4, r1
 800662e:	6831      	ldr	r1, [r6, #0]
 8006630:	4605      	mov	r5, r0
 8006632:	b911      	cbnz	r1, 800663a <sbrk_aligned+0x12>
 8006634:	f001 ff5e 	bl	80084f4 <_sbrk_r>
 8006638:	6030      	str	r0, [r6, #0]
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f001 ff59 	bl	80084f4 <_sbrk_r>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	d103      	bne.n	800664e <sbrk_aligned+0x26>
 8006646:	f04f 34ff 	mov.w	r4, #4294967295
 800664a:	4620      	mov	r0, r4
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	1cc4      	adds	r4, r0, #3
 8006650:	f024 0403 	bic.w	r4, r4, #3
 8006654:	42a0      	cmp	r0, r4
 8006656:	d0f8      	beq.n	800664a <sbrk_aligned+0x22>
 8006658:	1a21      	subs	r1, r4, r0
 800665a:	4628      	mov	r0, r5
 800665c:	f001 ff4a 	bl	80084f4 <_sbrk_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d1f2      	bne.n	800664a <sbrk_aligned+0x22>
 8006664:	e7ef      	b.n	8006646 <sbrk_aligned+0x1e>
 8006666:	bf00      	nop
 8006668:	200003f8 	.word	0x200003f8

0800666c <_malloc_r>:
 800666c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006670:	1ccd      	adds	r5, r1, #3
 8006672:	f025 0503 	bic.w	r5, r5, #3
 8006676:	3508      	adds	r5, #8
 8006678:	2d0c      	cmp	r5, #12
 800667a:	bf38      	it	cc
 800667c:	250c      	movcc	r5, #12
 800667e:	2d00      	cmp	r5, #0
 8006680:	4606      	mov	r6, r0
 8006682:	db01      	blt.n	8006688 <_malloc_r+0x1c>
 8006684:	42a9      	cmp	r1, r5
 8006686:	d904      	bls.n	8006692 <_malloc_r+0x26>
 8006688:	230c      	movs	r3, #12
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	2000      	movs	r0, #0
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006768 <_malloc_r+0xfc>
 8006696:	f000 f869 	bl	800676c <__malloc_lock>
 800669a:	f8d8 3000 	ldr.w	r3, [r8]
 800669e:	461c      	mov	r4, r3
 80066a0:	bb44      	cbnz	r4, 80066f4 <_malloc_r+0x88>
 80066a2:	4629      	mov	r1, r5
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff ffbf 	bl	8006628 <sbrk_aligned>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	4604      	mov	r4, r0
 80066ae:	d158      	bne.n	8006762 <_malloc_r+0xf6>
 80066b0:	f8d8 4000 	ldr.w	r4, [r8]
 80066b4:	4627      	mov	r7, r4
 80066b6:	2f00      	cmp	r7, #0
 80066b8:	d143      	bne.n	8006742 <_malloc_r+0xd6>
 80066ba:	2c00      	cmp	r4, #0
 80066bc:	d04b      	beq.n	8006756 <_malloc_r+0xea>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4639      	mov	r1, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	eb04 0903 	add.w	r9, r4, r3
 80066c8:	f001 ff14 	bl	80084f4 <_sbrk_r>
 80066cc:	4581      	cmp	r9, r0
 80066ce:	d142      	bne.n	8006756 <_malloc_r+0xea>
 80066d0:	6821      	ldr	r1, [r4, #0]
 80066d2:	1a6d      	subs	r5, r5, r1
 80066d4:	4629      	mov	r1, r5
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffa6 	bl	8006628 <sbrk_aligned>
 80066dc:	3001      	adds	r0, #1
 80066de:	d03a      	beq.n	8006756 <_malloc_r+0xea>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	442b      	add	r3, r5
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	bb62      	cbnz	r2, 8006748 <_malloc_r+0xdc>
 80066ee:	f8c8 7000 	str.w	r7, [r8]
 80066f2:	e00f      	b.n	8006714 <_malloc_r+0xa8>
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	1b52      	subs	r2, r2, r5
 80066f8:	d420      	bmi.n	800673c <_malloc_r+0xd0>
 80066fa:	2a0b      	cmp	r2, #11
 80066fc:	d917      	bls.n	800672e <_malloc_r+0xc2>
 80066fe:	1961      	adds	r1, r4, r5
 8006700:	42a3      	cmp	r3, r4
 8006702:	6025      	str	r5, [r4, #0]
 8006704:	bf18      	it	ne
 8006706:	6059      	strne	r1, [r3, #4]
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	bf08      	it	eq
 800670c:	f8c8 1000 	streq.w	r1, [r8]
 8006710:	5162      	str	r2, [r4, r5]
 8006712:	604b      	str	r3, [r1, #4]
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f82f 	bl	8006778 <__malloc_unlock>
 800671a:	f104 000b 	add.w	r0, r4, #11
 800671e:	1d23      	adds	r3, r4, #4
 8006720:	f020 0007 	bic.w	r0, r0, #7
 8006724:	1ac2      	subs	r2, r0, r3
 8006726:	bf1c      	itt	ne
 8006728:	1a1b      	subne	r3, r3, r0
 800672a:	50a3      	strne	r3, [r4, r2]
 800672c:	e7af      	b.n	800668e <_malloc_r+0x22>
 800672e:	6862      	ldr	r2, [r4, #4]
 8006730:	42a3      	cmp	r3, r4
 8006732:	bf0c      	ite	eq
 8006734:	f8c8 2000 	streq.w	r2, [r8]
 8006738:	605a      	strne	r2, [r3, #4]
 800673a:	e7eb      	b.n	8006714 <_malloc_r+0xa8>
 800673c:	4623      	mov	r3, r4
 800673e:	6864      	ldr	r4, [r4, #4]
 8006740:	e7ae      	b.n	80066a0 <_malloc_r+0x34>
 8006742:	463c      	mov	r4, r7
 8006744:	687f      	ldr	r7, [r7, #4]
 8006746:	e7b6      	b.n	80066b6 <_malloc_r+0x4a>
 8006748:	461a      	mov	r2, r3
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	42a3      	cmp	r3, r4
 800674e:	d1fb      	bne.n	8006748 <_malloc_r+0xdc>
 8006750:	2300      	movs	r3, #0
 8006752:	6053      	str	r3, [r2, #4]
 8006754:	e7de      	b.n	8006714 <_malloc_r+0xa8>
 8006756:	230c      	movs	r3, #12
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	4630      	mov	r0, r6
 800675c:	f000 f80c 	bl	8006778 <__malloc_unlock>
 8006760:	e794      	b.n	800668c <_malloc_r+0x20>
 8006762:	6005      	str	r5, [r0, #0]
 8006764:	e7d6      	b.n	8006714 <_malloc_r+0xa8>
 8006766:	bf00      	nop
 8006768:	200003fc 	.word	0x200003fc

0800676c <__malloc_lock>:
 800676c:	4801      	ldr	r0, [pc, #4]	@ (8006774 <__malloc_lock+0x8>)
 800676e:	f001 bf0e 	b.w	800858e <__retarget_lock_acquire_recursive>
 8006772:	bf00      	nop
 8006774:	20000540 	.word	0x20000540

08006778 <__malloc_unlock>:
 8006778:	4801      	ldr	r0, [pc, #4]	@ (8006780 <__malloc_unlock+0x8>)
 800677a:	f001 bf09 	b.w	8008590 <__retarget_lock_release_recursive>
 800677e:	bf00      	nop
 8006780:	20000540 	.word	0x20000540

08006784 <sulp>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4604      	mov	r4, r0
 8006788:	460d      	mov	r5, r1
 800678a:	ec45 4b10 	vmov	d0, r4, r5
 800678e:	4616      	mov	r6, r2
 8006790:	f003 fc74 	bl	800a07c <__ulp>
 8006794:	ec51 0b10 	vmov	r0, r1, d0
 8006798:	b17e      	cbz	r6, 80067ba <sulp+0x36>
 800679a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800679e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dd09      	ble.n	80067ba <sulp+0x36>
 80067a6:	051b      	lsls	r3, r3, #20
 80067a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80067ac:	2400      	movs	r4, #0
 80067ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 ff27 	bl	8000608 <__aeabi_dmul>
 80067ba:	ec41 0b10 	vmov	d0, r0, r1
 80067be:	bd70      	pop	{r4, r5, r6, pc}

080067c0 <_strtod_l>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b09f      	sub	sp, #124	@ 0x7c
 80067c6:	460c      	mov	r4, r1
 80067c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80067ca:	2200      	movs	r2, #0
 80067cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80067ce:	9005      	str	r0, [sp, #20]
 80067d0:	f04f 0a00 	mov.w	sl, #0
 80067d4:	f04f 0b00 	mov.w	fp, #0
 80067d8:	460a      	mov	r2, r1
 80067da:	9219      	str	r2, [sp, #100]	@ 0x64
 80067dc:	7811      	ldrb	r1, [r2, #0]
 80067de:	292b      	cmp	r1, #43	@ 0x2b
 80067e0:	d04a      	beq.n	8006878 <_strtod_l+0xb8>
 80067e2:	d838      	bhi.n	8006856 <_strtod_l+0x96>
 80067e4:	290d      	cmp	r1, #13
 80067e6:	d832      	bhi.n	800684e <_strtod_l+0x8e>
 80067e8:	2908      	cmp	r1, #8
 80067ea:	d832      	bhi.n	8006852 <_strtod_l+0x92>
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d03b      	beq.n	8006868 <_strtod_l+0xa8>
 80067f0:	2200      	movs	r2, #0
 80067f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80067f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80067f6:	782a      	ldrb	r2, [r5, #0]
 80067f8:	2a30      	cmp	r2, #48	@ 0x30
 80067fa:	f040 80b3 	bne.w	8006964 <_strtod_l+0x1a4>
 80067fe:	786a      	ldrb	r2, [r5, #1]
 8006800:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006804:	2a58      	cmp	r2, #88	@ 0x58
 8006806:	d16e      	bne.n	80068e6 <_strtod_l+0x126>
 8006808:	9302      	str	r3, [sp, #8]
 800680a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4a8e      	ldr	r2, [pc, #568]	@ (8006a4c <_strtod_l+0x28c>)
 8006814:	9805      	ldr	r0, [sp, #20]
 8006816:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006818:	a919      	add	r1, sp, #100	@ 0x64
 800681a:	f002 fdd7 	bl	80093cc <__gethex>
 800681e:	f010 060f 	ands.w	r6, r0, #15
 8006822:	4604      	mov	r4, r0
 8006824:	d005      	beq.n	8006832 <_strtod_l+0x72>
 8006826:	2e06      	cmp	r6, #6
 8006828:	d128      	bne.n	800687c <_strtod_l+0xbc>
 800682a:	3501      	adds	r5, #1
 800682c:	2300      	movs	r3, #0
 800682e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 858e 	bne.w	8007356 <_strtod_l+0xb96>
 800683a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800683c:	b1cb      	cbz	r3, 8006872 <_strtod_l+0xb2>
 800683e:	4652      	mov	r2, sl
 8006840:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006844:	ec43 2b10 	vmov	d0, r2, r3
 8006848:	b01f      	add	sp, #124	@ 0x7c
 800684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684e:	2920      	cmp	r1, #32
 8006850:	d1ce      	bne.n	80067f0 <_strtod_l+0x30>
 8006852:	3201      	adds	r2, #1
 8006854:	e7c1      	b.n	80067da <_strtod_l+0x1a>
 8006856:	292d      	cmp	r1, #45	@ 0x2d
 8006858:	d1ca      	bne.n	80067f0 <_strtod_l+0x30>
 800685a:	2101      	movs	r1, #1
 800685c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800685e:	1c51      	adds	r1, r2, #1
 8006860:	9119      	str	r1, [sp, #100]	@ 0x64
 8006862:	7852      	ldrb	r2, [r2, #1]
 8006864:	2a00      	cmp	r2, #0
 8006866:	d1c5      	bne.n	80067f4 <_strtod_l+0x34>
 8006868:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800686a:	9419      	str	r4, [sp, #100]	@ 0x64
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 8570 	bne.w	8007352 <_strtod_l+0xb92>
 8006872:	4652      	mov	r2, sl
 8006874:	465b      	mov	r3, fp
 8006876:	e7e5      	b.n	8006844 <_strtod_l+0x84>
 8006878:	2100      	movs	r1, #0
 800687a:	e7ef      	b.n	800685c <_strtod_l+0x9c>
 800687c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800687e:	b13a      	cbz	r2, 8006890 <_strtod_l+0xd0>
 8006880:	2135      	movs	r1, #53	@ 0x35
 8006882:	a81c      	add	r0, sp, #112	@ 0x70
 8006884:	f003 fcf4 	bl	800a270 <__copybits>
 8006888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800688a:	9805      	ldr	r0, [sp, #20]
 800688c:	f003 f8c2 	bl	8009a14 <_Bfree>
 8006890:	3e01      	subs	r6, #1
 8006892:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006894:	2e04      	cmp	r6, #4
 8006896:	d806      	bhi.n	80068a6 <_strtod_l+0xe6>
 8006898:	e8df f006 	tbb	[pc, r6]
 800689c:	201d0314 	.word	0x201d0314
 80068a0:	14          	.byte	0x14
 80068a1:	00          	.byte	0x00
 80068a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80068a6:	05e1      	lsls	r1, r4, #23
 80068a8:	bf48      	it	mi
 80068aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80068ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068b2:	0d1b      	lsrs	r3, r3, #20
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1bb      	bne.n	8006832 <_strtod_l+0x72>
 80068ba:	f001 fe3d 	bl	8008538 <__errno>
 80068be:	2322      	movs	r3, #34	@ 0x22
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	e7b6      	b.n	8006832 <_strtod_l+0x72>
 80068c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80068c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80068cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068d4:	e7e7      	b.n	80068a6 <_strtod_l+0xe6>
 80068d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006a54 <_strtod_l+0x294>
 80068da:	e7e4      	b.n	80068a6 <_strtod_l+0xe6>
 80068dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068e0:	f04f 3aff 	mov.w	sl, #4294967295
 80068e4:	e7df      	b.n	80068a6 <_strtod_l+0xe6>
 80068e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b30      	cmp	r3, #48	@ 0x30
 80068f0:	d0f9      	beq.n	80068e6 <_strtod_l+0x126>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d09d      	beq.n	8006832 <_strtod_l+0x72>
 80068f6:	2301      	movs	r3, #1
 80068f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80068fe:	2300      	movs	r3, #0
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	930a      	str	r3, [sp, #40]	@ 0x28
 8006904:	461f      	mov	r7, r3
 8006906:	220a      	movs	r2, #10
 8006908:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800690a:	7805      	ldrb	r5, [r0, #0]
 800690c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006910:	b2d9      	uxtb	r1, r3
 8006912:	2909      	cmp	r1, #9
 8006914:	d928      	bls.n	8006968 <_strtod_l+0x1a8>
 8006916:	494e      	ldr	r1, [pc, #312]	@ (8006a50 <_strtod_l+0x290>)
 8006918:	2201      	movs	r2, #1
 800691a:	f001 fda1 	bl	8008460 <strncmp>
 800691e:	2800      	cmp	r0, #0
 8006920:	d032      	beq.n	8006988 <_strtod_l+0x1c8>
 8006922:	2000      	movs	r0, #0
 8006924:	462a      	mov	r2, r5
 8006926:	4681      	mov	r9, r0
 8006928:	463d      	mov	r5, r7
 800692a:	4603      	mov	r3, r0
 800692c:	2a65      	cmp	r2, #101	@ 0x65
 800692e:	d001      	beq.n	8006934 <_strtod_l+0x174>
 8006930:	2a45      	cmp	r2, #69	@ 0x45
 8006932:	d114      	bne.n	800695e <_strtod_l+0x19e>
 8006934:	b91d      	cbnz	r5, 800693e <_strtod_l+0x17e>
 8006936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006938:	4302      	orrs	r2, r0
 800693a:	d095      	beq.n	8006868 <_strtod_l+0xa8>
 800693c:	2500      	movs	r5, #0
 800693e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006940:	1c62      	adds	r2, r4, #1
 8006942:	9219      	str	r2, [sp, #100]	@ 0x64
 8006944:	7862      	ldrb	r2, [r4, #1]
 8006946:	2a2b      	cmp	r2, #43	@ 0x2b
 8006948:	d077      	beq.n	8006a3a <_strtod_l+0x27a>
 800694a:	2a2d      	cmp	r2, #45	@ 0x2d
 800694c:	d07b      	beq.n	8006a46 <_strtod_l+0x286>
 800694e:	f04f 0c00 	mov.w	ip, #0
 8006952:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006956:	2909      	cmp	r1, #9
 8006958:	f240 8082 	bls.w	8006a60 <_strtod_l+0x2a0>
 800695c:	9419      	str	r4, [sp, #100]	@ 0x64
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	e0a2      	b.n	8006aaa <_strtod_l+0x2ea>
 8006964:	2300      	movs	r3, #0
 8006966:	e7c7      	b.n	80068f8 <_strtod_l+0x138>
 8006968:	2f08      	cmp	r7, #8
 800696a:	bfd5      	itete	le
 800696c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800696e:	9908      	ldrgt	r1, [sp, #32]
 8006970:	fb02 3301 	mlale	r3, r2, r1, r3
 8006974:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006978:	f100 0001 	add.w	r0, r0, #1
 800697c:	bfd4      	ite	le
 800697e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006980:	9308      	strgt	r3, [sp, #32]
 8006982:	3701      	adds	r7, #1
 8006984:	9019      	str	r0, [sp, #100]	@ 0x64
 8006986:	e7bf      	b.n	8006908 <_strtod_l+0x148>
 8006988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	9219      	str	r2, [sp, #100]	@ 0x64
 800698e:	785a      	ldrb	r2, [r3, #1]
 8006990:	b37f      	cbz	r7, 80069f2 <_strtod_l+0x232>
 8006992:	4681      	mov	r9, r0
 8006994:	463d      	mov	r5, r7
 8006996:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800699a:	2b09      	cmp	r3, #9
 800699c:	d912      	bls.n	80069c4 <_strtod_l+0x204>
 800699e:	2301      	movs	r3, #1
 80069a0:	e7c4      	b.n	800692c <_strtod_l+0x16c>
 80069a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80069a8:	785a      	ldrb	r2, [r3, #1]
 80069aa:	3001      	adds	r0, #1
 80069ac:	2a30      	cmp	r2, #48	@ 0x30
 80069ae:	d0f8      	beq.n	80069a2 <_strtod_l+0x1e2>
 80069b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	f200 84d3 	bhi.w	8007360 <_strtod_l+0xba0>
 80069ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80069be:	4681      	mov	r9, r0
 80069c0:	2000      	movs	r0, #0
 80069c2:	4605      	mov	r5, r0
 80069c4:	3a30      	subs	r2, #48	@ 0x30
 80069c6:	f100 0301 	add.w	r3, r0, #1
 80069ca:	d02a      	beq.n	8006a22 <_strtod_l+0x262>
 80069cc:	4499      	add	r9, r3
 80069ce:	eb00 0c05 	add.w	ip, r0, r5
 80069d2:	462b      	mov	r3, r5
 80069d4:	210a      	movs	r1, #10
 80069d6:	4563      	cmp	r3, ip
 80069d8:	d10d      	bne.n	80069f6 <_strtod_l+0x236>
 80069da:	1c69      	adds	r1, r5, #1
 80069dc:	4401      	add	r1, r0
 80069de:	4428      	add	r0, r5
 80069e0:	2808      	cmp	r0, #8
 80069e2:	dc16      	bgt.n	8006a12 <_strtod_l+0x252>
 80069e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069e6:	230a      	movs	r3, #10
 80069e8:	fb03 2300 	mla	r3, r3, r0, r2
 80069ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ee:	2300      	movs	r3, #0
 80069f0:	e018      	b.n	8006a24 <_strtod_l+0x264>
 80069f2:	4638      	mov	r0, r7
 80069f4:	e7da      	b.n	80069ac <_strtod_l+0x1ec>
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	f103 0301 	add.w	r3, r3, #1
 80069fc:	dc03      	bgt.n	8006a06 <_strtod_l+0x246>
 80069fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006a00:	434e      	muls	r6, r1
 8006a02:	960a      	str	r6, [sp, #40]	@ 0x28
 8006a04:	e7e7      	b.n	80069d6 <_strtod_l+0x216>
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	bfde      	ittt	le
 8006a0a:	9e08      	ldrle	r6, [sp, #32]
 8006a0c:	434e      	mulle	r6, r1
 8006a0e:	9608      	strle	r6, [sp, #32]
 8006a10:	e7e1      	b.n	80069d6 <_strtod_l+0x216>
 8006a12:	280f      	cmp	r0, #15
 8006a14:	dceb      	bgt.n	80069ee <_strtod_l+0x22e>
 8006a16:	9808      	ldr	r0, [sp, #32]
 8006a18:	230a      	movs	r3, #10
 8006a1a:	fb03 2300 	mla	r3, r3, r0, r2
 8006a1e:	9308      	str	r3, [sp, #32]
 8006a20:	e7e5      	b.n	80069ee <_strtod_l+0x22e>
 8006a22:	4629      	mov	r1, r5
 8006a24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a26:	1c50      	adds	r0, r2, #1
 8006a28:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a2a:	7852      	ldrb	r2, [r2, #1]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	460d      	mov	r5, r1
 8006a30:	e7b1      	b.n	8006996 <_strtod_l+0x1d6>
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	2301      	movs	r3, #1
 8006a38:	e77d      	b.n	8006936 <_strtod_l+0x176>
 8006a3a:	f04f 0c00 	mov.w	ip, #0
 8006a3e:	1ca2      	adds	r2, r4, #2
 8006a40:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a42:	78a2      	ldrb	r2, [r4, #2]
 8006a44:	e785      	b.n	8006952 <_strtod_l+0x192>
 8006a46:	f04f 0c01 	mov.w	ip, #1
 8006a4a:	e7f8      	b.n	8006a3e <_strtod_l+0x27e>
 8006a4c:	0800b370 	.word	0x0800b370
 8006a50:	0800b358 	.word	0x0800b358
 8006a54:	7ff00000 	.word	0x7ff00000
 8006a58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a5a:	1c51      	adds	r1, r2, #1
 8006a5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a5e:	7852      	ldrb	r2, [r2, #1]
 8006a60:	2a30      	cmp	r2, #48	@ 0x30
 8006a62:	d0f9      	beq.n	8006a58 <_strtod_l+0x298>
 8006a64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a68:	2908      	cmp	r1, #8
 8006a6a:	f63f af78 	bhi.w	800695e <_strtod_l+0x19e>
 8006a6e:	3a30      	subs	r2, #48	@ 0x30
 8006a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a74:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a76:	f04f 080a 	mov.w	r8, #10
 8006a7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a7c:	1c56      	adds	r6, r2, #1
 8006a7e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a80:	7852      	ldrb	r2, [r2, #1]
 8006a82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a86:	f1be 0f09 	cmp.w	lr, #9
 8006a8a:	d939      	bls.n	8006b00 <_strtod_l+0x340>
 8006a8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a8e:	1a76      	subs	r6, r6, r1
 8006a90:	2e08      	cmp	r6, #8
 8006a92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a96:	dc03      	bgt.n	8006aa0 <_strtod_l+0x2e0>
 8006a98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a9a:	4588      	cmp	r8, r1
 8006a9c:	bfa8      	it	ge
 8006a9e:	4688      	movge	r8, r1
 8006aa0:	f1bc 0f00 	cmp.w	ip, #0
 8006aa4:	d001      	beq.n	8006aaa <_strtod_l+0x2ea>
 8006aa6:	f1c8 0800 	rsb	r8, r8, #0
 8006aaa:	2d00      	cmp	r5, #0
 8006aac:	d14e      	bne.n	8006b4c <_strtod_l+0x38c>
 8006aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ab0:	4308      	orrs	r0, r1
 8006ab2:	f47f aebe 	bne.w	8006832 <_strtod_l+0x72>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f47f aed6 	bne.w	8006868 <_strtod_l+0xa8>
 8006abc:	2a69      	cmp	r2, #105	@ 0x69
 8006abe:	d028      	beq.n	8006b12 <_strtod_l+0x352>
 8006ac0:	dc25      	bgt.n	8006b0e <_strtod_l+0x34e>
 8006ac2:	2a49      	cmp	r2, #73	@ 0x49
 8006ac4:	d025      	beq.n	8006b12 <_strtod_l+0x352>
 8006ac6:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ac8:	f47f aece 	bne.w	8006868 <_strtod_l+0xa8>
 8006acc:	499b      	ldr	r1, [pc, #620]	@ (8006d3c <_strtod_l+0x57c>)
 8006ace:	a819      	add	r0, sp, #100	@ 0x64
 8006ad0:	f002 fe9e 	bl	8009810 <__match>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f43f aec7 	beq.w	8006868 <_strtod_l+0xa8>
 8006ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b28      	cmp	r3, #40	@ 0x28
 8006ae0:	d12e      	bne.n	8006b40 <_strtod_l+0x380>
 8006ae2:	4997      	ldr	r1, [pc, #604]	@ (8006d40 <_strtod_l+0x580>)
 8006ae4:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ae6:	a819      	add	r0, sp, #100	@ 0x64
 8006ae8:	f002 fea6 	bl	8009838 <__hexnan>
 8006aec:	2805      	cmp	r0, #5
 8006aee:	d127      	bne.n	8006b40 <_strtod_l+0x380>
 8006af0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006af2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006af6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006afa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006afe:	e698      	b.n	8006832 <_strtod_l+0x72>
 8006b00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b02:	fb08 2101 	mla	r1, r8, r1, r2
 8006b06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006b0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b0c:	e7b5      	b.n	8006a7a <_strtod_l+0x2ba>
 8006b0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006b10:	e7da      	b.n	8006ac8 <_strtod_l+0x308>
 8006b12:	498c      	ldr	r1, [pc, #560]	@ (8006d44 <_strtod_l+0x584>)
 8006b14:	a819      	add	r0, sp, #100	@ 0x64
 8006b16:	f002 fe7b 	bl	8009810 <__match>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f43f aea4 	beq.w	8006868 <_strtod_l+0xa8>
 8006b20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b22:	4989      	ldr	r1, [pc, #548]	@ (8006d48 <_strtod_l+0x588>)
 8006b24:	3b01      	subs	r3, #1
 8006b26:	a819      	add	r0, sp, #100	@ 0x64
 8006b28:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b2a:	f002 fe71 	bl	8009810 <__match>
 8006b2e:	b910      	cbnz	r0, 8006b36 <_strtod_l+0x376>
 8006b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b32:	3301      	adds	r3, #1
 8006b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006d58 <_strtod_l+0x598>
 8006b3a:	f04f 0a00 	mov.w	sl, #0
 8006b3e:	e678      	b.n	8006832 <_strtod_l+0x72>
 8006b40:	4882      	ldr	r0, [pc, #520]	@ (8006d4c <_strtod_l+0x58c>)
 8006b42:	f001 fd35 	bl	80085b0 <nan>
 8006b46:	ec5b ab10 	vmov	sl, fp, d0
 8006b4a:	e672      	b.n	8006832 <_strtod_l+0x72>
 8006b4c:	eba8 0309 	sub.w	r3, r8, r9
 8006b50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b54:	2f00      	cmp	r7, #0
 8006b56:	bf08      	it	eq
 8006b58:	462f      	moveq	r7, r5
 8006b5a:	2d10      	cmp	r5, #16
 8006b5c:	462c      	mov	r4, r5
 8006b5e:	bfa8      	it	ge
 8006b60:	2410      	movge	r4, #16
 8006b62:	f7f9 fcd7 	bl	8000514 <__aeabi_ui2d>
 8006b66:	2d09      	cmp	r5, #9
 8006b68:	4682      	mov	sl, r0
 8006b6a:	468b      	mov	fp, r1
 8006b6c:	dc13      	bgt.n	8006b96 <_strtod_l+0x3d6>
 8006b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f ae5e 	beq.w	8006832 <_strtod_l+0x72>
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	dd78      	ble.n	8006c6c <_strtod_l+0x4ac>
 8006b7a:	2b16      	cmp	r3, #22
 8006b7c:	dc5f      	bgt.n	8006c3e <_strtod_l+0x47e>
 8006b7e:	4974      	ldr	r1, [pc, #464]	@ (8006d50 <_strtod_l+0x590>)
 8006b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b88:	4652      	mov	r2, sl
 8006b8a:	465b      	mov	r3, fp
 8006b8c:	f7f9 fd3c 	bl	8000608 <__aeabi_dmul>
 8006b90:	4682      	mov	sl, r0
 8006b92:	468b      	mov	fp, r1
 8006b94:	e64d      	b.n	8006832 <_strtod_l+0x72>
 8006b96:	4b6e      	ldr	r3, [pc, #440]	@ (8006d50 <_strtod_l+0x590>)
 8006b98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ba0:	f7f9 fd32 	bl	8000608 <__aeabi_dmul>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	9808      	ldr	r0, [sp, #32]
 8006ba8:	468b      	mov	fp, r1
 8006baa:	f7f9 fcb3 	bl	8000514 <__aeabi_ui2d>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	f7f9 fb71 	bl	800029c <__adddf3>
 8006bba:	2d0f      	cmp	r5, #15
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	468b      	mov	fp, r1
 8006bc0:	ddd5      	ble.n	8006b6e <_strtod_l+0x3ae>
 8006bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc4:	1b2c      	subs	r4, r5, r4
 8006bc6:	441c      	add	r4, r3
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	f340 8096 	ble.w	8006cfa <_strtod_l+0x53a>
 8006bce:	f014 030f 	ands.w	r3, r4, #15
 8006bd2:	d00a      	beq.n	8006bea <_strtod_l+0x42a>
 8006bd4:	495e      	ldr	r1, [pc, #376]	@ (8006d50 <_strtod_l+0x590>)
 8006bd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bda:	4652      	mov	r2, sl
 8006bdc:	465b      	mov	r3, fp
 8006bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be2:	f7f9 fd11 	bl	8000608 <__aeabi_dmul>
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	f034 040f 	bics.w	r4, r4, #15
 8006bee:	d073      	beq.n	8006cd8 <_strtod_l+0x518>
 8006bf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006bf4:	dd48      	ble.n	8006c88 <_strtod_l+0x4c8>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	46a0      	mov	r8, r4
 8006bfa:	940a      	str	r4, [sp, #40]	@ 0x28
 8006bfc:	46a1      	mov	r9, r4
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006d58 <_strtod_l+0x598>
 8006c04:	2322      	movs	r3, #34	@ 0x22
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	f04f 0a00 	mov.w	sl, #0
 8006c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f43f ae0f 	beq.w	8006832 <_strtod_l+0x72>
 8006c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c16:	9805      	ldr	r0, [sp, #20]
 8006c18:	f002 fefc 	bl	8009a14 <_Bfree>
 8006c1c:	9805      	ldr	r0, [sp, #20]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f002 fef8 	bl	8009a14 <_Bfree>
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	4641      	mov	r1, r8
 8006c28:	f002 fef4 	bl	8009a14 <_Bfree>
 8006c2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c2e:	9805      	ldr	r0, [sp, #20]
 8006c30:	f002 fef0 	bl	8009a14 <_Bfree>
 8006c34:	9805      	ldr	r0, [sp, #20]
 8006c36:	4621      	mov	r1, r4
 8006c38:	f002 feec 	bl	8009a14 <_Bfree>
 8006c3c:	e5f9      	b.n	8006832 <_strtod_l+0x72>
 8006c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c44:	4293      	cmp	r3, r2
 8006c46:	dbbc      	blt.n	8006bc2 <_strtod_l+0x402>
 8006c48:	4c41      	ldr	r4, [pc, #260]	@ (8006d50 <_strtod_l+0x590>)
 8006c4a:	f1c5 050f 	rsb	r5, r5, #15
 8006c4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c5a:	f7f9 fcd5 	bl	8000608 <__aeabi_dmul>
 8006c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c60:	1b5d      	subs	r5, r3, r5
 8006c62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c6a:	e78f      	b.n	8006b8c <_strtod_l+0x3cc>
 8006c6c:	3316      	adds	r3, #22
 8006c6e:	dba8      	blt.n	8006bc2 <_strtod_l+0x402>
 8006c70:	4b37      	ldr	r3, [pc, #220]	@ (8006d50 <_strtod_l+0x590>)
 8006c72:	eba9 0808 	sub.w	r8, r9, r8
 8006c76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c7e:	4650      	mov	r0, sl
 8006c80:	4659      	mov	r1, fp
 8006c82:	f7f9 fdeb 	bl	800085c <__aeabi_ddiv>
 8006c86:	e783      	b.n	8006b90 <_strtod_l+0x3d0>
 8006c88:	4b32      	ldr	r3, [pc, #200]	@ (8006d54 <_strtod_l+0x594>)
 8006c8a:	9308      	str	r3, [sp, #32]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	1124      	asrs	r4, r4, #4
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	461e      	mov	r6, r3
 8006c96:	2c01      	cmp	r4, #1
 8006c98:	dc21      	bgt.n	8006cde <_strtod_l+0x51e>
 8006c9a:	b10b      	cbz	r3, 8006ca0 <_strtod_l+0x4e0>
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	468b      	mov	fp, r1
 8006ca0:	492c      	ldr	r1, [pc, #176]	@ (8006d54 <_strtod_l+0x594>)
 8006ca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006ca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006caa:	4652      	mov	r2, sl
 8006cac:	465b      	mov	r3, fp
 8006cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4b28      	ldr	r3, [pc, #160]	@ (8006d58 <_strtod_l+0x598>)
 8006cb8:	460a      	mov	r2, r1
 8006cba:	400b      	ands	r3, r1
 8006cbc:	4927      	ldr	r1, [pc, #156]	@ (8006d5c <_strtod_l+0x59c>)
 8006cbe:	428b      	cmp	r3, r1
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	d898      	bhi.n	8006bf6 <_strtod_l+0x436>
 8006cc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf86      	itte	hi
 8006ccc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006d60 <_strtod_l+0x5a0>
 8006cd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8006cd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9308      	str	r3, [sp, #32]
 8006cdc:	e07a      	b.n	8006dd4 <_strtod_l+0x614>
 8006cde:	07e2      	lsls	r2, r4, #31
 8006ce0:	d505      	bpl.n	8006cee <_strtod_l+0x52e>
 8006ce2:	9b08      	ldr	r3, [sp, #32]
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fc8e 	bl	8000608 <__aeabi_dmul>
 8006cec:	2301      	movs	r3, #1
 8006cee:	9a08      	ldr	r2, [sp, #32]
 8006cf0:	3208      	adds	r2, #8
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	1064      	asrs	r4, r4, #1
 8006cf6:	9208      	str	r2, [sp, #32]
 8006cf8:	e7cd      	b.n	8006c96 <_strtod_l+0x4d6>
 8006cfa:	d0ed      	beq.n	8006cd8 <_strtod_l+0x518>
 8006cfc:	4264      	negs	r4, r4
 8006cfe:	f014 020f 	ands.w	r2, r4, #15
 8006d02:	d00a      	beq.n	8006d1a <_strtod_l+0x55a>
 8006d04:	4b12      	ldr	r3, [pc, #72]	@ (8006d50 <_strtod_l+0x590>)
 8006d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fda3 	bl	800085c <__aeabi_ddiv>
 8006d16:	4682      	mov	sl, r0
 8006d18:	468b      	mov	fp, r1
 8006d1a:	1124      	asrs	r4, r4, #4
 8006d1c:	d0dc      	beq.n	8006cd8 <_strtod_l+0x518>
 8006d1e:	2c1f      	cmp	r4, #31
 8006d20:	dd20      	ble.n	8006d64 <_strtod_l+0x5a4>
 8006d22:	2400      	movs	r4, #0
 8006d24:	46a0      	mov	r8, r4
 8006d26:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d28:	46a1      	mov	r9, r4
 8006d2a:	9a05      	ldr	r2, [sp, #20]
 8006d2c:	2322      	movs	r3, #34	@ 0x22
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	f04f 0b00 	mov.w	fp, #0
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e768      	b.n	8006c0c <_strtod_l+0x44c>
 8006d3a:	bf00      	nop
 8006d3c:	0800b3bd 	.word	0x0800b3bd
 8006d40:	0800b35c 	.word	0x0800b35c
 8006d44:	0800b3b5 	.word	0x0800b3b5
 8006d48:	0800b3f4 	.word	0x0800b3f4
 8006d4c:	0800b785 	.word	0x0800b785
 8006d50:	0800b570 	.word	0x0800b570
 8006d54:	0800b548 	.word	0x0800b548
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	7ca00000 	.word	0x7ca00000
 8006d60:	7fefffff 	.word	0x7fefffff
 8006d64:	f014 0310 	ands.w	r3, r4, #16
 8006d68:	bf18      	it	ne
 8006d6a:	236a      	movne	r3, #106	@ 0x6a
 8006d6c:	4ea9      	ldr	r6, [pc, #676]	@ (8007014 <_strtod_l+0x854>)
 8006d6e:	9308      	str	r3, [sp, #32]
 8006d70:	4650      	mov	r0, sl
 8006d72:	4659      	mov	r1, fp
 8006d74:	2300      	movs	r3, #0
 8006d76:	07e2      	lsls	r2, r4, #31
 8006d78:	d504      	bpl.n	8006d84 <_strtod_l+0x5c4>
 8006d7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d7e:	f7f9 fc43 	bl	8000608 <__aeabi_dmul>
 8006d82:	2301      	movs	r3, #1
 8006d84:	1064      	asrs	r4, r4, #1
 8006d86:	f106 0608 	add.w	r6, r6, #8
 8006d8a:	d1f4      	bne.n	8006d76 <_strtod_l+0x5b6>
 8006d8c:	b10b      	cbz	r3, 8006d92 <_strtod_l+0x5d2>
 8006d8e:	4682      	mov	sl, r0
 8006d90:	468b      	mov	fp, r1
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	b1b3      	cbz	r3, 8006dc4 <_strtod_l+0x604>
 8006d96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	4659      	mov	r1, fp
 8006da2:	dd0f      	ble.n	8006dc4 <_strtod_l+0x604>
 8006da4:	2b1f      	cmp	r3, #31
 8006da6:	dd55      	ble.n	8006e54 <_strtod_l+0x694>
 8006da8:	2b34      	cmp	r3, #52	@ 0x34
 8006daa:	bfde      	ittt	le
 8006dac:	f04f 33ff 	movle.w	r3, #4294967295
 8006db0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006db4:	4093      	lslle	r3, r2
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	bfcc      	ite	gt
 8006dbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006dc0:	ea03 0b01 	andle.w	fp, r3, r1
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7f9 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1a6      	bne.n	8006d22 <_strtod_l+0x562>
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006dda:	9805      	ldr	r0, [sp, #20]
 8006ddc:	462b      	mov	r3, r5
 8006dde:	463a      	mov	r2, r7
 8006de0:	f002 fe80 	bl	8009ae4 <__s2b>
 8006de4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f af05 	beq.w	8006bf6 <_strtod_l+0x436>
 8006dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	eba9 0308 	sub.w	r3, r9, r8
 8006df4:	bfa8      	it	ge
 8006df6:	2300      	movge	r3, #0
 8006df8:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e00:	9316      	str	r3, [sp, #88]	@ 0x58
 8006e02:	46a0      	mov	r8, r4
 8006e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	6859      	ldr	r1, [r3, #4]
 8006e0a:	f002 fdc3 	bl	8009994 <_Balloc>
 8006e0e:	4681      	mov	r9, r0
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f43f aef4 	beq.w	8006bfe <_strtod_l+0x43e>
 8006e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	3202      	adds	r2, #2
 8006e1c:	f103 010c 	add.w	r1, r3, #12
 8006e20:	0092      	lsls	r2, r2, #2
 8006e22:	300c      	adds	r0, #12
 8006e24:	f001 fbb5 	bl	8008592 <memcpy>
 8006e28:	ec4b ab10 	vmov	d0, sl, fp
 8006e2c:	9805      	ldr	r0, [sp, #20]
 8006e2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e30:	a91b      	add	r1, sp, #108	@ 0x6c
 8006e32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e36:	f003 f991 	bl	800a15c <__d2b>
 8006e3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f43f aede 	beq.w	8006bfe <_strtod_l+0x43e>
 8006e42:	9805      	ldr	r0, [sp, #20]
 8006e44:	2101      	movs	r1, #1
 8006e46:	f002 fee3 	bl	8009c10 <__i2b>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	b948      	cbnz	r0, 8006e62 <_strtod_l+0x6a2>
 8006e4e:	f04f 0800 	mov.w	r8, #0
 8006e52:	e6d4      	b.n	8006bfe <_strtod_l+0x43e>
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	ea03 0a0a 	and.w	sl, r3, sl
 8006e60:	e7b0      	b.n	8006dc4 <_strtod_l+0x604>
 8006e62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	bfab      	itete	ge
 8006e6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e72:	bfac      	ite	ge
 8006e74:	18ef      	addge	r7, r5, r3
 8006e76:	1b5e      	sublt	r6, r3, r5
 8006e78:	9b08      	ldr	r3, [sp, #32]
 8006e7a:	1aed      	subs	r5, r5, r3
 8006e7c:	4415      	add	r5, r2
 8006e7e:	4b66      	ldr	r3, [pc, #408]	@ (8007018 <_strtod_l+0x858>)
 8006e80:	3d01      	subs	r5, #1
 8006e82:	429d      	cmp	r5, r3
 8006e84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e88:	da50      	bge.n	8006f2c <_strtod_l+0x76c>
 8006e8a:	1b5b      	subs	r3, r3, r5
 8006e8c:	2b1f      	cmp	r3, #31
 8006e8e:	eba2 0203 	sub.w	r2, r2, r3
 8006e92:	f04f 0101 	mov.w	r1, #1
 8006e96:	dc3d      	bgt.n	8006f14 <_strtod_l+0x754>
 8006e98:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ea2:	18bd      	adds	r5, r7, r2
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	42af      	cmp	r7, r5
 8006ea8:	4416      	add	r6, r2
 8006eaa:	441e      	add	r6, r3
 8006eac:	463b      	mov	r3, r7
 8006eae:	bfa8      	it	ge
 8006eb0:	462b      	movge	r3, r5
 8006eb2:	42b3      	cmp	r3, r6
 8006eb4:	bfa8      	it	ge
 8006eb6:	4633      	movge	r3, r6
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfc2      	ittt	gt
 8006ebc:	1aed      	subgt	r5, r5, r3
 8006ebe:	1af6      	subgt	r6, r6, r3
 8006ec0:	1aff      	subgt	r7, r7, r3
 8006ec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd16      	ble.n	8006ef6 <_strtod_l+0x736>
 8006ec8:	4641      	mov	r1, r8
 8006eca:	9805      	ldr	r0, [sp, #20]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f002 ff5f 	bl	8009d90 <__pow5mult>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d0ba      	beq.n	8006e4e <_strtod_l+0x68e>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006edc:	9805      	ldr	r0, [sp, #20]
 8006ede:	f002 fead 	bl	8009c3c <__multiply>
 8006ee2:	900e      	str	r0, [sp, #56]	@ 0x38
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f43f ae8a 	beq.w	8006bfe <_strtod_l+0x43e>
 8006eea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eec:	9805      	ldr	r0, [sp, #20]
 8006eee:	f002 fd91 	bl	8009a14 <_Bfree>
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	dc1d      	bgt.n	8006f36 <_strtod_l+0x776>
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd23      	ble.n	8006f48 <_strtod_l+0x788>
 8006f00:	4649      	mov	r1, r9
 8006f02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006f04:	9805      	ldr	r0, [sp, #20]
 8006f06:	f002 ff43 	bl	8009d90 <__pow5mult>
 8006f0a:	4681      	mov	r9, r0
 8006f0c:	b9e0      	cbnz	r0, 8006f48 <_strtod_l+0x788>
 8006f0e:	f04f 0900 	mov.w	r9, #0
 8006f12:	e674      	b.n	8006bfe <_strtod_l+0x43e>
 8006f14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006f18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006f1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006f20:	35e2      	adds	r5, #226	@ 0xe2
 8006f22:	fa01 f305 	lsl.w	r3, r1, r5
 8006f26:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006f2a:	e7ba      	b.n	8006ea2 <_strtod_l+0x6e2>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f30:	2301      	movs	r3, #1
 8006f32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f34:	e7b5      	b.n	8006ea2 <_strtod_l+0x6e2>
 8006f36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f38:	9805      	ldr	r0, [sp, #20]
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	f002 ff82 	bl	8009e44 <__lshift>
 8006f40:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1d9      	bne.n	8006efa <_strtod_l+0x73a>
 8006f46:	e65a      	b.n	8006bfe <_strtod_l+0x43e>
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	dd07      	ble.n	8006f5c <_strtod_l+0x79c>
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	9805      	ldr	r0, [sp, #20]
 8006f50:	4632      	mov	r2, r6
 8006f52:	f002 ff77 	bl	8009e44 <__lshift>
 8006f56:	4681      	mov	r9, r0
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0d8      	beq.n	8006f0e <_strtod_l+0x74e>
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	dd08      	ble.n	8006f72 <_strtod_l+0x7b2>
 8006f60:	4641      	mov	r1, r8
 8006f62:	9805      	ldr	r0, [sp, #20]
 8006f64:	463a      	mov	r2, r7
 8006f66:	f002 ff6d 	bl	8009e44 <__lshift>
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f43f ae46 	beq.w	8006bfe <_strtod_l+0x43e>
 8006f72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	464a      	mov	r2, r9
 8006f78:	f002 ffec 	bl	8009f54 <__mdiff>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f43f ae3d 	beq.w	8006bfe <_strtod_l+0x43e>
 8006f84:	68c3      	ldr	r3, [r0, #12]
 8006f86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60c3      	str	r3, [r0, #12]
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	f002 ffc5 	bl	8009f1c <__mcmp>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	da46      	bge.n	8007024 <_strtod_l+0x864>
 8006f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f98:	ea53 030a 	orrs.w	r3, r3, sl
 8006f9c:	d16c      	bne.n	8007078 <_strtod_l+0x8b8>
 8006f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d168      	bne.n	8007078 <_strtod_l+0x8b8>
 8006fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006faa:	0d1b      	lsrs	r3, r3, #20
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fb2:	d961      	bls.n	8007078 <_strtod_l+0x8b8>
 8006fb4:	6963      	ldr	r3, [r4, #20]
 8006fb6:	b913      	cbnz	r3, 8006fbe <_strtod_l+0x7fe>
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	dd5c      	ble.n	8007078 <_strtod_l+0x8b8>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	9805      	ldr	r0, [sp, #20]
 8006fc4:	f002 ff3e 	bl	8009e44 <__lshift>
 8006fc8:	4641      	mov	r1, r8
 8006fca:	4604      	mov	r4, r0
 8006fcc:	f002 ffa6 	bl	8009f1c <__mcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dd51      	ble.n	8007078 <_strtod_l+0x8b8>
 8006fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fd8:	9a08      	ldr	r2, [sp, #32]
 8006fda:	0d1b      	lsrs	r3, r3, #20
 8006fdc:	051b      	lsls	r3, r3, #20
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d06b      	beq.n	80070ba <_strtod_l+0x8fa>
 8006fe2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fe6:	d868      	bhi.n	80070ba <_strtod_l+0x8fa>
 8006fe8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006fec:	f67f ae9d 	bls.w	8006d2a <_strtod_l+0x56a>
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <_strtod_l+0x85c>)
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <_strtod_l+0x860>)
 8006ffe:	400b      	ands	r3, r1
 8007000:	4682      	mov	sl, r0
 8007002:	468b      	mov	fp, r1
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f ae05 	bne.w	8006c14 <_strtod_l+0x454>
 800700a:	9a05      	ldr	r2, [sp, #20]
 800700c:	2322      	movs	r3, #34	@ 0x22
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e600      	b.n	8006c14 <_strtod_l+0x454>
 8007012:	bf00      	nop
 8007014:	0800b388 	.word	0x0800b388
 8007018:	fffffc02 	.word	0xfffffc02
 800701c:	39500000 	.word	0x39500000
 8007020:	7ff00000 	.word	0x7ff00000
 8007024:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007028:	d165      	bne.n	80070f6 <_strtod_l+0x936>
 800702a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800702c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007030:	b35a      	cbz	r2, 800708a <_strtod_l+0x8ca>
 8007032:	4a9f      	ldr	r2, [pc, #636]	@ (80072b0 <_strtod_l+0xaf0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d12b      	bne.n	8007090 <_strtod_l+0x8d0>
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	4651      	mov	r1, sl
 800703c:	b303      	cbz	r3, 8007080 <_strtod_l+0x8c0>
 800703e:	4b9d      	ldr	r3, [pc, #628]	@ (80072b4 <_strtod_l+0xaf4>)
 8007040:	465a      	mov	r2, fp
 8007042:	4013      	ands	r3, r2
 8007044:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	d81b      	bhi.n	8007086 <_strtod_l+0x8c6>
 800704e:	0d1b      	lsrs	r3, r3, #20
 8007050:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	4299      	cmp	r1, r3
 800705a:	d119      	bne.n	8007090 <_strtod_l+0x8d0>
 800705c:	4b96      	ldr	r3, [pc, #600]	@ (80072b8 <_strtod_l+0xaf8>)
 800705e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007060:	429a      	cmp	r2, r3
 8007062:	d102      	bne.n	800706a <_strtod_l+0x8aa>
 8007064:	3101      	adds	r1, #1
 8007066:	f43f adca 	beq.w	8006bfe <_strtod_l+0x43e>
 800706a:	4b92      	ldr	r3, [pc, #584]	@ (80072b4 <_strtod_l+0xaf4>)
 800706c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800706e:	401a      	ands	r2, r3
 8007070:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007074:	f04f 0a00 	mov.w	sl, #0
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1b8      	bne.n	8006ff0 <_strtod_l+0x830>
 800707e:	e5c9      	b.n	8006c14 <_strtod_l+0x454>
 8007080:	f04f 33ff 	mov.w	r3, #4294967295
 8007084:	e7e8      	b.n	8007058 <_strtod_l+0x898>
 8007086:	4613      	mov	r3, r2
 8007088:	e7e6      	b.n	8007058 <_strtod_l+0x898>
 800708a:	ea53 030a 	orrs.w	r3, r3, sl
 800708e:	d0a1      	beq.n	8006fd4 <_strtod_l+0x814>
 8007090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007092:	b1db      	cbz	r3, 80070cc <_strtod_l+0x90c>
 8007094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007096:	4213      	tst	r3, r2
 8007098:	d0ee      	beq.n	8007078 <_strtod_l+0x8b8>
 800709a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709c:	9a08      	ldr	r2, [sp, #32]
 800709e:	4650      	mov	r0, sl
 80070a0:	4659      	mov	r1, fp
 80070a2:	b1bb      	cbz	r3, 80070d4 <_strtod_l+0x914>
 80070a4:	f7ff fb6e 	bl	8006784 <sulp>
 80070a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ac:	ec53 2b10 	vmov	r2, r3, d0
 80070b0:	f7f9 f8f4 	bl	800029c <__adddf3>
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	e7de      	b.n	8007078 <_strtod_l+0x8b8>
 80070ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80070be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070c6:	f04f 3aff 	mov.w	sl, #4294967295
 80070ca:	e7d5      	b.n	8007078 <_strtod_l+0x8b8>
 80070cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070ce:	ea13 0f0a 	tst.w	r3, sl
 80070d2:	e7e1      	b.n	8007098 <_strtod_l+0x8d8>
 80070d4:	f7ff fb56 	bl	8006784 <sulp>
 80070d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070dc:	ec53 2b10 	vmov	r2, r3, d0
 80070e0:	f7f9 f8da 	bl	8000298 <__aeabi_dsub>
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	4682      	mov	sl, r0
 80070ea:	468b      	mov	fp, r1
 80070ec:	f7f9 fcf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0c1      	beq.n	8007078 <_strtod_l+0x8b8>
 80070f4:	e619      	b.n	8006d2a <_strtod_l+0x56a>
 80070f6:	4641      	mov	r1, r8
 80070f8:	4620      	mov	r0, r4
 80070fa:	f003 f887 	bl	800a20c <__ratio>
 80070fe:	ec57 6b10 	vmov	r6, r7, d0
 8007102:	2200      	movs	r2, #0
 8007104:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 fcf8 	bl	8000b00 <__aeabi_dcmple>
 8007110:	2800      	cmp	r0, #0
 8007112:	d06f      	beq.n	80071f4 <_strtod_l+0xa34>
 8007114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d17a      	bne.n	8007210 <_strtod_l+0xa50>
 800711a:	f1ba 0f00 	cmp.w	sl, #0
 800711e:	d158      	bne.n	80071d2 <_strtod_l+0xa12>
 8007120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007126:	2b00      	cmp	r3, #0
 8007128:	d15a      	bne.n	80071e0 <_strtod_l+0xa20>
 800712a:	4b64      	ldr	r3, [pc, #400]	@ (80072bc <_strtod_l+0xafc>)
 800712c:	2200      	movs	r2, #0
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	d159      	bne.n	80071ee <_strtod_l+0xa2e>
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	4b60      	ldr	r3, [pc, #384]	@ (80072c0 <_strtod_l+0xb00>)
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 fa61 	bl	8000608 <__aeabi_dmul>
 8007146:	4606      	mov	r6, r0
 8007148:	460f      	mov	r7, r1
 800714a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800714e:	9606      	str	r6, [sp, #24]
 8007150:	9307      	str	r3, [sp, #28]
 8007152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007156:	4d57      	ldr	r5, [pc, #348]	@ (80072b4 <_strtod_l+0xaf4>)
 8007158:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800715c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800715e:	401d      	ands	r5, r3
 8007160:	4b58      	ldr	r3, [pc, #352]	@ (80072c4 <_strtod_l+0xb04>)
 8007162:	429d      	cmp	r5, r3
 8007164:	f040 80b2 	bne.w	80072cc <_strtod_l+0xb0c>
 8007168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800716a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800716e:	ec4b ab10 	vmov	d0, sl, fp
 8007172:	f002 ff83 	bl	800a07c <__ulp>
 8007176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800717a:	ec51 0b10 	vmov	r0, r1, d0
 800717e:	f7f9 fa43 	bl	8000608 <__aeabi_dmul>
 8007182:	4652      	mov	r2, sl
 8007184:	465b      	mov	r3, fp
 8007186:	f7f9 f889 	bl	800029c <__adddf3>
 800718a:	460b      	mov	r3, r1
 800718c:	4949      	ldr	r1, [pc, #292]	@ (80072b4 <_strtod_l+0xaf4>)
 800718e:	4a4e      	ldr	r2, [pc, #312]	@ (80072c8 <_strtod_l+0xb08>)
 8007190:	4019      	ands	r1, r3
 8007192:	4291      	cmp	r1, r2
 8007194:	4682      	mov	sl, r0
 8007196:	d942      	bls.n	800721e <_strtod_l+0xa5e>
 8007198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800719a:	4b47      	ldr	r3, [pc, #284]	@ (80072b8 <_strtod_l+0xaf8>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d103      	bne.n	80071a8 <_strtod_l+0x9e8>
 80071a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071a2:	3301      	adds	r3, #1
 80071a4:	f43f ad2b 	beq.w	8006bfe <_strtod_l+0x43e>
 80071a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80072b8 <_strtod_l+0xaf8>
 80071ac:	f04f 3aff 	mov.w	sl, #4294967295
 80071b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071b2:	9805      	ldr	r0, [sp, #20]
 80071b4:	f002 fc2e 	bl	8009a14 <_Bfree>
 80071b8:	9805      	ldr	r0, [sp, #20]
 80071ba:	4649      	mov	r1, r9
 80071bc:	f002 fc2a 	bl	8009a14 <_Bfree>
 80071c0:	9805      	ldr	r0, [sp, #20]
 80071c2:	4641      	mov	r1, r8
 80071c4:	f002 fc26 	bl	8009a14 <_Bfree>
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	4621      	mov	r1, r4
 80071cc:	f002 fc22 	bl	8009a14 <_Bfree>
 80071d0:	e618      	b.n	8006e04 <_strtod_l+0x644>
 80071d2:	f1ba 0f01 	cmp.w	sl, #1
 80071d6:	d103      	bne.n	80071e0 <_strtod_l+0xa20>
 80071d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f43f ada5 	beq.w	8006d2a <_strtod_l+0x56a>
 80071e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007290 <_strtod_l+0xad0>
 80071e4:	4f35      	ldr	r7, [pc, #212]	@ (80072bc <_strtod_l+0xafc>)
 80071e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071ea:	2600      	movs	r6, #0
 80071ec:	e7b1      	b.n	8007152 <_strtod_l+0x992>
 80071ee:	4f34      	ldr	r7, [pc, #208]	@ (80072c0 <_strtod_l+0xb00>)
 80071f0:	2600      	movs	r6, #0
 80071f2:	e7aa      	b.n	800714a <_strtod_l+0x98a>
 80071f4:	4b32      	ldr	r3, [pc, #200]	@ (80072c0 <_strtod_l+0xb00>)
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	2200      	movs	r2, #0
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d09f      	beq.n	800714a <_strtod_l+0x98a>
 800720a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800720e:	e7a0      	b.n	8007152 <_strtod_l+0x992>
 8007210:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007298 <_strtod_l+0xad8>
 8007214:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007218:	ec57 6b17 	vmov	r6, r7, d7
 800721c:	e799      	b.n	8007152 <_strtod_l+0x992>
 800721e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1c1      	bne.n	80071b0 <_strtod_l+0x9f0>
 800722c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007230:	0d1b      	lsrs	r3, r3, #20
 8007232:	051b      	lsls	r3, r3, #20
 8007234:	429d      	cmp	r5, r3
 8007236:	d1bb      	bne.n	80071b0 <_strtod_l+0x9f0>
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fe52 	bl	8000ee4 <__aeabi_d2lz>
 8007240:	f7f9 f9b4 	bl	80005ac <__aeabi_l2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 f824 	bl	8000298 <__aeabi_dsub>
 8007250:	460b      	mov	r3, r1
 8007252:	4602      	mov	r2, r0
 8007254:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007258:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800725c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800725e:	ea46 060a 	orr.w	r6, r6, sl
 8007262:	431e      	orrs	r6, r3
 8007264:	d06f      	beq.n	8007346 <_strtod_l+0xb86>
 8007266:	a30e      	add	r3, pc, #56	@ (adr r3, 80072a0 <_strtod_l+0xae0>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 fc3e 	bl	8000aec <__aeabi_dcmplt>
 8007270:	2800      	cmp	r0, #0
 8007272:	f47f accf 	bne.w	8006c14 <_strtod_l+0x454>
 8007276:	a30c      	add	r3, pc, #48	@ (adr r3, 80072a8 <_strtod_l+0xae8>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007280:	f7f9 fc52 	bl	8000b28 <__aeabi_dcmpgt>
 8007284:	2800      	cmp	r0, #0
 8007286:	d093      	beq.n	80071b0 <_strtod_l+0x9f0>
 8007288:	e4c4      	b.n	8006c14 <_strtod_l+0x454>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	00000000 	.word	0x00000000
 8007294:	bff00000 	.word	0xbff00000
 8007298:	00000000 	.word	0x00000000
 800729c:	3ff00000 	.word	0x3ff00000
 80072a0:	94a03595 	.word	0x94a03595
 80072a4:	3fdfffff 	.word	0x3fdfffff
 80072a8:	35afe535 	.word	0x35afe535
 80072ac:	3fe00000 	.word	0x3fe00000
 80072b0:	000fffff 	.word	0x000fffff
 80072b4:	7ff00000 	.word	0x7ff00000
 80072b8:	7fefffff 	.word	0x7fefffff
 80072bc:	3ff00000 	.word	0x3ff00000
 80072c0:	3fe00000 	.word	0x3fe00000
 80072c4:	7fe00000 	.word	0x7fe00000
 80072c8:	7c9fffff 	.word	0x7c9fffff
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	b323      	cbz	r3, 800731a <_strtod_l+0xb5a>
 80072d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80072d4:	d821      	bhi.n	800731a <_strtod_l+0xb5a>
 80072d6:	a328      	add	r3, pc, #160	@ (adr r3, 8007378 <_strtod_l+0xbb8>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f9 fc0e 	bl	8000b00 <__aeabi_dcmple>
 80072e4:	b1a0      	cbz	r0, 8007310 <_strtod_l+0xb50>
 80072e6:	4639      	mov	r1, r7
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7f9 fc65 	bl	8000bb8 <__aeabi_d2uiz>
 80072ee:	2801      	cmp	r0, #1
 80072f0:	bf38      	it	cc
 80072f2:	2001      	movcc	r0, #1
 80072f4:	f7f9 f90e 	bl	8000514 <__aeabi_ui2d>
 80072f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	b9fb      	cbnz	r3, 8007340 <_strtod_l+0xb80>
 8007300:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007304:	9014      	str	r0, [sp, #80]	@ 0x50
 8007306:	9315      	str	r3, [sp, #84]	@ 0x54
 8007308:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800730c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007310:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007312:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007316:	1b5b      	subs	r3, r3, r5
 8007318:	9311      	str	r3, [sp, #68]	@ 0x44
 800731a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800731e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007322:	f002 feab 	bl	800a07c <__ulp>
 8007326:	4650      	mov	r0, sl
 8007328:	ec53 2b10 	vmov	r2, r3, d0
 800732c:	4659      	mov	r1, fp
 800732e:	f7f9 f96b 	bl	8000608 <__aeabi_dmul>
 8007332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007336:	f7f8 ffb1 	bl	800029c <__adddf3>
 800733a:	4682      	mov	sl, r0
 800733c:	468b      	mov	fp, r1
 800733e:	e770      	b.n	8007222 <_strtod_l+0xa62>
 8007340:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007344:	e7e0      	b.n	8007308 <_strtod_l+0xb48>
 8007346:	a30e      	add	r3, pc, #56	@ (adr r3, 8007380 <_strtod_l+0xbc0>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f9 fbce 	bl	8000aec <__aeabi_dcmplt>
 8007350:	e798      	b.n	8007284 <_strtod_l+0xac4>
 8007352:	2300      	movs	r3, #0
 8007354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007356:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	f7ff ba6d 	b.w	800683a <_strtod_l+0x7a>
 8007360:	2a65      	cmp	r2, #101	@ 0x65
 8007362:	f43f ab66 	beq.w	8006a32 <_strtod_l+0x272>
 8007366:	2a45      	cmp	r2, #69	@ 0x45
 8007368:	f43f ab63 	beq.w	8006a32 <_strtod_l+0x272>
 800736c:	2301      	movs	r3, #1
 800736e:	f7ff bb9e 	b.w	8006aae <_strtod_l+0x2ee>
 8007372:	bf00      	nop
 8007374:	f3af 8000 	nop.w
 8007378:	ffc00000 	.word	0xffc00000
 800737c:	41dfffff 	.word	0x41dfffff
 8007380:	94a03595 	.word	0x94a03595
 8007384:	3fcfffff 	.word	0x3fcfffff

08007388 <_strtod_r>:
 8007388:	4b01      	ldr	r3, [pc, #4]	@ (8007390 <_strtod_r+0x8>)
 800738a:	f7ff ba19 	b.w	80067c0 <_strtod_l>
 800738e:	bf00      	nop
 8007390:	20000030 	.word	0x20000030

08007394 <__cvt>:
 8007394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	ec57 6b10 	vmov	r6, r7, d0
 800739c:	2f00      	cmp	r7, #0
 800739e:	460c      	mov	r4, r1
 80073a0:	4619      	mov	r1, r3
 80073a2:	463b      	mov	r3, r7
 80073a4:	bfbb      	ittet	lt
 80073a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073aa:	461f      	movlt	r7, r3
 80073ac:	2300      	movge	r3, #0
 80073ae:	232d      	movlt	r3, #45	@ 0x2d
 80073b0:	700b      	strb	r3, [r1, #0]
 80073b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073b8:	4691      	mov	r9, r2
 80073ba:	f023 0820 	bic.w	r8, r3, #32
 80073be:	bfbc      	itt	lt
 80073c0:	4632      	movlt	r2, r6
 80073c2:	4616      	movlt	r6, r2
 80073c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073c8:	d005      	beq.n	80073d6 <__cvt+0x42>
 80073ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073ce:	d100      	bne.n	80073d2 <__cvt+0x3e>
 80073d0:	3401      	adds	r4, #1
 80073d2:	2102      	movs	r1, #2
 80073d4:	e000      	b.n	80073d8 <__cvt+0x44>
 80073d6:	2103      	movs	r1, #3
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	ab02      	add	r3, sp, #8
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	ec47 6b10 	vmov	d0, r6, r7
 80073e4:	4653      	mov	r3, sl
 80073e6:	4622      	mov	r2, r4
 80073e8:	f001 f97a 	bl	80086e0 <_dtoa_r>
 80073ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073f0:	4605      	mov	r5, r0
 80073f2:	d119      	bne.n	8007428 <__cvt+0x94>
 80073f4:	f019 0f01 	tst.w	r9, #1
 80073f8:	d00e      	beq.n	8007418 <__cvt+0x84>
 80073fa:	eb00 0904 	add.w	r9, r0, r4
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4630      	mov	r0, r6
 8007404:	4639      	mov	r1, r7
 8007406:	f7f9 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800740a:	b108      	cbz	r0, 8007410 <__cvt+0x7c>
 800740c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007410:	2230      	movs	r2, #48	@ 0x30
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	454b      	cmp	r3, r9
 8007416:	d31e      	bcc.n	8007456 <__cvt+0xc2>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800741c:	1b5b      	subs	r3, r3, r5
 800741e:	4628      	mov	r0, r5
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	b004      	add	sp, #16
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800742c:	eb00 0904 	add.w	r9, r0, r4
 8007430:	d1e5      	bne.n	80073fe <__cvt+0x6a>
 8007432:	7803      	ldrb	r3, [r0, #0]
 8007434:	2b30      	cmp	r3, #48	@ 0x30
 8007436:	d10a      	bne.n	800744e <__cvt+0xba>
 8007438:	2200      	movs	r2, #0
 800743a:	2300      	movs	r3, #0
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f7f9 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007444:	b918      	cbnz	r0, 800744e <__cvt+0xba>
 8007446:	f1c4 0401 	rsb	r4, r4, #1
 800744a:	f8ca 4000 	str.w	r4, [sl]
 800744e:	f8da 3000 	ldr.w	r3, [sl]
 8007452:	4499      	add	r9, r3
 8007454:	e7d3      	b.n	80073fe <__cvt+0x6a>
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	9103      	str	r1, [sp, #12]
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e7d9      	b.n	8007412 <__cvt+0x7e>

0800745e <__exponent>:
 800745e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007460:	2900      	cmp	r1, #0
 8007462:	bfba      	itte	lt
 8007464:	4249      	neglt	r1, r1
 8007466:	232d      	movlt	r3, #45	@ 0x2d
 8007468:	232b      	movge	r3, #43	@ 0x2b
 800746a:	2909      	cmp	r1, #9
 800746c:	7002      	strb	r2, [r0, #0]
 800746e:	7043      	strb	r3, [r0, #1]
 8007470:	dd29      	ble.n	80074c6 <__exponent+0x68>
 8007472:	f10d 0307 	add.w	r3, sp, #7
 8007476:	461d      	mov	r5, r3
 8007478:	270a      	movs	r7, #10
 800747a:	461a      	mov	r2, r3
 800747c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007480:	fb07 1416 	mls	r4, r7, r6, r1
 8007484:	3430      	adds	r4, #48	@ 0x30
 8007486:	f802 4c01 	strb.w	r4, [r2, #-1]
 800748a:	460c      	mov	r4, r1
 800748c:	2c63      	cmp	r4, #99	@ 0x63
 800748e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007492:	4631      	mov	r1, r6
 8007494:	dcf1      	bgt.n	800747a <__exponent+0x1c>
 8007496:	3130      	adds	r1, #48	@ 0x30
 8007498:	1e94      	subs	r4, r2, #2
 800749a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800749e:	1c41      	adds	r1, r0, #1
 80074a0:	4623      	mov	r3, r4
 80074a2:	42ab      	cmp	r3, r5
 80074a4:	d30a      	bcc.n	80074bc <__exponent+0x5e>
 80074a6:	f10d 0309 	add.w	r3, sp, #9
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	42ac      	cmp	r4, r5
 80074ae:	bf88      	it	hi
 80074b0:	2300      	movhi	r3, #0
 80074b2:	3302      	adds	r3, #2
 80074b4:	4403      	add	r3, r0
 80074b6:	1a18      	subs	r0, r3, r0
 80074b8:	b003      	add	sp, #12
 80074ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074c4:	e7ed      	b.n	80074a2 <__exponent+0x44>
 80074c6:	2330      	movs	r3, #48	@ 0x30
 80074c8:	3130      	adds	r1, #48	@ 0x30
 80074ca:	7083      	strb	r3, [r0, #2]
 80074cc:	70c1      	strb	r1, [r0, #3]
 80074ce:	1d03      	adds	r3, r0, #4
 80074d0:	e7f1      	b.n	80074b6 <__exponent+0x58>
	...

080074d4 <_printf_float>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	b08d      	sub	sp, #52	@ 0x34
 80074da:	460c      	mov	r4, r1
 80074dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074e0:	4616      	mov	r6, r2
 80074e2:	461f      	mov	r7, r3
 80074e4:	4605      	mov	r5, r0
 80074e6:	f000 ffcd 	bl	8008484 <_localeconv_r>
 80074ea:	6803      	ldr	r3, [r0, #0]
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f8 fec6 	bl	8000280 <strlen>
 80074f4:	2300      	movs	r3, #0
 80074f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074f8:	f8d8 3000 	ldr.w	r3, [r8]
 80074fc:	9005      	str	r0, [sp, #20]
 80074fe:	3307      	adds	r3, #7
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	f103 0208 	add.w	r2, r3, #8
 8007508:	f894 a018 	ldrb.w	sl, [r4, #24]
 800750c:	f8d4 b000 	ldr.w	fp, [r4]
 8007510:	f8c8 2000 	str.w	r2, [r8]
 8007514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007518:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800751c:	9307      	str	r3, [sp, #28]
 800751e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007522:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800752a:	4b9c      	ldr	r3, [pc, #624]	@ (800779c <_printf_float+0x2c8>)
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	f7f9 fb04 	bl	8000b3c <__aeabi_dcmpun>
 8007534:	bb70      	cbnz	r0, 8007594 <_printf_float+0xc0>
 8007536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800753a:	4b98      	ldr	r3, [pc, #608]	@ (800779c <_printf_float+0x2c8>)
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	f7f9 fade 	bl	8000b00 <__aeabi_dcmple>
 8007544:	bb30      	cbnz	r0, 8007594 <_printf_float+0xc0>
 8007546:	2200      	movs	r2, #0
 8007548:	2300      	movs	r3, #0
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f9 facd 	bl	8000aec <__aeabi_dcmplt>
 8007552:	b110      	cbz	r0, 800755a <_printf_float+0x86>
 8007554:	232d      	movs	r3, #45	@ 0x2d
 8007556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800755a:	4a91      	ldr	r2, [pc, #580]	@ (80077a0 <_printf_float+0x2cc>)
 800755c:	4b91      	ldr	r3, [pc, #580]	@ (80077a4 <_printf_float+0x2d0>)
 800755e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007562:	bf94      	ite	ls
 8007564:	4690      	movls	r8, r2
 8007566:	4698      	movhi	r8, r3
 8007568:	2303      	movs	r3, #3
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	f02b 0304 	bic.w	r3, fp, #4
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	f04f 0900 	mov.w	r9, #0
 8007576:	9700      	str	r7, [sp, #0]
 8007578:	4633      	mov	r3, r6
 800757a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800757c:	4621      	mov	r1, r4
 800757e:	4628      	mov	r0, r5
 8007580:	f000 f9d2 	bl	8007928 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	f040 808d 	bne.w	80076a4 <_printf_float+0x1d0>
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	b00d      	add	sp, #52	@ 0x34
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f9 face 	bl	8000b3c <__aeabi_dcmpun>
 80075a0:	b140      	cbz	r0, 80075b4 <_printf_float+0xe0>
 80075a2:	464b      	mov	r3, r9
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfbc      	itt	lt
 80075a8:	232d      	movlt	r3, #45	@ 0x2d
 80075aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075ae:	4a7e      	ldr	r2, [pc, #504]	@ (80077a8 <_printf_float+0x2d4>)
 80075b0:	4b7e      	ldr	r3, [pc, #504]	@ (80077ac <_printf_float+0x2d8>)
 80075b2:	e7d4      	b.n	800755e <_printf_float+0x8a>
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075ba:	9206      	str	r2, [sp, #24]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	d13b      	bne.n	8007638 <_printf_float+0x164>
 80075c0:	2306      	movs	r3, #6
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075c8:	2300      	movs	r3, #0
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	9303      	str	r3, [sp, #12]
 80075ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80075d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075d4:	ab09      	add	r3, sp, #36	@ 0x24
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	6861      	ldr	r1, [r4, #4]
 80075da:	ec49 8b10 	vmov	d0, r8, r9
 80075de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff fed6 	bl	8007394 <__cvt>
 80075e8:	9b06      	ldr	r3, [sp, #24]
 80075ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075ec:	2b47      	cmp	r3, #71	@ 0x47
 80075ee:	4680      	mov	r8, r0
 80075f0:	d129      	bne.n	8007646 <_printf_float+0x172>
 80075f2:	1cc8      	adds	r0, r1, #3
 80075f4:	db02      	blt.n	80075fc <_printf_float+0x128>
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	4299      	cmp	r1, r3
 80075fa:	dd41      	ble.n	8007680 <_printf_float+0x1ac>
 80075fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007600:	fa5f fa8a 	uxtb.w	sl, sl
 8007604:	3901      	subs	r1, #1
 8007606:	4652      	mov	r2, sl
 8007608:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800760c:	9109      	str	r1, [sp, #36]	@ 0x24
 800760e:	f7ff ff26 	bl	800745e <__exponent>
 8007612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007614:	1813      	adds	r3, r2, r0
 8007616:	2a01      	cmp	r2, #1
 8007618:	4681      	mov	r9, r0
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	dc02      	bgt.n	8007624 <_printf_float+0x150>
 800761e:	6822      	ldr	r2, [r4, #0]
 8007620:	07d2      	lsls	r2, r2, #31
 8007622:	d501      	bpl.n	8007628 <_printf_float+0x154>
 8007624:	3301      	adds	r3, #1
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0a2      	beq.n	8007576 <_printf_float+0xa2>
 8007630:	232d      	movs	r3, #45	@ 0x2d
 8007632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007636:	e79e      	b.n	8007576 <_printf_float+0xa2>
 8007638:	9a06      	ldr	r2, [sp, #24]
 800763a:	2a47      	cmp	r2, #71	@ 0x47
 800763c:	d1c2      	bne.n	80075c4 <_printf_float+0xf0>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1c0      	bne.n	80075c4 <_printf_float+0xf0>
 8007642:	2301      	movs	r3, #1
 8007644:	e7bd      	b.n	80075c2 <_printf_float+0xee>
 8007646:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800764a:	d9db      	bls.n	8007604 <_printf_float+0x130>
 800764c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007650:	d118      	bne.n	8007684 <_printf_float+0x1b0>
 8007652:	2900      	cmp	r1, #0
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	dd0b      	ble.n	8007670 <_printf_float+0x19c>
 8007658:	6121      	str	r1, [r4, #16]
 800765a:	b913      	cbnz	r3, 8007662 <_printf_float+0x18e>
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	07d0      	lsls	r0, r2, #31
 8007660:	d502      	bpl.n	8007668 <_printf_float+0x194>
 8007662:	3301      	adds	r3, #1
 8007664:	440b      	add	r3, r1
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	65a1      	str	r1, [r4, #88]	@ 0x58
 800766a:	f04f 0900 	mov.w	r9, #0
 800766e:	e7db      	b.n	8007628 <_printf_float+0x154>
 8007670:	b913      	cbnz	r3, 8007678 <_printf_float+0x1a4>
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	07d2      	lsls	r2, r2, #31
 8007676:	d501      	bpl.n	800767c <_printf_float+0x1a8>
 8007678:	3302      	adds	r3, #2
 800767a:	e7f4      	b.n	8007666 <_printf_float+0x192>
 800767c:	2301      	movs	r3, #1
 800767e:	e7f2      	b.n	8007666 <_printf_float+0x192>
 8007680:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	4299      	cmp	r1, r3
 8007688:	db05      	blt.n	8007696 <_printf_float+0x1c2>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6121      	str	r1, [r4, #16]
 800768e:	07d8      	lsls	r0, r3, #31
 8007690:	d5ea      	bpl.n	8007668 <_printf_float+0x194>
 8007692:	1c4b      	adds	r3, r1, #1
 8007694:	e7e7      	b.n	8007666 <_printf_float+0x192>
 8007696:	2900      	cmp	r1, #0
 8007698:	bfd4      	ite	le
 800769a:	f1c1 0202 	rsble	r2, r1, #2
 800769e:	2201      	movgt	r2, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	e7e0      	b.n	8007666 <_printf_float+0x192>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	055a      	lsls	r2, r3, #21
 80076a8:	d407      	bmi.n	80076ba <_printf_float+0x1e6>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	4642      	mov	r2, r8
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	d12b      	bne.n	8007710 <_printf_float+0x23c>
 80076b8:	e767      	b.n	800758a <_printf_float+0xb6>
 80076ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076be:	f240 80dd 	bls.w	800787c <_printf_float+0x3a8>
 80076c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	f7f9 fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d033      	beq.n	800773a <_printf_float+0x266>
 80076d2:	4a37      	ldr	r2, [pc, #220]	@ (80077b0 <_printf_float+0x2dc>)
 80076d4:	2301      	movs	r3, #1
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f af54 	beq.w	800758a <_printf_float+0xb6>
 80076e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076e6:	4543      	cmp	r3, r8
 80076e8:	db02      	blt.n	80076f0 <_printf_float+0x21c>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	07d8      	lsls	r0, r3, #31
 80076ee:	d50f      	bpl.n	8007710 <_printf_float+0x23c>
 80076f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af45 	beq.w	800758a <_printf_float+0xb6>
 8007700:	f04f 0900 	mov.w	r9, #0
 8007704:	f108 38ff 	add.w	r8, r8, #4294967295
 8007708:	f104 0a1a 	add.w	sl, r4, #26
 800770c:	45c8      	cmp	r8, r9
 800770e:	dc09      	bgt.n	8007724 <_printf_float+0x250>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	079b      	lsls	r3, r3, #30
 8007714:	f100 8103 	bmi.w	800791e <_printf_float+0x44a>
 8007718:	68e0      	ldr	r0, [r4, #12]
 800771a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800771c:	4298      	cmp	r0, r3
 800771e:	bfb8      	it	lt
 8007720:	4618      	movlt	r0, r3
 8007722:	e734      	b.n	800758e <_printf_float+0xba>
 8007724:	2301      	movs	r3, #1
 8007726:	4652      	mov	r2, sl
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af2b 	beq.w	800758a <_printf_float+0xb6>
 8007734:	f109 0901 	add.w	r9, r9, #1
 8007738:	e7e8      	b.n	800770c <_printf_float+0x238>
 800773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	dc39      	bgt.n	80077b4 <_printf_float+0x2e0>
 8007740:	4a1b      	ldr	r2, [pc, #108]	@ (80077b0 <_printf_float+0x2dc>)
 8007742:	2301      	movs	r3, #1
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	f43f af1d 	beq.w	800758a <_printf_float+0xb6>
 8007750:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007754:	ea59 0303 	orrs.w	r3, r9, r3
 8007758:	d102      	bne.n	8007760 <_printf_float+0x28c>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	07d9      	lsls	r1, r3, #31
 800775e:	d5d7      	bpl.n	8007710 <_printf_float+0x23c>
 8007760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af0d 	beq.w	800758a <_printf_float+0xb6>
 8007770:	f04f 0a00 	mov.w	sl, #0
 8007774:	f104 0b1a 	add.w	fp, r4, #26
 8007778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777a:	425b      	negs	r3, r3
 800777c:	4553      	cmp	r3, sl
 800777e:	dc01      	bgt.n	8007784 <_printf_float+0x2b0>
 8007780:	464b      	mov	r3, r9
 8007782:	e793      	b.n	80076ac <_printf_float+0x1d8>
 8007784:	2301      	movs	r3, #1
 8007786:	465a      	mov	r2, fp
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f aefb 	beq.w	800758a <_printf_float+0xb6>
 8007794:	f10a 0a01 	add.w	sl, sl, #1
 8007798:	e7ee      	b.n	8007778 <_printf_float+0x2a4>
 800779a:	bf00      	nop
 800779c:	7fefffff 	.word	0x7fefffff
 80077a0:	0800b3b0 	.word	0x0800b3b0
 80077a4:	0800b3b4 	.word	0x0800b3b4
 80077a8:	0800b3b8 	.word	0x0800b3b8
 80077ac:	0800b3bc 	.word	0x0800b3bc
 80077b0:	0800b3c0 	.word	0x0800b3c0
 80077b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077ba:	4553      	cmp	r3, sl
 80077bc:	bfa8      	it	ge
 80077be:	4653      	movge	r3, sl
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	4699      	mov	r9, r3
 80077c4:	dc36      	bgt.n	8007834 <_printf_float+0x360>
 80077c6:	f04f 0b00 	mov.w	fp, #0
 80077ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ce:	f104 021a 	add.w	r2, r4, #26
 80077d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d4:	9306      	str	r3, [sp, #24]
 80077d6:	eba3 0309 	sub.w	r3, r3, r9
 80077da:	455b      	cmp	r3, fp
 80077dc:	dc31      	bgt.n	8007842 <_printf_float+0x36e>
 80077de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e0:	459a      	cmp	sl, r3
 80077e2:	dc3a      	bgt.n	800785a <_printf_float+0x386>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07da      	lsls	r2, r3, #31
 80077e8:	d437      	bmi.n	800785a <_printf_float+0x386>
 80077ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ec:	ebaa 0903 	sub.w	r9, sl, r3
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	ebaa 0303 	sub.w	r3, sl, r3
 80077f6:	4599      	cmp	r9, r3
 80077f8:	bfa8      	it	ge
 80077fa:	4699      	movge	r9, r3
 80077fc:	f1b9 0f00 	cmp.w	r9, #0
 8007800:	dc33      	bgt.n	800786a <_printf_float+0x396>
 8007802:	f04f 0800 	mov.w	r8, #0
 8007806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780a:	f104 0b1a 	add.w	fp, r4, #26
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	ebaa 0303 	sub.w	r3, sl, r3
 8007814:	eba3 0309 	sub.w	r3, r3, r9
 8007818:	4543      	cmp	r3, r8
 800781a:	f77f af79 	ble.w	8007710 <_printf_float+0x23c>
 800781e:	2301      	movs	r3, #1
 8007820:	465a      	mov	r2, fp
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f aeae 	beq.w	800758a <_printf_float+0xb6>
 800782e:	f108 0801 	add.w	r8, r8, #1
 8007832:	e7ec      	b.n	800780e <_printf_float+0x33a>
 8007834:	4642      	mov	r2, r8
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	d1c2      	bne.n	80077c6 <_printf_float+0x2f2>
 8007840:	e6a3      	b.n	800758a <_printf_float+0xb6>
 8007842:	2301      	movs	r3, #1
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	9206      	str	r2, [sp, #24]
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	f43f ae9c 	beq.w	800758a <_printf_float+0xb6>
 8007852:	9a06      	ldr	r2, [sp, #24]
 8007854:	f10b 0b01 	add.w	fp, fp, #1
 8007858:	e7bb      	b.n	80077d2 <_printf_float+0x2fe>
 800785a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	d1c0      	bne.n	80077ea <_printf_float+0x316>
 8007868:	e68f      	b.n	800758a <_printf_float+0xb6>
 800786a:	9a06      	ldr	r2, [sp, #24]
 800786c:	464b      	mov	r3, r9
 800786e:	4442      	add	r2, r8
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	d1c3      	bne.n	8007802 <_printf_float+0x32e>
 800787a:	e686      	b.n	800758a <_printf_float+0xb6>
 800787c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007880:	f1ba 0f01 	cmp.w	sl, #1
 8007884:	dc01      	bgt.n	800788a <_printf_float+0x3b6>
 8007886:	07db      	lsls	r3, r3, #31
 8007888:	d536      	bpl.n	80078f8 <_printf_float+0x424>
 800788a:	2301      	movs	r3, #1
 800788c:	4642      	mov	r2, r8
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f ae78 	beq.w	800758a <_printf_float+0xb6>
 800789a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae70 	beq.w	800758a <_printf_float+0xb6>
 80078aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ae:	2200      	movs	r2, #0
 80078b0:	2300      	movs	r3, #0
 80078b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078b6:	f7f9 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ba:	b9c0      	cbnz	r0, 80078ee <_printf_float+0x41a>
 80078bc:	4653      	mov	r3, sl
 80078be:	f108 0201 	add.w	r2, r8, #1
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	d10c      	bne.n	80078e6 <_printf_float+0x412>
 80078cc:	e65d      	b.n	800758a <_printf_float+0xb6>
 80078ce:	2301      	movs	r3, #1
 80078d0:	465a      	mov	r2, fp
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae56 	beq.w	800758a <_printf_float+0xb6>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	45d0      	cmp	r8, sl
 80078e4:	dbf3      	blt.n	80078ce <_printf_float+0x3fa>
 80078e6:	464b      	mov	r3, r9
 80078e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078ec:	e6df      	b.n	80076ae <_printf_float+0x1da>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	f104 0b1a 	add.w	fp, r4, #26
 80078f6:	e7f4      	b.n	80078e2 <_printf_float+0x40e>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4642      	mov	r2, r8
 80078fc:	e7e1      	b.n	80078c2 <_printf_float+0x3ee>
 80078fe:	2301      	movs	r3, #1
 8007900:	464a      	mov	r2, r9
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f ae3e 	beq.w	800758a <_printf_float+0xb6>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007916:	1a5b      	subs	r3, r3, r1
 8007918:	4543      	cmp	r3, r8
 800791a:	dcf0      	bgt.n	80078fe <_printf_float+0x42a>
 800791c:	e6fc      	b.n	8007718 <_printf_float+0x244>
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	f104 0919 	add.w	r9, r4, #25
 8007926:	e7f4      	b.n	8007912 <_printf_float+0x43e>

08007928 <_printf_common>:
 8007928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	4616      	mov	r6, r2
 800792e:	4698      	mov	r8, r3
 8007930:	688a      	ldr	r2, [r1, #8]
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007938:	4293      	cmp	r3, r2
 800793a:	bfb8      	it	lt
 800793c:	4613      	movlt	r3, r2
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007944:	4607      	mov	r7, r0
 8007946:	460c      	mov	r4, r1
 8007948:	b10a      	cbz	r2, 800794e <_printf_common+0x26>
 800794a:	3301      	adds	r3, #1
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	0699      	lsls	r1, r3, #26
 8007952:	bf42      	ittt	mi
 8007954:	6833      	ldrmi	r3, [r6, #0]
 8007956:	3302      	addmi	r3, #2
 8007958:	6033      	strmi	r3, [r6, #0]
 800795a:	6825      	ldr	r5, [r4, #0]
 800795c:	f015 0506 	ands.w	r5, r5, #6
 8007960:	d106      	bne.n	8007970 <_printf_common+0x48>
 8007962:	f104 0a19 	add.w	sl, r4, #25
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	6832      	ldr	r2, [r6, #0]
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	42ab      	cmp	r3, r5
 800796e:	dc26      	bgt.n	80079be <_printf_common+0x96>
 8007970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	3b00      	subs	r3, #0
 8007978:	bf18      	it	ne
 800797a:	2301      	movne	r3, #1
 800797c:	0692      	lsls	r2, r2, #26
 800797e:	d42b      	bmi.n	80079d8 <_printf_common+0xb0>
 8007980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007984:	4641      	mov	r1, r8
 8007986:	4638      	mov	r0, r7
 8007988:	47c8      	blx	r9
 800798a:	3001      	adds	r0, #1
 800798c:	d01e      	beq.n	80079cc <_printf_common+0xa4>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	6922      	ldr	r2, [r4, #16]
 8007992:	f003 0306 	and.w	r3, r3, #6
 8007996:	2b04      	cmp	r3, #4
 8007998:	bf02      	ittt	eq
 800799a:	68e5      	ldreq	r5, [r4, #12]
 800799c:	6833      	ldreq	r3, [r6, #0]
 800799e:	1aed      	subeq	r5, r5, r3
 80079a0:	68a3      	ldr	r3, [r4, #8]
 80079a2:	bf0c      	ite	eq
 80079a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a8:	2500      	movne	r5, #0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	bfc4      	itt	gt
 80079ae:	1a9b      	subgt	r3, r3, r2
 80079b0:	18ed      	addgt	r5, r5, r3
 80079b2:	2600      	movs	r6, #0
 80079b4:	341a      	adds	r4, #26
 80079b6:	42b5      	cmp	r5, r6
 80079b8:	d11a      	bne.n	80079f0 <_printf_common+0xc8>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e008      	b.n	80079d0 <_printf_common+0xa8>
 80079be:	2301      	movs	r3, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	4641      	mov	r1, r8
 80079c4:	4638      	mov	r0, r7
 80079c6:	47c8      	blx	r9
 80079c8:	3001      	adds	r0, #1
 80079ca:	d103      	bne.n	80079d4 <_printf_common+0xac>
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	3501      	adds	r5, #1
 80079d6:	e7c6      	b.n	8007966 <_printf_common+0x3e>
 80079d8:	18e1      	adds	r1, r4, r3
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	2030      	movs	r0, #48	@ 0x30
 80079de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079e2:	4422      	add	r2, r4
 80079e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079ec:	3302      	adds	r3, #2
 80079ee:	e7c7      	b.n	8007980 <_printf_common+0x58>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4622      	mov	r2, r4
 80079f4:	4641      	mov	r1, r8
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c8      	blx	r9
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0e6      	beq.n	80079cc <_printf_common+0xa4>
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7d9      	b.n	80079b6 <_printf_common+0x8e>
	...

08007a04 <_printf_i>:
 8007a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	7e0f      	ldrb	r7, [r1, #24]
 8007a0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a0c:	2f78      	cmp	r7, #120	@ 0x78
 8007a0e:	4691      	mov	r9, r2
 8007a10:	4680      	mov	r8, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	469a      	mov	sl, r3
 8007a16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a1a:	d807      	bhi.n	8007a2c <_printf_i+0x28>
 8007a1c:	2f62      	cmp	r7, #98	@ 0x62
 8007a1e:	d80a      	bhi.n	8007a36 <_printf_i+0x32>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	f000 80d2 	beq.w	8007bca <_printf_i+0x1c6>
 8007a26:	2f58      	cmp	r7, #88	@ 0x58
 8007a28:	f000 80b9 	beq.w	8007b9e <_printf_i+0x19a>
 8007a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a34:	e03a      	b.n	8007aac <_printf_i+0xa8>
 8007a36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a3a:	2b15      	cmp	r3, #21
 8007a3c:	d8f6      	bhi.n	8007a2c <_printf_i+0x28>
 8007a3e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a44 <_printf_i+0x40>)
 8007a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007a2d 	.word	0x08007a2d
 8007a50:	08007a2d 	.word	0x08007a2d
 8007a54:	08007a2d 	.word	0x08007a2d
 8007a58:	08007a2d 	.word	0x08007a2d
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007a2d 	.word	0x08007a2d
 8007a64:	08007a2d 	.word	0x08007a2d
 8007a68:	08007a2d 	.word	0x08007a2d
 8007a6c:	08007a2d 	.word	0x08007a2d
 8007a70:	08007bb1 	.word	0x08007bb1
 8007a74:	08007adb 	.word	0x08007adb
 8007a78:	08007b6b 	.word	0x08007b6b
 8007a7c:	08007a2d 	.word	0x08007a2d
 8007a80:	08007a2d 	.word	0x08007a2d
 8007a84:	08007bd3 	.word	0x08007bd3
 8007a88:	08007a2d 	.word	0x08007a2d
 8007a8c:	08007adb 	.word	0x08007adb
 8007a90:	08007a2d 	.word	0x08007a2d
 8007a94:	08007a2d 	.word	0x08007a2d
 8007a98:	08007b73 	.word	0x08007b73
 8007a9c:	6833      	ldr	r3, [r6, #0]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6032      	str	r2, [r6, #0]
 8007aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007aac:	2301      	movs	r3, #1
 8007aae:	e09d      	b.n	8007bec <_printf_i+0x1e8>
 8007ab0:	6833      	ldr	r3, [r6, #0]
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	6031      	str	r1, [r6, #0]
 8007ab8:	0606      	lsls	r6, r0, #24
 8007aba:	d501      	bpl.n	8007ac0 <_printf_i+0xbc>
 8007abc:	681d      	ldr	r5, [r3, #0]
 8007abe:	e003      	b.n	8007ac8 <_printf_i+0xc4>
 8007ac0:	0645      	lsls	r5, r0, #25
 8007ac2:	d5fb      	bpl.n	8007abc <_printf_i+0xb8>
 8007ac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	da03      	bge.n	8007ad4 <_printf_i+0xd0>
 8007acc:	232d      	movs	r3, #45	@ 0x2d
 8007ace:	426d      	negs	r5, r5
 8007ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad4:	4859      	ldr	r0, [pc, #356]	@ (8007c3c <_printf_i+0x238>)
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	e011      	b.n	8007afe <_printf_i+0xfa>
 8007ada:	6821      	ldr	r1, [r4, #0]
 8007adc:	6833      	ldr	r3, [r6, #0]
 8007ade:	0608      	lsls	r0, r1, #24
 8007ae0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae4:	d402      	bmi.n	8007aec <_printf_i+0xe8>
 8007ae6:	0649      	lsls	r1, r1, #25
 8007ae8:	bf48      	it	mi
 8007aea:	b2ad      	uxthmi	r5, r5
 8007aec:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aee:	4853      	ldr	r0, [pc, #332]	@ (8007c3c <_printf_i+0x238>)
 8007af0:	6033      	str	r3, [r6, #0]
 8007af2:	bf14      	ite	ne
 8007af4:	230a      	movne	r3, #10
 8007af6:	2308      	moveq	r3, #8
 8007af8:	2100      	movs	r1, #0
 8007afa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007afe:	6866      	ldr	r6, [r4, #4]
 8007b00:	60a6      	str	r6, [r4, #8]
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	bfa2      	ittt	ge
 8007b06:	6821      	ldrge	r1, [r4, #0]
 8007b08:	f021 0104 	bicge.w	r1, r1, #4
 8007b0c:	6021      	strge	r1, [r4, #0]
 8007b0e:	b90d      	cbnz	r5, 8007b14 <_printf_i+0x110>
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	d04b      	beq.n	8007bac <_printf_i+0x1a8>
 8007b14:	4616      	mov	r6, r2
 8007b16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b1e:	5dc7      	ldrb	r7, [r0, r7]
 8007b20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b24:	462f      	mov	r7, r5
 8007b26:	42bb      	cmp	r3, r7
 8007b28:	460d      	mov	r5, r1
 8007b2a:	d9f4      	bls.n	8007b16 <_printf_i+0x112>
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d10b      	bne.n	8007b48 <_printf_i+0x144>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07df      	lsls	r7, r3, #31
 8007b34:	d508      	bpl.n	8007b48 <_printf_i+0x144>
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	6861      	ldr	r1, [r4, #4]
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	bfde      	ittt	le
 8007b3e:	2330      	movle	r3, #48	@ 0x30
 8007b40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b48:	1b92      	subs	r2, r2, r6
 8007b4a:	6122      	str	r2, [r4, #16]
 8007b4c:	f8cd a000 	str.w	sl, [sp]
 8007b50:	464b      	mov	r3, r9
 8007b52:	aa03      	add	r2, sp, #12
 8007b54:	4621      	mov	r1, r4
 8007b56:	4640      	mov	r0, r8
 8007b58:	f7ff fee6 	bl	8007928 <_printf_common>
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d14a      	bne.n	8007bf6 <_printf_i+0x1f2>
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	b004      	add	sp, #16
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f043 0320 	orr.w	r3, r3, #32
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	4833      	ldr	r0, [pc, #204]	@ (8007c40 <_printf_i+0x23c>)
 8007b74:	2778      	movs	r7, #120	@ 0x78
 8007b76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	6831      	ldr	r1, [r6, #0]
 8007b7e:	061f      	lsls	r7, r3, #24
 8007b80:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b84:	d402      	bmi.n	8007b8c <_printf_i+0x188>
 8007b86:	065f      	lsls	r7, r3, #25
 8007b88:	bf48      	it	mi
 8007b8a:	b2ad      	uxthmi	r5, r5
 8007b8c:	6031      	str	r1, [r6, #0]
 8007b8e:	07d9      	lsls	r1, r3, #31
 8007b90:	bf44      	itt	mi
 8007b92:	f043 0320 	orrmi.w	r3, r3, #32
 8007b96:	6023      	strmi	r3, [r4, #0]
 8007b98:	b11d      	cbz	r5, 8007ba2 <_printf_i+0x19e>
 8007b9a:	2310      	movs	r3, #16
 8007b9c:	e7ac      	b.n	8007af8 <_printf_i+0xf4>
 8007b9e:	4827      	ldr	r0, [pc, #156]	@ (8007c3c <_printf_i+0x238>)
 8007ba0:	e7e9      	b.n	8007b76 <_printf_i+0x172>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f023 0320 	bic.w	r3, r3, #32
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	e7f6      	b.n	8007b9a <_printf_i+0x196>
 8007bac:	4616      	mov	r6, r2
 8007bae:	e7bd      	b.n	8007b2c <_printf_i+0x128>
 8007bb0:	6833      	ldr	r3, [r6, #0]
 8007bb2:	6825      	ldr	r5, [r4, #0]
 8007bb4:	6961      	ldr	r1, [r4, #20]
 8007bb6:	1d18      	adds	r0, r3, #4
 8007bb8:	6030      	str	r0, [r6, #0]
 8007bba:	062e      	lsls	r6, r5, #24
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	d501      	bpl.n	8007bc4 <_printf_i+0x1c0>
 8007bc0:	6019      	str	r1, [r3, #0]
 8007bc2:	e002      	b.n	8007bca <_printf_i+0x1c6>
 8007bc4:	0668      	lsls	r0, r5, #25
 8007bc6:	d5fb      	bpl.n	8007bc0 <_printf_i+0x1bc>
 8007bc8:	8019      	strh	r1, [r3, #0]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	4616      	mov	r6, r2
 8007bd0:	e7bc      	b.n	8007b4c <_printf_i+0x148>
 8007bd2:	6833      	ldr	r3, [r6, #0]
 8007bd4:	1d1a      	adds	r2, r3, #4
 8007bd6:	6032      	str	r2, [r6, #0]
 8007bd8:	681e      	ldr	r6, [r3, #0]
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7f8 fafe 	bl	80001e0 <memchr>
 8007be4:	b108      	cbz	r0, 8007bea <_printf_i+0x1e6>
 8007be6:	1b80      	subs	r0, r0, r6
 8007be8:	6060      	str	r0, [r4, #4]
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf4:	e7aa      	b.n	8007b4c <_printf_i+0x148>
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	47d0      	blx	sl
 8007c00:	3001      	adds	r0, #1
 8007c02:	d0ad      	beq.n	8007b60 <_printf_i+0x15c>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	079b      	lsls	r3, r3, #30
 8007c08:	d413      	bmi.n	8007c32 <_printf_i+0x22e>
 8007c0a:	68e0      	ldr	r0, [r4, #12]
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	4298      	cmp	r0, r3
 8007c10:	bfb8      	it	lt
 8007c12:	4618      	movlt	r0, r3
 8007c14:	e7a6      	b.n	8007b64 <_printf_i+0x160>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	47d0      	blx	sl
 8007c20:	3001      	adds	r0, #1
 8007c22:	d09d      	beq.n	8007b60 <_printf_i+0x15c>
 8007c24:	3501      	adds	r5, #1
 8007c26:	68e3      	ldr	r3, [r4, #12]
 8007c28:	9903      	ldr	r1, [sp, #12]
 8007c2a:	1a5b      	subs	r3, r3, r1
 8007c2c:	42ab      	cmp	r3, r5
 8007c2e:	dcf2      	bgt.n	8007c16 <_printf_i+0x212>
 8007c30:	e7eb      	b.n	8007c0a <_printf_i+0x206>
 8007c32:	2500      	movs	r5, #0
 8007c34:	f104 0619 	add.w	r6, r4, #25
 8007c38:	e7f5      	b.n	8007c26 <_printf_i+0x222>
 8007c3a:	bf00      	nop
 8007c3c:	0800b3c2 	.word	0x0800b3c2
 8007c40:	0800b3d3 	.word	0x0800b3d3

08007c44 <_scanf_float>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	b087      	sub	sp, #28
 8007c4a:	4617      	mov	r7, r2
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	688b      	ldr	r3, [r1, #8]
 8007c50:	1e5a      	subs	r2, r3, #1
 8007c52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c56:	bf81      	itttt	hi
 8007c58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c64:	608b      	strhi	r3, [r1, #8]
 8007c66:	680b      	ldr	r3, [r1, #0]
 8007c68:	460a      	mov	r2, r1
 8007c6a:	f04f 0500 	mov.w	r5, #0
 8007c6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c72:	f842 3b1c 	str.w	r3, [r2], #28
 8007c76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	bf98      	it	ls
 8007c80:	f04f 0b00 	movls.w	fp, #0
 8007c84:	9201      	str	r2, [sp, #4]
 8007c86:	4616      	mov	r6, r2
 8007c88:	46aa      	mov	sl, r5
 8007c8a:	46a9      	mov	r9, r5
 8007c8c:	9502      	str	r5, [sp, #8]
 8007c8e:	68a2      	ldr	r2, [r4, #8]
 8007c90:	b152      	cbz	r2, 8007ca8 <_scanf_float+0x64>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c98:	d864      	bhi.n	8007d64 <_scanf_float+0x120>
 8007c9a:	2b40      	cmp	r3, #64	@ 0x40
 8007c9c:	d83c      	bhi.n	8007d18 <_scanf_float+0xd4>
 8007c9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007ca2:	b2c8      	uxtb	r0, r1
 8007ca4:	280e      	cmp	r0, #14
 8007ca6:	d93a      	bls.n	8007d1e <_scanf_float+0xda>
 8007ca8:	f1b9 0f00 	cmp.w	r9, #0
 8007cac:	d003      	beq.n	8007cb6 <_scanf_float+0x72>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cba:	f1ba 0f01 	cmp.w	sl, #1
 8007cbe:	f200 8117 	bhi.w	8007ef0 <_scanf_float+0x2ac>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	429e      	cmp	r6, r3
 8007cc6:	f200 8108 	bhi.w	8007eda <_scanf_float+0x296>
 8007cca:	2001      	movs	r0, #1
 8007ccc:	b007      	add	sp, #28
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007cd6:	2a0d      	cmp	r2, #13
 8007cd8:	d8e6      	bhi.n	8007ca8 <_scanf_float+0x64>
 8007cda:	a101      	add	r1, pc, #4	@ (adr r1, 8007ce0 <_scanf_float+0x9c>)
 8007cdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ce0:	08007e27 	.word	0x08007e27
 8007ce4:	08007ca9 	.word	0x08007ca9
 8007ce8:	08007ca9 	.word	0x08007ca9
 8007cec:	08007ca9 	.word	0x08007ca9
 8007cf0:	08007e87 	.word	0x08007e87
 8007cf4:	08007e5f 	.word	0x08007e5f
 8007cf8:	08007ca9 	.word	0x08007ca9
 8007cfc:	08007ca9 	.word	0x08007ca9
 8007d00:	08007e35 	.word	0x08007e35
 8007d04:	08007ca9 	.word	0x08007ca9
 8007d08:	08007ca9 	.word	0x08007ca9
 8007d0c:	08007ca9 	.word	0x08007ca9
 8007d10:	08007ca9 	.word	0x08007ca9
 8007d14:	08007ded 	.word	0x08007ded
 8007d18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007d1c:	e7db      	b.n	8007cd6 <_scanf_float+0x92>
 8007d1e:	290e      	cmp	r1, #14
 8007d20:	d8c2      	bhi.n	8007ca8 <_scanf_float+0x64>
 8007d22:	a001      	add	r0, pc, #4	@ (adr r0, 8007d28 <_scanf_float+0xe4>)
 8007d24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d28:	08007ddd 	.word	0x08007ddd
 8007d2c:	08007ca9 	.word	0x08007ca9
 8007d30:	08007ddd 	.word	0x08007ddd
 8007d34:	08007e73 	.word	0x08007e73
 8007d38:	08007ca9 	.word	0x08007ca9
 8007d3c:	08007d85 	.word	0x08007d85
 8007d40:	08007dc3 	.word	0x08007dc3
 8007d44:	08007dc3 	.word	0x08007dc3
 8007d48:	08007dc3 	.word	0x08007dc3
 8007d4c:	08007dc3 	.word	0x08007dc3
 8007d50:	08007dc3 	.word	0x08007dc3
 8007d54:	08007dc3 	.word	0x08007dc3
 8007d58:	08007dc3 	.word	0x08007dc3
 8007d5c:	08007dc3 	.word	0x08007dc3
 8007d60:	08007dc3 	.word	0x08007dc3
 8007d64:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d66:	d809      	bhi.n	8007d7c <_scanf_float+0x138>
 8007d68:	2b60      	cmp	r3, #96	@ 0x60
 8007d6a:	d8b2      	bhi.n	8007cd2 <_scanf_float+0x8e>
 8007d6c:	2b54      	cmp	r3, #84	@ 0x54
 8007d6e:	d07b      	beq.n	8007e68 <_scanf_float+0x224>
 8007d70:	2b59      	cmp	r3, #89	@ 0x59
 8007d72:	d199      	bne.n	8007ca8 <_scanf_float+0x64>
 8007d74:	2d07      	cmp	r5, #7
 8007d76:	d197      	bne.n	8007ca8 <_scanf_float+0x64>
 8007d78:	2508      	movs	r5, #8
 8007d7a:	e02c      	b.n	8007dd6 <_scanf_float+0x192>
 8007d7c:	2b74      	cmp	r3, #116	@ 0x74
 8007d7e:	d073      	beq.n	8007e68 <_scanf_float+0x224>
 8007d80:	2b79      	cmp	r3, #121	@ 0x79
 8007d82:	e7f6      	b.n	8007d72 <_scanf_float+0x12e>
 8007d84:	6821      	ldr	r1, [r4, #0]
 8007d86:	05c8      	lsls	r0, r1, #23
 8007d88:	d51b      	bpl.n	8007dc2 <_scanf_float+0x17e>
 8007d8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007d8e:	6021      	str	r1, [r4, #0]
 8007d90:	f109 0901 	add.w	r9, r9, #1
 8007d94:	f1bb 0f00 	cmp.w	fp, #0
 8007d98:	d003      	beq.n	8007da2 <_scanf_float+0x15e>
 8007d9a:	3201      	adds	r2, #1
 8007d9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007da0:	60a2      	str	r2, [r4, #8]
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	60a3      	str	r3, [r4, #8]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	3301      	adds	r3, #1
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	f340 8087 	ble.w	8007ec8 <_scanf_float+0x284>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	e765      	b.n	8007c8e <_scanf_float+0x4a>
 8007dc2:	eb1a 0105 	adds.w	r1, sl, r5
 8007dc6:	f47f af6f 	bne.w	8007ca8 <_scanf_float+0x64>
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007dd0:	6022      	str	r2, [r4, #0]
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	468a      	mov	sl, r1
 8007dd6:	f806 3b01 	strb.w	r3, [r6], #1
 8007dda:	e7e2      	b.n	8007da2 <_scanf_float+0x15e>
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	0610      	lsls	r0, r2, #24
 8007de0:	f57f af62 	bpl.w	8007ca8 <_scanf_float+0x64>
 8007de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	e7f4      	b.n	8007dd6 <_scanf_float+0x192>
 8007dec:	f1ba 0f00 	cmp.w	sl, #0
 8007df0:	d10e      	bne.n	8007e10 <_scanf_float+0x1cc>
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	d10e      	bne.n	8007e16 <_scanf_float+0x1d2>
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007dfe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e02:	d108      	bne.n	8007e16 <_scanf_float+0x1d2>
 8007e04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	f04f 0a01 	mov.w	sl, #1
 8007e0e:	e7e2      	b.n	8007dd6 <_scanf_float+0x192>
 8007e10:	f1ba 0f02 	cmp.w	sl, #2
 8007e14:	d055      	beq.n	8007ec2 <_scanf_float+0x27e>
 8007e16:	2d01      	cmp	r5, #1
 8007e18:	d002      	beq.n	8007e20 <_scanf_float+0x1dc>
 8007e1a:	2d04      	cmp	r5, #4
 8007e1c:	f47f af44 	bne.w	8007ca8 <_scanf_float+0x64>
 8007e20:	3501      	adds	r5, #1
 8007e22:	b2ed      	uxtb	r5, r5
 8007e24:	e7d7      	b.n	8007dd6 <_scanf_float+0x192>
 8007e26:	f1ba 0f01 	cmp.w	sl, #1
 8007e2a:	f47f af3d 	bne.w	8007ca8 <_scanf_float+0x64>
 8007e2e:	f04f 0a02 	mov.w	sl, #2
 8007e32:	e7d0      	b.n	8007dd6 <_scanf_float+0x192>
 8007e34:	b97d      	cbnz	r5, 8007e56 <_scanf_float+0x212>
 8007e36:	f1b9 0f00 	cmp.w	r9, #0
 8007e3a:	f47f af38 	bne.w	8007cae <_scanf_float+0x6a>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e48:	f040 8108 	bne.w	800805c <_scanf_float+0x418>
 8007e4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e50:	6022      	str	r2, [r4, #0]
 8007e52:	2501      	movs	r5, #1
 8007e54:	e7bf      	b.n	8007dd6 <_scanf_float+0x192>
 8007e56:	2d03      	cmp	r5, #3
 8007e58:	d0e2      	beq.n	8007e20 <_scanf_float+0x1dc>
 8007e5a:	2d05      	cmp	r5, #5
 8007e5c:	e7de      	b.n	8007e1c <_scanf_float+0x1d8>
 8007e5e:	2d02      	cmp	r5, #2
 8007e60:	f47f af22 	bne.w	8007ca8 <_scanf_float+0x64>
 8007e64:	2503      	movs	r5, #3
 8007e66:	e7b6      	b.n	8007dd6 <_scanf_float+0x192>
 8007e68:	2d06      	cmp	r5, #6
 8007e6a:	f47f af1d 	bne.w	8007ca8 <_scanf_float+0x64>
 8007e6e:	2507      	movs	r5, #7
 8007e70:	e7b1      	b.n	8007dd6 <_scanf_float+0x192>
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	0591      	lsls	r1, r2, #22
 8007e76:	f57f af17 	bpl.w	8007ca8 <_scanf_float+0x64>
 8007e7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e7e:	6022      	str	r2, [r4, #0]
 8007e80:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e84:	e7a7      	b.n	8007dd6 <_scanf_float+0x192>
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007e8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e90:	d006      	beq.n	8007ea0 <_scanf_float+0x25c>
 8007e92:	0550      	lsls	r0, r2, #21
 8007e94:	f57f af08 	bpl.w	8007ca8 <_scanf_float+0x64>
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	f000 80de 	beq.w	800805c <_scanf_float+0x418>
 8007ea0:	0591      	lsls	r1, r2, #22
 8007ea2:	bf58      	it	pl
 8007ea4:	9902      	ldrpl	r1, [sp, #8]
 8007ea6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007eaa:	bf58      	it	pl
 8007eac:	eba9 0101 	subpl.w	r1, r9, r1
 8007eb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007eb4:	bf58      	it	pl
 8007eb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	f04f 0900 	mov.w	r9, #0
 8007ec0:	e789      	b.n	8007dd6 <_scanf_float+0x192>
 8007ec2:	f04f 0a03 	mov.w	sl, #3
 8007ec6:	e786      	b.n	8007dd6 <_scanf_float+0x192>
 8007ec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4798      	blx	r3
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f43f aedb 	beq.w	8007c8e <_scanf_float+0x4a>
 8007ed8:	e6e6      	b.n	8007ca8 <_scanf_float+0x64>
 8007eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ee2:	463a      	mov	r2, r7
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4798      	blx	r3
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	e6e8      	b.n	8007cc2 <_scanf_float+0x7e>
 8007ef0:	1e6b      	subs	r3, r5, #1
 8007ef2:	2b06      	cmp	r3, #6
 8007ef4:	d824      	bhi.n	8007f40 <_scanf_float+0x2fc>
 8007ef6:	2d02      	cmp	r5, #2
 8007ef8:	d836      	bhi.n	8007f68 <_scanf_float+0x324>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	429e      	cmp	r6, r3
 8007efe:	f67f aee4 	bls.w	8007cca <_scanf_float+0x86>
 8007f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f0a:	463a      	mov	r2, r7
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4798      	blx	r3
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	e7f0      	b.n	8007efa <_scanf_float+0x2b6>
 8007f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007f20:	463a      	mov	r2, r7
 8007f22:	4640      	mov	r0, r8
 8007f24:	4798      	blx	r3
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f30:	fa5f fa8a 	uxtb.w	sl, sl
 8007f34:	f1ba 0f02 	cmp.w	sl, #2
 8007f38:	d1ee      	bne.n	8007f18 <_scanf_float+0x2d4>
 8007f3a:	3d03      	subs	r5, #3
 8007f3c:	b2ed      	uxtb	r5, r5
 8007f3e:	1b76      	subs	r6, r6, r5
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	05da      	lsls	r2, r3, #23
 8007f44:	d530      	bpl.n	8007fa8 <_scanf_float+0x364>
 8007f46:	055b      	lsls	r3, r3, #21
 8007f48:	d511      	bpl.n	8007f6e <_scanf_float+0x32a>
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	429e      	cmp	r6, r3
 8007f4e:	f67f aebc 	bls.w	8007cca <_scanf_float+0x86>
 8007f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f5a:	463a      	mov	r2, r7
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	4798      	blx	r3
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	e7f0      	b.n	8007f4a <_scanf_float+0x306>
 8007f68:	46aa      	mov	sl, r5
 8007f6a:	46b3      	mov	fp, r6
 8007f6c:	e7de      	b.n	8007f2c <_scanf_float+0x2e8>
 8007f6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	2965      	cmp	r1, #101	@ 0x65
 8007f76:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	d00c      	beq.n	8007f9c <_scanf_float+0x358>
 8007f82:	2945      	cmp	r1, #69	@ 0x45
 8007f84:	d00a      	beq.n	8007f9c <_scanf_float+0x358>
 8007f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	4798      	blx	r3
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	1eb5      	subs	r5, r6, #2
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fa0:	463a      	mov	r2, r7
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4798      	blx	r3
 8007fa6:	462e      	mov	r6, r5
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	f012 0210 	ands.w	r2, r2, #16
 8007fae:	d001      	beq.n	8007fb4 <_scanf_float+0x370>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e68b      	b.n	8007ccc <_scanf_float+0x88>
 8007fb4:	7032      	strb	r2, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc0:	d11c      	bne.n	8007ffc <_scanf_float+0x3b8>
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	454b      	cmp	r3, r9
 8007fc6:	eba3 0209 	sub.w	r2, r3, r9
 8007fca:	d123      	bne.n	8008014 <_scanf_float+0x3d0>
 8007fcc:	9901      	ldr	r1, [sp, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	f7ff f9d9 	bl	8007388 <_strtod_r>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	6821      	ldr	r1, [r4, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f011 0f02 	tst.w	r1, #2
 8007fe0:	ec57 6b10 	vmov	r6, r7, d0
 8007fe4:	f103 0204 	add.w	r2, r3, #4
 8007fe8:	d01f      	beq.n	800802a <_scanf_float+0x3e6>
 8007fea:	9903      	ldr	r1, [sp, #12]
 8007fec:	600a      	str	r2, [r1, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	e9c3 6700 	strd	r6, r7, [r3]
 8007ff4:	68e3      	ldr	r3, [r4, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60e3      	str	r3, [r4, #12]
 8007ffa:	e7d9      	b.n	8007fb0 <_scanf_float+0x36c>
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0e4      	beq.n	8007fcc <_scanf_float+0x388>
 8008002:	9905      	ldr	r1, [sp, #20]
 8008004:	230a      	movs	r3, #10
 8008006:	3101      	adds	r1, #1
 8008008:	4640      	mov	r0, r8
 800800a:	f002 f9ef 	bl	800a3ec <_strtol_r>
 800800e:	9b04      	ldr	r3, [sp, #16]
 8008010:	9e05      	ldr	r6, [sp, #20]
 8008012:	1ac2      	subs	r2, r0, r3
 8008014:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008018:	429e      	cmp	r6, r3
 800801a:	bf28      	it	cs
 800801c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008020:	4910      	ldr	r1, [pc, #64]	@ (8008064 <_scanf_float+0x420>)
 8008022:	4630      	mov	r0, r6
 8008024:	f000 f8e4 	bl	80081f0 <siprintf>
 8008028:	e7d0      	b.n	8007fcc <_scanf_float+0x388>
 800802a:	f011 0f04 	tst.w	r1, #4
 800802e:	9903      	ldr	r1, [sp, #12]
 8008030:	600a      	str	r2, [r1, #0]
 8008032:	d1dc      	bne.n	8007fee <_scanf_float+0x3aa>
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	4632      	mov	r2, r6
 8008038:	463b      	mov	r3, r7
 800803a:	4630      	mov	r0, r6
 800803c:	4639      	mov	r1, r7
 800803e:	f7f8 fd7d 	bl	8000b3c <__aeabi_dcmpun>
 8008042:	b128      	cbz	r0, 8008050 <_scanf_float+0x40c>
 8008044:	4808      	ldr	r0, [pc, #32]	@ (8008068 <_scanf_float+0x424>)
 8008046:	f000 fabb 	bl	80085c0 <nanf>
 800804a:	ed85 0a00 	vstr	s0, [r5]
 800804e:	e7d1      	b.n	8007ff4 <_scanf_float+0x3b0>
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 fdd0 	bl	8000bf8 <__aeabi_d2f>
 8008058:	6028      	str	r0, [r5, #0]
 800805a:	e7cb      	b.n	8007ff4 <_scanf_float+0x3b0>
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	e629      	b.n	8007cb6 <_scanf_float+0x72>
 8008062:	bf00      	nop
 8008064:	0800b3e4 	.word	0x0800b3e4
 8008068:	0800b785 	.word	0x0800b785

0800806c <std>:
 800806c:	2300      	movs	r3, #0
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	e9c0 3300 	strd	r3, r3, [r0]
 8008076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800807a:	6083      	str	r3, [r0, #8]
 800807c:	8181      	strh	r1, [r0, #12]
 800807e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008080:	81c2      	strh	r2, [r0, #14]
 8008082:	6183      	str	r3, [r0, #24]
 8008084:	4619      	mov	r1, r3
 8008086:	2208      	movs	r2, #8
 8008088:	305c      	adds	r0, #92	@ 0x5c
 800808a:	f000 f9e1 	bl	8008450 <memset>
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x58>)
 8008090:	6263      	str	r3, [r4, #36]	@ 0x24
 8008092:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <std+0x5c>)
 8008094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <std+0x60>)
 8008098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <std+0x64>)
 800809c:	6323      	str	r3, [r4, #48]	@ 0x30
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <std+0x68>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	429c      	cmp	r4, r3
 80080a4:	d006      	beq.n	80080b4 <std+0x48>
 80080a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080aa:	4294      	cmp	r4, r2
 80080ac:	d002      	beq.n	80080b4 <std+0x48>
 80080ae:	33d0      	adds	r3, #208	@ 0xd0
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d105      	bne.n	80080c0 <std+0x54>
 80080b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f000 ba66 	b.w	800858c <__retarget_lock_init_recursive>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	08008231 	.word	0x08008231
 80080c8:	08008253 	.word	0x08008253
 80080cc:	0800828b 	.word	0x0800828b
 80080d0:	080082af 	.word	0x080082af
 80080d4:	20000400 	.word	0x20000400

080080d8 <stdio_exit_handler>:
 80080d8:	4a02      	ldr	r2, [pc, #8]	@ (80080e4 <stdio_exit_handler+0xc>)
 80080da:	4903      	ldr	r1, [pc, #12]	@ (80080e8 <stdio_exit_handler+0x10>)
 80080dc:	4803      	ldr	r0, [pc, #12]	@ (80080ec <stdio_exit_handler+0x14>)
 80080de:	f000 b869 	b.w	80081b4 <_fwalk_sglue>
 80080e2:	bf00      	nop
 80080e4:	20000024 	.word	0x20000024
 80080e8:	0800a7c1 	.word	0x0800a7c1
 80080ec:	200001a0 	.word	0x200001a0

080080f0 <cleanup_stdio>:
 80080f0:	6841      	ldr	r1, [r0, #4]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <cleanup_stdio+0x34>)
 80080f4:	4299      	cmp	r1, r3
 80080f6:	b510      	push	{r4, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	d001      	beq.n	8008100 <cleanup_stdio+0x10>
 80080fc:	f002 fb60 	bl	800a7c0 <_fflush_r>
 8008100:	68a1      	ldr	r1, [r4, #8]
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <cleanup_stdio+0x38>)
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <cleanup_stdio+0x1e>
 8008108:	4620      	mov	r0, r4
 800810a:	f002 fb59 	bl	800a7c0 <_fflush_r>
 800810e:	68e1      	ldr	r1, [r4, #12]
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <cleanup_stdio+0x3c>)
 8008112:	4299      	cmp	r1, r3
 8008114:	d004      	beq.n	8008120 <cleanup_stdio+0x30>
 8008116:	4620      	mov	r0, r4
 8008118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800811c:	f002 bb50 	b.w	800a7c0 <_fflush_r>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	20000400 	.word	0x20000400
 8008128:	20000468 	.word	0x20000468
 800812c:	200004d0 	.word	0x200004d0

08008130 <global_stdio_init.part.0>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <global_stdio_init.part.0+0x30>)
 8008134:	4c0b      	ldr	r4, [pc, #44]	@ (8008164 <global_stdio_init.part.0+0x34>)
 8008136:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <global_stdio_init.part.0+0x38>)
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	4620      	mov	r0, r4
 800813c:	2200      	movs	r2, #0
 800813e:	2104      	movs	r1, #4
 8008140:	f7ff ff94 	bl	800806c <std>
 8008144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008148:	2201      	movs	r2, #1
 800814a:	2109      	movs	r1, #9
 800814c:	f7ff ff8e 	bl	800806c <std>
 8008150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008154:	2202      	movs	r2, #2
 8008156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815a:	2112      	movs	r1, #18
 800815c:	f7ff bf86 	b.w	800806c <std>
 8008160:	20000538 	.word	0x20000538
 8008164:	20000400 	.word	0x20000400
 8008168:	080080d9 	.word	0x080080d9

0800816c <__sfp_lock_acquire>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__sfp_lock_acquire+0x8>)
 800816e:	f000 ba0e 	b.w	800858e <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	20000541 	.word	0x20000541

08008178 <__sfp_lock_release>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__sfp_lock_release+0x8>)
 800817a:	f000 ba09 	b.w	8008590 <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	20000541 	.word	0x20000541

08008184 <__sinit>:
 8008184:	b510      	push	{r4, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	f7ff fff0 	bl	800816c <__sfp_lock_acquire>
 800818c:	6a23      	ldr	r3, [r4, #32]
 800818e:	b11b      	cbz	r3, 8008198 <__sinit+0x14>
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f7ff bff0 	b.w	8008178 <__sfp_lock_release>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__sinit+0x28>)
 800819a:	6223      	str	r3, [r4, #32]
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <__sinit+0x2c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f5      	bne.n	8008190 <__sinit+0xc>
 80081a4:	f7ff ffc4 	bl	8008130 <global_stdio_init.part.0>
 80081a8:	e7f2      	b.n	8008190 <__sinit+0xc>
 80081aa:	bf00      	nop
 80081ac:	080080f1 	.word	0x080080f1
 80081b0:	20000538 	.word	0x20000538

080081b4 <_fwalk_sglue>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	4607      	mov	r7, r0
 80081ba:	4688      	mov	r8, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	2600      	movs	r6, #0
 80081c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c4:	f1b9 0901 	subs.w	r9, r9, #1
 80081c8:	d505      	bpl.n	80081d6 <_fwalk_sglue+0x22>
 80081ca:	6824      	ldr	r4, [r4, #0]
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d1f7      	bne.n	80081c0 <_fwalk_sglue+0xc>
 80081d0:	4630      	mov	r0, r6
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d907      	bls.n	80081ec <_fwalk_sglue+0x38>
 80081dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081e0:	3301      	adds	r3, #1
 80081e2:	d003      	beq.n	80081ec <_fwalk_sglue+0x38>
 80081e4:	4629      	mov	r1, r5
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c0      	blx	r8
 80081ea:	4306      	orrs	r6, r0
 80081ec:	3568      	adds	r5, #104	@ 0x68
 80081ee:	e7e9      	b.n	80081c4 <_fwalk_sglue+0x10>

080081f0 <siprintf>:
 80081f0:	b40e      	push	{r1, r2, r3}
 80081f2:	b500      	push	{lr}
 80081f4:	b09c      	sub	sp, #112	@ 0x70
 80081f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	9006      	str	r0, [sp, #24]
 80081fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008200:	4809      	ldr	r0, [pc, #36]	@ (8008228 <siprintf+0x38>)
 8008202:	9107      	str	r1, [sp, #28]
 8008204:	9104      	str	r1, [sp, #16]
 8008206:	4909      	ldr	r1, [pc, #36]	@ (800822c <siprintf+0x3c>)
 8008208:	f853 2b04 	ldr.w	r2, [r3], #4
 800820c:	9105      	str	r1, [sp, #20]
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	a902      	add	r1, sp, #8
 8008214:	f002 f954 	bl	800a4c0 <_svfiprintf_r>
 8008218:	9b02      	ldr	r3, [sp, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	b01c      	add	sp, #112	@ 0x70
 8008220:	f85d eb04 	ldr.w	lr, [sp], #4
 8008224:	b003      	add	sp, #12
 8008226:	4770      	bx	lr
 8008228:	2000019c 	.word	0x2000019c
 800822c:	ffff0208 	.word	0xffff0208

08008230 <__sread>:
 8008230:	b510      	push	{r4, lr}
 8008232:	460c      	mov	r4, r1
 8008234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008238:	f000 f94a 	bl	80084d0 <_read_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	bfab      	itete	ge
 8008240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008242:	89a3      	ldrhlt	r3, [r4, #12]
 8008244:	181b      	addge	r3, r3, r0
 8008246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800824a:	bfac      	ite	ge
 800824c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800824e:	81a3      	strhlt	r3, [r4, #12]
 8008250:	bd10      	pop	{r4, pc}

08008252 <__swrite>:
 8008252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008256:	461f      	mov	r7, r3
 8008258:	898b      	ldrh	r3, [r1, #12]
 800825a:	05db      	lsls	r3, r3, #23
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	4616      	mov	r6, r2
 8008262:	d505      	bpl.n	8008270 <__swrite+0x1e>
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	2302      	movs	r3, #2
 800826a:	2200      	movs	r2, #0
 800826c:	f000 f91e 	bl	80084ac <_lseek_r>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	4632      	mov	r2, r6
 800827e:	463b      	mov	r3, r7
 8008280:	4628      	mov	r0, r5
 8008282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	f000 b945 	b.w	8008514 <_write_r>

0800828a <__sseek>:
 800828a:	b510      	push	{r4, lr}
 800828c:	460c      	mov	r4, r1
 800828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008292:	f000 f90b 	bl	80084ac <_lseek_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	bf15      	itete	ne
 800829c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800829e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082a6:	81a3      	strheq	r3, [r4, #12]
 80082a8:	bf18      	it	ne
 80082aa:	81a3      	strhne	r3, [r4, #12]
 80082ac:	bd10      	pop	{r4, pc}

080082ae <__sclose>:
 80082ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b2:	f000 b8eb 	b.w	800848c <_close_r>

080082b6 <_vsniprintf_r>:
 80082b6:	b530      	push	{r4, r5, lr}
 80082b8:	4614      	mov	r4, r2
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	b09b      	sub	sp, #108	@ 0x6c
 80082be:	4605      	mov	r5, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	da05      	bge.n	80082d0 <_vsniprintf_r+0x1a>
 80082c4:	238b      	movs	r3, #139	@ 0x8b
 80082c6:	6003      	str	r3, [r0, #0]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	b01b      	add	sp, #108	@ 0x6c
 80082ce:	bd30      	pop	{r4, r5, pc}
 80082d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80082d8:	bf14      	ite	ne
 80082da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082de:	4623      	moveq	r3, r4
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082e8:	9100      	str	r1, [sp, #0]
 80082ea:	9104      	str	r1, [sp, #16]
 80082ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80082f0:	4669      	mov	r1, sp
 80082f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80082f4:	f002 f8e4 	bl	800a4c0 <_svfiprintf_r>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	bfbc      	itt	lt
 80082fc:	238b      	movlt	r3, #139	@ 0x8b
 80082fe:	602b      	strlt	r3, [r5, #0]
 8008300:	2c00      	cmp	r4, #0
 8008302:	d0e3      	beq.n	80082cc <_vsniprintf_r+0x16>
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e7df      	b.n	80082cc <_vsniprintf_r+0x16>

0800830c <vsniprintf>:
 800830c:	b507      	push	{r0, r1, r2, lr}
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	460a      	mov	r2, r1
 8008314:	4601      	mov	r1, r0
 8008316:	4803      	ldr	r0, [pc, #12]	@ (8008324 <vsniprintf+0x18>)
 8008318:	6800      	ldr	r0, [r0, #0]
 800831a:	f7ff ffcc 	bl	80082b6 <_vsniprintf_r>
 800831e:	b003      	add	sp, #12
 8008320:	f85d fb04 	ldr.w	pc, [sp], #4
 8008324:	2000019c 	.word	0x2000019c

08008328 <__swbuf_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	460e      	mov	r6, r1
 800832c:	4614      	mov	r4, r2
 800832e:	4605      	mov	r5, r0
 8008330:	b118      	cbz	r0, 800833a <__swbuf_r+0x12>
 8008332:	6a03      	ldr	r3, [r0, #32]
 8008334:	b90b      	cbnz	r3, 800833a <__swbuf_r+0x12>
 8008336:	f7ff ff25 	bl	8008184 <__sinit>
 800833a:	69a3      	ldr	r3, [r4, #24]
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	071a      	lsls	r2, r3, #28
 8008342:	d501      	bpl.n	8008348 <__swbuf_r+0x20>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b943      	cbnz	r3, 800835a <__swbuf_r+0x32>
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f000 f82a 	bl	80083a4 <__swsetup_r>
 8008350:	b118      	cbz	r0, 800835a <__swbuf_r+0x32>
 8008352:	f04f 37ff 	mov.w	r7, #4294967295
 8008356:	4638      	mov	r0, r7
 8008358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	1a98      	subs	r0, r3, r2
 8008360:	6963      	ldr	r3, [r4, #20]
 8008362:	b2f6      	uxtb	r6, r6
 8008364:	4283      	cmp	r3, r0
 8008366:	4637      	mov	r7, r6
 8008368:	dc05      	bgt.n	8008376 <__swbuf_r+0x4e>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f002 fa27 	bl	800a7c0 <_fflush_r>
 8008372:	2800      	cmp	r0, #0
 8008374:	d1ed      	bne.n	8008352 <__swbuf_r+0x2a>
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	3b01      	subs	r3, #1
 800837a:	60a3      	str	r3, [r4, #8]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	701e      	strb	r6, [r3, #0]
 8008384:	6962      	ldr	r2, [r4, #20]
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	429a      	cmp	r2, r3
 800838a:	d004      	beq.n	8008396 <__swbuf_r+0x6e>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	07db      	lsls	r3, r3, #31
 8008390:	d5e1      	bpl.n	8008356 <__swbuf_r+0x2e>
 8008392:	2e0a      	cmp	r6, #10
 8008394:	d1df      	bne.n	8008356 <__swbuf_r+0x2e>
 8008396:	4621      	mov	r1, r4
 8008398:	4628      	mov	r0, r5
 800839a:	f002 fa11 	bl	800a7c0 <_fflush_r>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d0d9      	beq.n	8008356 <__swbuf_r+0x2e>
 80083a2:	e7d6      	b.n	8008352 <__swbuf_r+0x2a>

080083a4 <__swsetup_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4b29      	ldr	r3, [pc, #164]	@ (800844c <__swsetup_r+0xa8>)
 80083a8:	4605      	mov	r5, r0
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	460c      	mov	r4, r1
 80083ae:	b118      	cbz	r0, 80083b8 <__swsetup_r+0x14>
 80083b0:	6a03      	ldr	r3, [r0, #32]
 80083b2:	b90b      	cbnz	r3, 80083b8 <__swsetup_r+0x14>
 80083b4:	f7ff fee6 	bl	8008184 <__sinit>
 80083b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083bc:	0719      	lsls	r1, r3, #28
 80083be:	d422      	bmi.n	8008406 <__swsetup_r+0x62>
 80083c0:	06da      	lsls	r2, r3, #27
 80083c2:	d407      	bmi.n	80083d4 <__swsetup_r+0x30>
 80083c4:	2209      	movs	r2, #9
 80083c6:	602a      	str	r2, [r5, #0]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	f04f 30ff 	mov.w	r0, #4294967295
 80083d2:	e033      	b.n	800843c <__swsetup_r+0x98>
 80083d4:	0758      	lsls	r0, r3, #29
 80083d6:	d512      	bpl.n	80083fe <__swsetup_r+0x5a>
 80083d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083da:	b141      	cbz	r1, 80083ee <__swsetup_r+0x4a>
 80083dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d002      	beq.n	80083ea <__swsetup_r+0x46>
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 ff3f 	bl	8009268 <_free_r>
 80083ea:	2300      	movs	r3, #0
 80083ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	2300      	movs	r3, #0
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	b94b      	cbnz	r3, 800841e <__swsetup_r+0x7a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008414:	d003      	beq.n	800841e <__swsetup_r+0x7a>
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f002 fa1f 	bl	800a85c <__smakebuf_r>
 800841e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008422:	f013 0201 	ands.w	r2, r3, #1
 8008426:	d00a      	beq.n	800843e <__swsetup_r+0x9a>
 8008428:	2200      	movs	r2, #0
 800842a:	60a2      	str	r2, [r4, #8]
 800842c:	6962      	ldr	r2, [r4, #20]
 800842e:	4252      	negs	r2, r2
 8008430:	61a2      	str	r2, [r4, #24]
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	b942      	cbnz	r2, 8008448 <__swsetup_r+0xa4>
 8008436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800843a:	d1c5      	bne.n	80083c8 <__swsetup_r+0x24>
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	0799      	lsls	r1, r3, #30
 8008440:	bf58      	it	pl
 8008442:	6962      	ldrpl	r2, [r4, #20]
 8008444:	60a2      	str	r2, [r4, #8]
 8008446:	e7f4      	b.n	8008432 <__swsetup_r+0x8e>
 8008448:	2000      	movs	r0, #0
 800844a:	e7f7      	b.n	800843c <__swsetup_r+0x98>
 800844c:	2000019c 	.word	0x2000019c

08008450 <memset>:
 8008450:	4402      	add	r2, r0
 8008452:	4603      	mov	r3, r0
 8008454:	4293      	cmp	r3, r2
 8008456:	d100      	bne.n	800845a <memset+0xa>
 8008458:	4770      	bx	lr
 800845a:	f803 1b01 	strb.w	r1, [r3], #1
 800845e:	e7f9      	b.n	8008454 <memset+0x4>

08008460 <strncmp>:
 8008460:	b510      	push	{r4, lr}
 8008462:	b16a      	cbz	r2, 8008480 <strncmp+0x20>
 8008464:	3901      	subs	r1, #1
 8008466:	1884      	adds	r4, r0, r2
 8008468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008470:	429a      	cmp	r2, r3
 8008472:	d103      	bne.n	800847c <strncmp+0x1c>
 8008474:	42a0      	cmp	r0, r4
 8008476:	d001      	beq.n	800847c <strncmp+0x1c>
 8008478:	2a00      	cmp	r2, #0
 800847a:	d1f5      	bne.n	8008468 <strncmp+0x8>
 800847c:	1ad0      	subs	r0, r2, r3
 800847e:	bd10      	pop	{r4, pc}
 8008480:	4610      	mov	r0, r2
 8008482:	e7fc      	b.n	800847e <strncmp+0x1e>

08008484 <_localeconv_r>:
 8008484:	4800      	ldr	r0, [pc, #0]	@ (8008488 <_localeconv_r+0x4>)
 8008486:	4770      	bx	lr
 8008488:	20000120 	.word	0x20000120

0800848c <_close_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	@ (80084a8 <_close_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7fb f84d 	bl	8003536 <_close>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_close_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_close_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2000053c 	.word	0x2000053c

080084ac <_lseek_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d07      	ldr	r5, [pc, #28]	@ (80084cc <_lseek_r+0x20>)
 80084b0:	4604      	mov	r4, r0
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7fb f862 	bl	8003584 <_lseek>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_lseek_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_lseek_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2000053c 	.word	0x2000053c

080084d0 <_read_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	@ (80084f0 <_read_r+0x20>)
 80084d4:	4604      	mov	r4, r0
 80084d6:	4608      	mov	r0, r1
 80084d8:	4611      	mov	r1, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7fa fff0 	bl	80034c4 <_read>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_read_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_read_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	2000053c 	.word	0x2000053c

080084f4 <_sbrk_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d06      	ldr	r5, [pc, #24]	@ (8008510 <_sbrk_r+0x1c>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	f7fb f84e 	bl	80035a0 <_sbrk>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_sbrk_r+0x1a>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_sbrk_r+0x1a>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	2000053c 	.word	0x2000053c

08008514 <_write_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	@ (8008534 <_write_r+0x20>)
 8008518:	4604      	mov	r4, r0
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	2200      	movs	r2, #0
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7fa ffeb 	bl	80034fe <_write>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_write_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_write_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	2000053c 	.word	0x2000053c

08008538 <__errno>:
 8008538:	4b01      	ldr	r3, [pc, #4]	@ (8008540 <__errno+0x8>)
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	2000019c 	.word	0x2000019c

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4d0d      	ldr	r5, [pc, #52]	@ (800857c <__libc_init_array+0x38>)
 8008548:	4c0d      	ldr	r4, [pc, #52]	@ (8008580 <__libc_init_array+0x3c>)
 800854a:	1b64      	subs	r4, r4, r5
 800854c:	10a4      	asrs	r4, r4, #2
 800854e:	2600      	movs	r6, #0
 8008550:	42a6      	cmp	r6, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	4d0b      	ldr	r5, [pc, #44]	@ (8008584 <__libc_init_array+0x40>)
 8008556:	4c0c      	ldr	r4, [pc, #48]	@ (8008588 <__libc_init_array+0x44>)
 8008558:	f002 fbfe 	bl	800ad58 <_init>
 800855c:	1b64      	subs	r4, r4, r5
 800855e:	10a4      	asrs	r4, r4, #2
 8008560:	2600      	movs	r6, #0
 8008562:	42a6      	cmp	r6, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f855 3b04 	ldr.w	r3, [r5], #4
 800856c:	4798      	blx	r3
 800856e:	3601      	adds	r6, #1
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f855 3b04 	ldr.w	r3, [r5], #4
 8008576:	4798      	blx	r3
 8008578:	3601      	adds	r6, #1
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	0800b790 	.word	0x0800b790
 8008580:	0800b790 	.word	0x0800b790
 8008584:	0800b790 	.word	0x0800b790
 8008588:	0800b794 	.word	0x0800b794

0800858c <__retarget_lock_init_recursive>:
 800858c:	4770      	bx	lr

0800858e <__retarget_lock_acquire_recursive>:
 800858e:	4770      	bx	lr

08008590 <__retarget_lock_release_recursive>:
 8008590:	4770      	bx	lr

08008592 <memcpy>:
 8008592:	440a      	add	r2, r1
 8008594:	4291      	cmp	r1, r2
 8008596:	f100 33ff 	add.w	r3, r0, #4294967295
 800859a:	d100      	bne.n	800859e <memcpy+0xc>
 800859c:	4770      	bx	lr
 800859e:	b510      	push	{r4, lr}
 80085a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a8:	4291      	cmp	r1, r2
 80085aa:	d1f9      	bne.n	80085a0 <memcpy+0xe>
 80085ac:	bd10      	pop	{r4, pc}
	...

080085b0 <nan>:
 80085b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085b8 <nan+0x8>
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	00000000 	.word	0x00000000
 80085bc:	7ff80000 	.word	0x7ff80000

080085c0 <nanf>:
 80085c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80085c8 <nanf+0x8>
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	7fc00000 	.word	0x7fc00000

080085cc <quorem>:
 80085cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	6903      	ldr	r3, [r0, #16]
 80085d2:	690c      	ldr	r4, [r1, #16]
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	4607      	mov	r7, r0
 80085d8:	db7e      	blt.n	80086d8 <quorem+0x10c>
 80085da:	3c01      	subs	r4, #1
 80085dc:	f101 0814 	add.w	r8, r1, #20
 80085e0:	00a3      	lsls	r3, r4, #2
 80085e2:	f100 0514 	add.w	r5, r0, #20
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085f6:	3301      	adds	r3, #1
 80085f8:	429a      	cmp	r2, r3
 80085fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008602:	d32e      	bcc.n	8008662 <quorem+0x96>
 8008604:	f04f 0a00 	mov.w	sl, #0
 8008608:	46c4      	mov	ip, r8
 800860a:	46ae      	mov	lr, r5
 800860c:	46d3      	mov	fp, sl
 800860e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008612:	b298      	uxth	r0, r3
 8008614:	fb06 a000 	mla	r0, r6, r0, sl
 8008618:	0c02      	lsrs	r2, r0, #16
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	fb06 2303 	mla	r3, r6, r3, r2
 8008620:	f8de 2000 	ldr.w	r2, [lr]
 8008624:	b280      	uxth	r0, r0
 8008626:	b292      	uxth	r2, r2
 8008628:	1a12      	subs	r2, r2, r0
 800862a:	445a      	add	r2, fp
 800862c:	f8de 0000 	ldr.w	r0, [lr]
 8008630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008634:	b29b      	uxth	r3, r3
 8008636:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800863a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800863e:	b292      	uxth	r2, r2
 8008640:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008644:	45e1      	cmp	r9, ip
 8008646:	f84e 2b04 	str.w	r2, [lr], #4
 800864a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800864e:	d2de      	bcs.n	800860e <quorem+0x42>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	58eb      	ldr	r3, [r5, r3]
 8008654:	b92b      	cbnz	r3, 8008662 <quorem+0x96>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	3b04      	subs	r3, #4
 800865a:	429d      	cmp	r5, r3
 800865c:	461a      	mov	r2, r3
 800865e:	d32f      	bcc.n	80086c0 <quorem+0xf4>
 8008660:	613c      	str	r4, [r7, #16]
 8008662:	4638      	mov	r0, r7
 8008664:	f001 fc5a 	bl	8009f1c <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	db25      	blt.n	80086b8 <quorem+0xec>
 800866c:	4629      	mov	r1, r5
 800866e:	2000      	movs	r0, #0
 8008670:	f858 2b04 	ldr.w	r2, [r8], #4
 8008674:	f8d1 c000 	ldr.w	ip, [r1]
 8008678:	fa1f fe82 	uxth.w	lr, r2
 800867c:	fa1f f38c 	uxth.w	r3, ip
 8008680:	eba3 030e 	sub.w	r3, r3, lr
 8008684:	4403      	add	r3, r0
 8008686:	0c12      	lsrs	r2, r2, #16
 8008688:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800868c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008690:	b29b      	uxth	r3, r3
 8008692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008696:	45c1      	cmp	r9, r8
 8008698:	f841 3b04 	str.w	r3, [r1], #4
 800869c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086a0:	d2e6      	bcs.n	8008670 <quorem+0xa4>
 80086a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086aa:	b922      	cbnz	r2, 80086b6 <quorem+0xea>
 80086ac:	3b04      	subs	r3, #4
 80086ae:	429d      	cmp	r5, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	d30b      	bcc.n	80086cc <quorem+0x100>
 80086b4:	613c      	str	r4, [r7, #16]
 80086b6:	3601      	adds	r6, #1
 80086b8:	4630      	mov	r0, r6
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	3b04      	subs	r3, #4
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	d1cb      	bne.n	8008660 <quorem+0x94>
 80086c8:	3c01      	subs	r4, #1
 80086ca:	e7c6      	b.n	800865a <quorem+0x8e>
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	3b04      	subs	r3, #4
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	d1ef      	bne.n	80086b4 <quorem+0xe8>
 80086d4:	3c01      	subs	r4, #1
 80086d6:	e7ea      	b.n	80086ae <quorem+0xe2>
 80086d8:	2000      	movs	r0, #0
 80086da:	e7ee      	b.n	80086ba <quorem+0xee>
 80086dc:	0000      	movs	r0, r0
	...

080086e0 <_dtoa_r>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	69c7      	ldr	r7, [r0, #28]
 80086e6:	b099      	sub	sp, #100	@ 0x64
 80086e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086ec:	ec55 4b10 	vmov	r4, r5, d0
 80086f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086f4:	4683      	mov	fp, r0
 80086f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80086f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086fa:	b97f      	cbnz	r7, 800871c <_dtoa_r+0x3c>
 80086fc:	2010      	movs	r0, #16
 80086fe:	f7fd ff83 	bl	8006608 <malloc>
 8008702:	4602      	mov	r2, r0
 8008704:	f8cb 001c 	str.w	r0, [fp, #28]
 8008708:	b920      	cbnz	r0, 8008714 <_dtoa_r+0x34>
 800870a:	4ba7      	ldr	r3, [pc, #668]	@ (80089a8 <_dtoa_r+0x2c8>)
 800870c:	21ef      	movs	r1, #239	@ 0xef
 800870e:	48a7      	ldr	r0, [pc, #668]	@ (80089ac <_dtoa_r+0x2cc>)
 8008710:	f002 f91c 	bl	800a94c <__assert_func>
 8008714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008718:	6007      	str	r7, [r0, #0]
 800871a:	60c7      	str	r7, [r0, #12]
 800871c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	b159      	cbz	r1, 800873c <_dtoa_r+0x5c>
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	604a      	str	r2, [r1, #4]
 8008728:	2301      	movs	r3, #1
 800872a:	4093      	lsls	r3, r2
 800872c:	608b      	str	r3, [r1, #8]
 800872e:	4658      	mov	r0, fp
 8008730:	f001 f970 	bl	8009a14 <_Bfree>
 8008734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	1e2b      	subs	r3, r5, #0
 800873e:	bfb9      	ittee	lt
 8008740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008744:	9303      	strlt	r3, [sp, #12]
 8008746:	2300      	movge	r3, #0
 8008748:	6033      	strge	r3, [r6, #0]
 800874a:	9f03      	ldr	r7, [sp, #12]
 800874c:	4b98      	ldr	r3, [pc, #608]	@ (80089b0 <_dtoa_r+0x2d0>)
 800874e:	bfbc      	itt	lt
 8008750:	2201      	movlt	r2, #1
 8008752:	6032      	strlt	r2, [r6, #0]
 8008754:	43bb      	bics	r3, r7
 8008756:	d112      	bne.n	800877e <_dtoa_r+0x9e>
 8008758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800875a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008764:	4323      	orrs	r3, r4
 8008766:	f000 854d 	beq.w	8009204 <_dtoa_r+0xb24>
 800876a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800876c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80089c4 <_dtoa_r+0x2e4>
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 854f 	beq.w	8009214 <_dtoa_r+0xb34>
 8008776:	f10a 0303 	add.w	r3, sl, #3
 800877a:	f000 bd49 	b.w	8009210 <_dtoa_r+0xb30>
 800877e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	ec51 0b17 	vmov	r0, r1, d7
 8008788:	2300      	movs	r3, #0
 800878a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800878e:	f7f8 f9a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008792:	4680      	mov	r8, r0
 8008794:	b158      	cbz	r0, 80087ae <_dtoa_r+0xce>
 8008796:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008798:	2301      	movs	r3, #1
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800879e:	b113      	cbz	r3, 80087a6 <_dtoa_r+0xc6>
 80087a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087a2:	4b84      	ldr	r3, [pc, #528]	@ (80089b4 <_dtoa_r+0x2d4>)
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80089c8 <_dtoa_r+0x2e8>
 80087aa:	f000 bd33 	b.w	8009214 <_dtoa_r+0xb34>
 80087ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80087b2:	aa16      	add	r2, sp, #88	@ 0x58
 80087b4:	a917      	add	r1, sp, #92	@ 0x5c
 80087b6:	4658      	mov	r0, fp
 80087b8:	f001 fcd0 	bl	800a15c <__d2b>
 80087bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80087c0:	4681      	mov	r9, r0
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d077      	beq.n	80088b6 <_dtoa_r+0x1d6>
 80087c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80087cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087e0:	4619      	mov	r1, r3
 80087e2:	2200      	movs	r2, #0
 80087e4:	4b74      	ldr	r3, [pc, #464]	@ (80089b8 <_dtoa_r+0x2d8>)
 80087e6:	f7f7 fd57 	bl	8000298 <__aeabi_dsub>
 80087ea:	a369      	add	r3, pc, #420	@ (adr r3, 8008990 <_dtoa_r+0x2b0>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 ff0a 	bl	8000608 <__aeabi_dmul>
 80087f4:	a368      	add	r3, pc, #416	@ (adr r3, 8008998 <_dtoa_r+0x2b8>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd4f 	bl	800029c <__adddf3>
 80087fe:	4604      	mov	r4, r0
 8008800:	4630      	mov	r0, r6
 8008802:	460d      	mov	r5, r1
 8008804:	f7f7 fe96 	bl	8000534 <__aeabi_i2d>
 8008808:	a365      	add	r3, pc, #404	@ (adr r3, 80089a0 <_dtoa_r+0x2c0>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f7 fd3f 	bl	800029c <__adddf3>
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	f7f8 f9a1 	bl	8000b68 <__aeabi_d2iz>
 8008826:	2200      	movs	r2, #0
 8008828:	4607      	mov	r7, r0
 800882a:	2300      	movs	r3, #0
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f8 f95c 	bl	8000aec <__aeabi_dcmplt>
 8008834:	b140      	cbz	r0, 8008848 <_dtoa_r+0x168>
 8008836:	4638      	mov	r0, r7
 8008838:	f7f7 fe7c 	bl	8000534 <__aeabi_i2d>
 800883c:	4622      	mov	r2, r4
 800883e:	462b      	mov	r3, r5
 8008840:	f7f8 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008844:	b900      	cbnz	r0, 8008848 <_dtoa_r+0x168>
 8008846:	3f01      	subs	r7, #1
 8008848:	2f16      	cmp	r7, #22
 800884a:	d851      	bhi.n	80088f0 <_dtoa_r+0x210>
 800884c:	4b5b      	ldr	r3, [pc, #364]	@ (80089bc <_dtoa_r+0x2dc>)
 800884e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800885a:	f7f8 f947 	bl	8000aec <__aeabi_dcmplt>
 800885e:	2800      	cmp	r0, #0
 8008860:	d048      	beq.n	80088f4 <_dtoa_r+0x214>
 8008862:	3f01      	subs	r7, #1
 8008864:	2300      	movs	r3, #0
 8008866:	9312      	str	r3, [sp, #72]	@ 0x48
 8008868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800886a:	1b9b      	subs	r3, r3, r6
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	bf44      	itt	mi
 8008870:	f1c3 0801 	rsbmi	r8, r3, #1
 8008874:	2300      	movmi	r3, #0
 8008876:	9208      	str	r2, [sp, #32]
 8008878:	bf54      	ite	pl
 800887a:	f04f 0800 	movpl.w	r8, #0
 800887e:	9308      	strmi	r3, [sp, #32]
 8008880:	2f00      	cmp	r7, #0
 8008882:	db39      	blt.n	80088f8 <_dtoa_r+0x218>
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008888:	443b      	add	r3, r7
 800888a:	9308      	str	r3, [sp, #32]
 800888c:	2300      	movs	r3, #0
 800888e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008892:	2b09      	cmp	r3, #9
 8008894:	d864      	bhi.n	8008960 <_dtoa_r+0x280>
 8008896:	2b05      	cmp	r3, #5
 8008898:	bfc4      	itt	gt
 800889a:	3b04      	subgt	r3, #4
 800889c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	f1a3 0302 	sub.w	r3, r3, #2
 80088a4:	bfcc      	ite	gt
 80088a6:	2400      	movgt	r4, #0
 80088a8:	2401      	movle	r4, #1
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d863      	bhi.n	8008976 <_dtoa_r+0x296>
 80088ae:	e8df f003 	tbb	[pc, r3]
 80088b2:	372a      	.short	0x372a
 80088b4:	5535      	.short	0x5535
 80088b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80088ba:	441e      	add	r6, r3
 80088bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	bfc1      	itttt	gt
 80088c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088c8:	409f      	lslgt	r7, r3
 80088ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088d2:	bfd6      	itet	le
 80088d4:	f1c3 0320 	rsble	r3, r3, #32
 80088d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80088dc:	fa04 f003 	lslle.w	r0, r4, r3
 80088e0:	f7f7 fe18 	bl	8000514 <__aeabi_ui2d>
 80088e4:	2201      	movs	r2, #1
 80088e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088ea:	3e01      	subs	r6, #1
 80088ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80088ee:	e777      	b.n	80087e0 <_dtoa_r+0x100>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e7b8      	b.n	8008866 <_dtoa_r+0x186>
 80088f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80088f6:	e7b7      	b.n	8008868 <_dtoa_r+0x188>
 80088f8:	427b      	negs	r3, r7
 80088fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80088fc:	2300      	movs	r3, #0
 80088fe:	eba8 0807 	sub.w	r8, r8, r7
 8008902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008904:	e7c4      	b.n	8008890 <_dtoa_r+0x1b0>
 8008906:	2300      	movs	r3, #0
 8008908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800890a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc35      	bgt.n	800897c <_dtoa_r+0x29c>
 8008910:	2301      	movs	r3, #1
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	461a      	mov	r2, r3
 8008918:	920e      	str	r2, [sp, #56]	@ 0x38
 800891a:	e00b      	b.n	8008934 <_dtoa_r+0x254>
 800891c:	2301      	movs	r3, #1
 800891e:	e7f3      	b.n	8008908 <_dtoa_r+0x228>
 8008920:	2300      	movs	r3, #0
 8008922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	3301      	adds	r3, #1
 800892c:	2b01      	cmp	r3, #1
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	bfb8      	it	lt
 8008932:	2301      	movlt	r3, #1
 8008934:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008938:	2100      	movs	r1, #0
 800893a:	2204      	movs	r2, #4
 800893c:	f102 0514 	add.w	r5, r2, #20
 8008940:	429d      	cmp	r5, r3
 8008942:	d91f      	bls.n	8008984 <_dtoa_r+0x2a4>
 8008944:	6041      	str	r1, [r0, #4]
 8008946:	4658      	mov	r0, fp
 8008948:	f001 f824 	bl	8009994 <_Balloc>
 800894c:	4682      	mov	sl, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d13c      	bne.n	80089cc <_dtoa_r+0x2ec>
 8008952:	4b1b      	ldr	r3, [pc, #108]	@ (80089c0 <_dtoa_r+0x2e0>)
 8008954:	4602      	mov	r2, r0
 8008956:	f240 11af 	movw	r1, #431	@ 0x1af
 800895a:	e6d8      	b.n	800870e <_dtoa_r+0x2e>
 800895c:	2301      	movs	r3, #1
 800895e:	e7e0      	b.n	8008922 <_dtoa_r+0x242>
 8008960:	2401      	movs	r4, #1
 8008962:	2300      	movs	r3, #0
 8008964:	9309      	str	r3, [sp, #36]	@ 0x24
 8008966:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008968:	f04f 33ff 	mov.w	r3, #4294967295
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	2200      	movs	r2, #0
 8008972:	2312      	movs	r3, #18
 8008974:	e7d0      	b.n	8008918 <_dtoa_r+0x238>
 8008976:	2301      	movs	r3, #1
 8008978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800897a:	e7f5      	b.n	8008968 <_dtoa_r+0x288>
 800897c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	9307      	str	r3, [sp, #28]
 8008982:	e7d7      	b.n	8008934 <_dtoa_r+0x254>
 8008984:	3101      	adds	r1, #1
 8008986:	0052      	lsls	r2, r2, #1
 8008988:	e7d8      	b.n	800893c <_dtoa_r+0x25c>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	636f4361 	.word	0x636f4361
 8008994:	3fd287a7 	.word	0x3fd287a7
 8008998:	8b60c8b3 	.word	0x8b60c8b3
 800899c:	3fc68a28 	.word	0x3fc68a28
 80089a0:	509f79fb 	.word	0x509f79fb
 80089a4:	3fd34413 	.word	0x3fd34413
 80089a8:	0800b3fe 	.word	0x0800b3fe
 80089ac:	0800b415 	.word	0x0800b415
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	0800b3c1 	.word	0x0800b3c1
 80089b8:	3ff80000 	.word	0x3ff80000
 80089bc:	0800b570 	.word	0x0800b570
 80089c0:	0800b46d 	.word	0x0800b46d
 80089c4:	0800b3fa 	.word	0x0800b3fa
 80089c8:	0800b3c0 	.word	0x0800b3c0
 80089cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089d0:	6018      	str	r0, [r3, #0]
 80089d2:	9b07      	ldr	r3, [sp, #28]
 80089d4:	2b0e      	cmp	r3, #14
 80089d6:	f200 80a4 	bhi.w	8008b22 <_dtoa_r+0x442>
 80089da:	2c00      	cmp	r4, #0
 80089dc:	f000 80a1 	beq.w	8008b22 <_dtoa_r+0x442>
 80089e0:	2f00      	cmp	r7, #0
 80089e2:	dd33      	ble.n	8008a4c <_dtoa_r+0x36c>
 80089e4:	4bad      	ldr	r3, [pc, #692]	@ (8008c9c <_dtoa_r+0x5bc>)
 80089e6:	f007 020f 	and.w	r2, r7, #15
 80089ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ee:	ed93 7b00 	vldr	d7, [r3]
 80089f2:	05f8      	lsls	r0, r7, #23
 80089f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089fc:	d516      	bpl.n	8008a2c <_dtoa_r+0x34c>
 80089fe:	4ba8      	ldr	r3, [pc, #672]	@ (8008ca0 <_dtoa_r+0x5c0>)
 8008a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a08:	f7f7 ff28 	bl	800085c <__aeabi_ddiv>
 8008a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a10:	f004 040f 	and.w	r4, r4, #15
 8008a14:	2603      	movs	r6, #3
 8008a16:	4da2      	ldr	r5, [pc, #648]	@ (8008ca0 <_dtoa_r+0x5c0>)
 8008a18:	b954      	cbnz	r4, 8008a30 <_dtoa_r+0x350>
 8008a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a22:	f7f7 ff1b 	bl	800085c <__aeabi_ddiv>
 8008a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a2a:	e028      	b.n	8008a7e <_dtoa_r+0x39e>
 8008a2c:	2602      	movs	r6, #2
 8008a2e:	e7f2      	b.n	8008a16 <_dtoa_r+0x336>
 8008a30:	07e1      	lsls	r1, r4, #31
 8008a32:	d508      	bpl.n	8008a46 <_dtoa_r+0x366>
 8008a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a44:	3601      	adds	r6, #1
 8008a46:	1064      	asrs	r4, r4, #1
 8008a48:	3508      	adds	r5, #8
 8008a4a:	e7e5      	b.n	8008a18 <_dtoa_r+0x338>
 8008a4c:	f000 80d2 	beq.w	8008bf4 <_dtoa_r+0x514>
 8008a50:	427c      	negs	r4, r7
 8008a52:	4b92      	ldr	r3, [pc, #584]	@ (8008c9c <_dtoa_r+0x5bc>)
 8008a54:	4d92      	ldr	r5, [pc, #584]	@ (8008ca0 <_dtoa_r+0x5c0>)
 8008a56:	f004 020f 	and.w	r2, r4, #15
 8008a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a66:	f7f7 fdcf 	bl	8000608 <__aeabi_dmul>
 8008a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a6e:	1124      	asrs	r4, r4, #4
 8008a70:	2300      	movs	r3, #0
 8008a72:	2602      	movs	r6, #2
 8008a74:	2c00      	cmp	r4, #0
 8008a76:	f040 80b2 	bne.w	8008bde <_dtoa_r+0x4fe>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1d3      	bne.n	8008a26 <_dtoa_r+0x346>
 8008a7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 80b7 	beq.w	8008bf8 <_dtoa_r+0x518>
 8008a8a:	4b86      	ldr	r3, [pc, #536]	@ (8008ca4 <_dtoa_r+0x5c4>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f8 f82b 	bl	8000aec <__aeabi_dcmplt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f000 80ae 	beq.w	8008bf8 <_dtoa_r+0x518>
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 80aa 	beq.w	8008bf8 <_dtoa_r+0x518>
 8008aa4:	9b00      	ldr	r3, [sp, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd37      	ble.n	8008b1a <_dtoa_r+0x43a>
 8008aaa:	1e7b      	subs	r3, r7, #1
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8008ca8 <_dtoa_r+0x5c8>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f7 fda7 	bl	8000608 <__aeabi_dmul>
 8008aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008abe:	9c00      	ldr	r4, [sp, #0]
 8008ac0:	3601      	adds	r6, #1
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7f7 fd36 	bl	8000534 <__aeabi_i2d>
 8008ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008acc:	f7f7 fd9c 	bl	8000608 <__aeabi_dmul>
 8008ad0:	4b76      	ldr	r3, [pc, #472]	@ (8008cac <_dtoa_r+0x5cc>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7f7 fbe2 	bl	800029c <__adddf3>
 8008ad8:	4605      	mov	r5, r0
 8008ada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	f040 808d 	bne.w	8008bfe <_dtoa_r+0x51e>
 8008ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae8:	4b71      	ldr	r3, [pc, #452]	@ (8008cb0 <_dtoa_r+0x5d0>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fbd4 	bl	8000298 <__aeabi_dsub>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4633      	mov	r3, r6
 8008afc:	f7f8 f814 	bl	8000b28 <__aeabi_dcmpgt>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	f040 828b 	bne.w	800901c <_dtoa_r+0x93c>
 8008b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b10:	f7f7 ffec 	bl	8000aec <__aeabi_dcmplt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f040 8128 	bne.w	8008d6a <_dtoa_r+0x68a>
 8008b1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f2c0 815a 	blt.w	8008dde <_dtoa_r+0x6fe>
 8008b2a:	2f0e      	cmp	r7, #14
 8008b2c:	f300 8157 	bgt.w	8008dde <_dtoa_r+0x6fe>
 8008b30:	4b5a      	ldr	r3, [pc, #360]	@ (8008c9c <_dtoa_r+0x5bc>)
 8008b32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b36:	ed93 7b00 	vldr	d7, [r3]
 8008b3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	ed8d 7b00 	vstr	d7, [sp]
 8008b42:	da03      	bge.n	8008b4c <_dtoa_r+0x46c>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f340 8101 	ble.w	8008d4e <_dtoa_r+0x66e>
 8008b4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b50:	4656      	mov	r6, sl
 8008b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 fe7f 	bl	800085c <__aeabi_ddiv>
 8008b5e:	f7f8 f803 	bl	8000b68 <__aeabi_d2iz>
 8008b62:	4680      	mov	r8, r0
 8008b64:	f7f7 fce6 	bl	8000534 <__aeabi_i2d>
 8008b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b6c:	f7f7 fd4c 	bl	8000608 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b7c:	f7f7 fb8c 	bl	8000298 <__aeabi_dsub>
 8008b80:	f806 4b01 	strb.w	r4, [r6], #1
 8008b84:	9d07      	ldr	r5, [sp, #28]
 8008b86:	eba6 040a 	sub.w	r4, r6, sl
 8008b8a:	42a5      	cmp	r5, r4
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	f040 8117 	bne.w	8008dc2 <_dtoa_r+0x6e2>
 8008b94:	f7f7 fb82 	bl	800029c <__adddf3>
 8008b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	f7f7 ffc2 	bl	8000b28 <__aeabi_dcmpgt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f040 80f9 	bne.w	8008d9c <_dtoa_r+0x6bc>
 8008baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bb6:	b118      	cbz	r0, 8008bc0 <_dtoa_r+0x4e0>
 8008bb8:	f018 0f01 	tst.w	r8, #1
 8008bbc:	f040 80ee 	bne.w	8008d9c <_dtoa_r+0x6bc>
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f000 ff26 	bl	8009a14 <_Bfree>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	7033      	strb	r3, [r6, #0]
 8008bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bce:	3701      	adds	r7, #1
 8008bd0:	601f      	str	r7, [r3, #0]
 8008bd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 831d 	beq.w	8009214 <_dtoa_r+0xb34>
 8008bda:	601e      	str	r6, [r3, #0]
 8008bdc:	e31a      	b.n	8009214 <_dtoa_r+0xb34>
 8008bde:	07e2      	lsls	r2, r4, #31
 8008be0:	d505      	bpl.n	8008bee <_dtoa_r+0x50e>
 8008be2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008be6:	f7f7 fd0f 	bl	8000608 <__aeabi_dmul>
 8008bea:	3601      	adds	r6, #1
 8008bec:	2301      	movs	r3, #1
 8008bee:	1064      	asrs	r4, r4, #1
 8008bf0:	3508      	adds	r5, #8
 8008bf2:	e73f      	b.n	8008a74 <_dtoa_r+0x394>
 8008bf4:	2602      	movs	r6, #2
 8008bf6:	e742      	b.n	8008a7e <_dtoa_r+0x39e>
 8008bf8:	9c07      	ldr	r4, [sp, #28]
 8008bfa:	9704      	str	r7, [sp, #16]
 8008bfc:	e761      	b.n	8008ac2 <_dtoa_r+0x3e2>
 8008bfe:	4b27      	ldr	r3, [pc, #156]	@ (8008c9c <_dtoa_r+0x5bc>)
 8008c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c0a:	4454      	add	r4, sl
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d053      	beq.n	8008cb8 <_dtoa_r+0x5d8>
 8008c10:	4928      	ldr	r1, [pc, #160]	@ (8008cb4 <_dtoa_r+0x5d4>)
 8008c12:	2000      	movs	r0, #0
 8008c14:	f7f7 fe22 	bl	800085c <__aeabi_ddiv>
 8008c18:	4633      	mov	r3, r6
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	f7f7 fb3c 	bl	8000298 <__aeabi_dsub>
 8008c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c24:	4656      	mov	r6, sl
 8008c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2a:	f7f7 ff9d 	bl	8000b68 <__aeabi_d2iz>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	f7f7 fc80 	bl	8000534 <__aeabi_i2d>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	3530      	adds	r5, #48	@ 0x30
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c4a:	f806 5b01 	strb.w	r5, [r6], #1
 8008c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c52:	f7f7 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d171      	bne.n	8008d3e <_dtoa_r+0x65e>
 8008c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5e:	4911      	ldr	r1, [pc, #68]	@ (8008ca4 <_dtoa_r+0x5c4>)
 8008c60:	2000      	movs	r0, #0
 8008c62:	f7f7 fb19 	bl	8000298 <__aeabi_dsub>
 8008c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c6a:	f7f7 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f040 8095 	bne.w	8008d9e <_dtoa_r+0x6be>
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	f43f af50 	beq.w	8008b1a <_dtoa_r+0x43a>
 8008c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <_dtoa_r+0x5c8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	f7f7 fcc1 	bl	8000608 <__aeabi_dmul>
 8008c86:	4b08      	ldr	r3, [pc, #32]	@ (8008ca8 <_dtoa_r+0x5c8>)
 8008c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c92:	f7f7 fcb9 	bl	8000608 <__aeabi_dmul>
 8008c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c9a:	e7c4      	b.n	8008c26 <_dtoa_r+0x546>
 8008c9c:	0800b570 	.word	0x0800b570
 8008ca0:	0800b548 	.word	0x0800b548
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	401c0000 	.word	0x401c0000
 8008cb0:	40140000 	.word	0x40140000
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008cc6:	4656      	mov	r6, sl
 8008cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ccc:	f7f7 ff4c 	bl	8000b68 <__aeabi_d2iz>
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	f7f7 fc2f 	bl	8000534 <__aeabi_i2d>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cde:	f7f7 fadb 	bl	8000298 <__aeabi_dsub>
 8008ce2:	3530      	adds	r5, #48	@ 0x30
 8008ce4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	42a6      	cmp	r6, r4
 8008cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	d124      	bne.n	8008d42 <_dtoa_r+0x662>
 8008cf8:	4bac      	ldr	r3, [pc, #688]	@ (8008fac <_dtoa_r+0x8cc>)
 8008cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cfe:	f7f7 facd 	bl	800029c <__adddf3>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d0a:	f7f7 ff0d 	bl	8000b28 <__aeabi_dcmpgt>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d145      	bne.n	8008d9e <_dtoa_r+0x6be>
 8008d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d16:	49a5      	ldr	r1, [pc, #660]	@ (8008fac <_dtoa_r+0x8cc>)
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f7f7 fabd 	bl	8000298 <__aeabi_dsub>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d26:	f7f7 fee1 	bl	8000aec <__aeabi_dcmplt>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	f43f aef5 	beq.w	8008b1a <_dtoa_r+0x43a>
 8008d30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008d32:	1e73      	subs	r3, r6, #1
 8008d34:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d3a:	2b30      	cmp	r3, #48	@ 0x30
 8008d3c:	d0f8      	beq.n	8008d30 <_dtoa_r+0x650>
 8008d3e:	9f04      	ldr	r7, [sp, #16]
 8008d40:	e73e      	b.n	8008bc0 <_dtoa_r+0x4e0>
 8008d42:	4b9b      	ldr	r3, [pc, #620]	@ (8008fb0 <_dtoa_r+0x8d0>)
 8008d44:	f7f7 fc60 	bl	8000608 <__aeabi_dmul>
 8008d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d4c:	e7bc      	b.n	8008cc8 <_dtoa_r+0x5e8>
 8008d4e:	d10c      	bne.n	8008d6a <_dtoa_r+0x68a>
 8008d50:	4b98      	ldr	r3, [pc, #608]	@ (8008fb4 <_dtoa_r+0x8d4>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d58:	f7f7 fc56 	bl	8000608 <__aeabi_dmul>
 8008d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d60:	f7f7 fed8 	bl	8000b14 <__aeabi_dcmpge>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f000 8157 	beq.w	8009018 <_dtoa_r+0x938>
 8008d6a:	2400      	movs	r4, #0
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d70:	43db      	mvns	r3, r3
 8008d72:	9304      	str	r3, [sp, #16]
 8008d74:	4656      	mov	r6, sl
 8008d76:	2700      	movs	r7, #0
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4658      	mov	r0, fp
 8008d7c:	f000 fe4a 	bl	8009a14 <_Bfree>
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	d0dc      	beq.n	8008d3e <_dtoa_r+0x65e>
 8008d84:	b12f      	cbz	r7, 8008d92 <_dtoa_r+0x6b2>
 8008d86:	42af      	cmp	r7, r5
 8008d88:	d003      	beq.n	8008d92 <_dtoa_r+0x6b2>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	f000 fe41 	bl	8009a14 <_Bfree>
 8008d92:	4629      	mov	r1, r5
 8008d94:	4658      	mov	r0, fp
 8008d96:	f000 fe3d 	bl	8009a14 <_Bfree>
 8008d9a:	e7d0      	b.n	8008d3e <_dtoa_r+0x65e>
 8008d9c:	9704      	str	r7, [sp, #16]
 8008d9e:	4633      	mov	r3, r6
 8008da0:	461e      	mov	r6, r3
 8008da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008da6:	2a39      	cmp	r2, #57	@ 0x39
 8008da8:	d107      	bne.n	8008dba <_dtoa_r+0x6da>
 8008daa:	459a      	cmp	sl, r3
 8008dac:	d1f8      	bne.n	8008da0 <_dtoa_r+0x6c0>
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	3201      	adds	r2, #1
 8008db2:	9204      	str	r2, [sp, #16]
 8008db4:	2230      	movs	r2, #48	@ 0x30
 8008db6:	f88a 2000 	strb.w	r2, [sl]
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	3201      	adds	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	e7bd      	b.n	8008d3e <_dtoa_r+0x65e>
 8008dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb0 <_dtoa_r+0x8d0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f7f7 fc1f 	bl	8000608 <__aeabi_dmul>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4604      	mov	r4, r0
 8008dd0:	460d      	mov	r5, r1
 8008dd2:	f7f7 fe81 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f aebb 	beq.w	8008b52 <_dtoa_r+0x472>
 8008ddc:	e6f0      	b.n	8008bc0 <_dtoa_r+0x4e0>
 8008dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	f000 80db 	beq.w	8008f9c <_dtoa_r+0x8bc>
 8008de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008de8:	2a01      	cmp	r2, #1
 8008dea:	f300 80bf 	bgt.w	8008f6c <_dtoa_r+0x88c>
 8008dee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008df0:	2a00      	cmp	r2, #0
 8008df2:	f000 80b7 	beq.w	8008f64 <_dtoa_r+0x884>
 8008df6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008dfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dfc:	4646      	mov	r6, r8
 8008dfe:	9a08      	ldr	r2, [sp, #32]
 8008e00:	2101      	movs	r1, #1
 8008e02:	441a      	add	r2, r3
 8008e04:	4658      	mov	r0, fp
 8008e06:	4498      	add	r8, r3
 8008e08:	9208      	str	r2, [sp, #32]
 8008e0a:	f000 ff01 	bl	8009c10 <__i2b>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b15e      	cbz	r6, 8008e2a <_dtoa_r+0x74a>
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd08      	ble.n	8008e2a <_dtoa_r+0x74a>
 8008e18:	42b3      	cmp	r3, r6
 8008e1a:	9a08      	ldr	r2, [sp, #32]
 8008e1c:	bfa8      	it	ge
 8008e1e:	4633      	movge	r3, r6
 8008e20:	eba8 0803 	sub.w	r8, r8, r3
 8008e24:	1af6      	subs	r6, r6, r3
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	9308      	str	r3, [sp, #32]
 8008e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e2c:	b1f3      	cbz	r3, 8008e6c <_dtoa_r+0x78c>
 8008e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80b7 	beq.w	8008fa4 <_dtoa_r+0x8c4>
 8008e36:	b18c      	cbz	r4, 8008e5c <_dtoa_r+0x77c>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	f000 ffa7 	bl	8009d90 <__pow5mult>
 8008e42:	464a      	mov	r2, r9
 8008e44:	4601      	mov	r1, r0
 8008e46:	4605      	mov	r5, r0
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f000 fef7 	bl	8009c3c <__multiply>
 8008e4e:	4649      	mov	r1, r9
 8008e50:	9004      	str	r0, [sp, #16]
 8008e52:	4658      	mov	r0, fp
 8008e54:	f000 fdde 	bl	8009a14 <_Bfree>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	4699      	mov	r9, r3
 8008e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e5e:	1b1a      	subs	r2, r3, r4
 8008e60:	d004      	beq.n	8008e6c <_dtoa_r+0x78c>
 8008e62:	4649      	mov	r1, r9
 8008e64:	4658      	mov	r0, fp
 8008e66:	f000 ff93 	bl	8009d90 <__pow5mult>
 8008e6a:	4681      	mov	r9, r0
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4658      	mov	r0, fp
 8008e70:	f000 fece 	bl	8009c10 <__i2b>
 8008e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e76:	4604      	mov	r4, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 81cf 	beq.w	800921c <_dtoa_r+0xb3c>
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4601      	mov	r1, r0
 8008e82:	4658      	mov	r0, fp
 8008e84:	f000 ff84 	bl	8009d90 <__pow5mult>
 8008e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	f300 8095 	bgt.w	8008fbc <_dtoa_r+0x8dc>
 8008e92:	9b02      	ldr	r3, [sp, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 8087 	bne.w	8008fa8 <_dtoa_r+0x8c8>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f040 8089 	bne.w	8008fb8 <_dtoa_r+0x8d8>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eac:	0d1b      	lsrs	r3, r3, #20
 8008eae:	051b      	lsls	r3, r3, #20
 8008eb0:	b12b      	cbz	r3, 8008ebe <_dtoa_r+0x7de>
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	9308      	str	r3, [sp, #32]
 8008eb8:	f108 0801 	add.w	r8, r8, #1
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 81b0 	beq.w	8009228 <_dtoa_r+0xb48>
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ece:	6918      	ldr	r0, [r3, #16]
 8008ed0:	f000 fe52 	bl	8009b78 <__hi0bits>
 8008ed4:	f1c0 0020 	rsb	r0, r0, #32
 8008ed8:	9b08      	ldr	r3, [sp, #32]
 8008eda:	4418      	add	r0, r3
 8008edc:	f010 001f 	ands.w	r0, r0, #31
 8008ee0:	d077      	beq.n	8008fd2 <_dtoa_r+0x8f2>
 8008ee2:	f1c0 0320 	rsb	r3, r0, #32
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	dd6b      	ble.n	8008fc2 <_dtoa_r+0x8e2>
 8008eea:	9b08      	ldr	r3, [sp, #32]
 8008eec:	f1c0 001c 	rsb	r0, r0, #28
 8008ef0:	4403      	add	r3, r0
 8008ef2:	4480      	add	r8, r0
 8008ef4:	4406      	add	r6, r0
 8008ef6:	9308      	str	r3, [sp, #32]
 8008ef8:	f1b8 0f00 	cmp.w	r8, #0
 8008efc:	dd05      	ble.n	8008f0a <_dtoa_r+0x82a>
 8008efe:	4649      	mov	r1, r9
 8008f00:	4642      	mov	r2, r8
 8008f02:	4658      	mov	r0, fp
 8008f04:	f000 ff9e 	bl	8009e44 <__lshift>
 8008f08:	4681      	mov	r9, r0
 8008f0a:	9b08      	ldr	r3, [sp, #32]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd05      	ble.n	8008f1c <_dtoa_r+0x83c>
 8008f10:	4621      	mov	r1, r4
 8008f12:	461a      	mov	r2, r3
 8008f14:	4658      	mov	r0, fp
 8008f16:	f000 ff95 	bl	8009e44 <__lshift>
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d059      	beq.n	8008fd6 <_dtoa_r+0x8f6>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4648      	mov	r0, r9
 8008f26:	f000 fff9 	bl	8009f1c <__mcmp>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	da53      	bge.n	8008fd6 <_dtoa_r+0x8f6>
 8008f2e:	1e7b      	subs	r3, r7, #1
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	4649      	mov	r1, r9
 8008f34:	2300      	movs	r3, #0
 8008f36:	220a      	movs	r2, #10
 8008f38:	4658      	mov	r0, fp
 8008f3a:	f000 fd8d 	bl	8009a58 <__multadd>
 8008f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f40:	4681      	mov	r9, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8172 	beq.w	800922c <_dtoa_r+0xb4c>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	4658      	mov	r0, fp
 8008f50:	f000 fd82 	bl	8009a58 <__multadd>
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	4605      	mov	r5, r0
 8008f5a:	dc67      	bgt.n	800902c <_dtoa_r+0x94c>
 8008f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	dc41      	bgt.n	8008fe6 <_dtoa_r+0x906>
 8008f62:	e063      	b.n	800902c <_dtoa_r+0x94c>
 8008f64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f6a:	e746      	b.n	8008dfa <_dtoa_r+0x71a>
 8008f6c:	9b07      	ldr	r3, [sp, #28]
 8008f6e:	1e5c      	subs	r4, r3, #1
 8008f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	bfbf      	itttt	lt
 8008f76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f7c:	1ae3      	sublt	r3, r4, r3
 8008f7e:	bfb4      	ite	lt
 8008f80:	18d2      	addlt	r2, r2, r3
 8008f82:	1b1c      	subge	r4, r3, r4
 8008f84:	9b07      	ldr	r3, [sp, #28]
 8008f86:	bfbc      	itt	lt
 8008f88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f8a:	2400      	movlt	r4, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfb5      	itete	lt
 8008f90:	eba8 0603 	sublt.w	r6, r8, r3
 8008f94:	9b07      	ldrge	r3, [sp, #28]
 8008f96:	2300      	movlt	r3, #0
 8008f98:	4646      	movge	r6, r8
 8008f9a:	e730      	b.n	8008dfe <_dtoa_r+0x71e>
 8008f9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008fa0:	4646      	mov	r6, r8
 8008fa2:	e735      	b.n	8008e10 <_dtoa_r+0x730>
 8008fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fa6:	e75c      	b.n	8008e62 <_dtoa_r+0x782>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e788      	b.n	8008ebe <_dtoa_r+0x7de>
 8008fac:	3fe00000 	.word	0x3fe00000
 8008fb0:	40240000 	.word	0x40240000
 8008fb4:	40140000 	.word	0x40140000
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	e780      	b.n	8008ebe <_dtoa_r+0x7de>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc0:	e782      	b.n	8008ec8 <_dtoa_r+0x7e8>
 8008fc2:	d099      	beq.n	8008ef8 <_dtoa_r+0x818>
 8008fc4:	9a08      	ldr	r2, [sp, #32]
 8008fc6:	331c      	adds	r3, #28
 8008fc8:	441a      	add	r2, r3
 8008fca:	4498      	add	r8, r3
 8008fcc:	441e      	add	r6, r3
 8008fce:	9208      	str	r2, [sp, #32]
 8008fd0:	e792      	b.n	8008ef8 <_dtoa_r+0x818>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	e7f6      	b.n	8008fc4 <_dtoa_r+0x8e4>
 8008fd6:	9b07      	ldr	r3, [sp, #28]
 8008fd8:	9704      	str	r7, [sp, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dc20      	bgt.n	8009020 <_dtoa_r+0x940>
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	dd1e      	ble.n	8009024 <_dtoa_r+0x944>
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f47f aec0 	bne.w	8008d6e <_dtoa_r+0x68e>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	2205      	movs	r2, #5
 8008ff2:	4658      	mov	r0, fp
 8008ff4:	f000 fd30 	bl	8009a58 <__multadd>
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4648      	mov	r0, r9
 8008ffe:	f000 ff8d 	bl	8009f1c <__mcmp>
 8009002:	2800      	cmp	r0, #0
 8009004:	f77f aeb3 	ble.w	8008d6e <_dtoa_r+0x68e>
 8009008:	4656      	mov	r6, sl
 800900a:	2331      	movs	r3, #49	@ 0x31
 800900c:	f806 3b01 	strb.w	r3, [r6], #1
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	e6ae      	b.n	8008d76 <_dtoa_r+0x696>
 8009018:	9c07      	ldr	r4, [sp, #28]
 800901a:	9704      	str	r7, [sp, #16]
 800901c:	4625      	mov	r5, r4
 800901e:	e7f3      	b.n	8009008 <_dtoa_r+0x928>
 8009020:	9b07      	ldr	r3, [sp, #28]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8104 	beq.w	8009234 <_dtoa_r+0xb54>
 800902c:	2e00      	cmp	r6, #0
 800902e:	dd05      	ble.n	800903c <_dtoa_r+0x95c>
 8009030:	4629      	mov	r1, r5
 8009032:	4632      	mov	r2, r6
 8009034:	4658      	mov	r0, fp
 8009036:	f000 ff05 	bl	8009e44 <__lshift>
 800903a:	4605      	mov	r5, r0
 800903c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d05a      	beq.n	80090f8 <_dtoa_r+0xa18>
 8009042:	6869      	ldr	r1, [r5, #4]
 8009044:	4658      	mov	r0, fp
 8009046:	f000 fca5 	bl	8009994 <_Balloc>
 800904a:	4606      	mov	r6, r0
 800904c:	b928      	cbnz	r0, 800905a <_dtoa_r+0x97a>
 800904e:	4b84      	ldr	r3, [pc, #528]	@ (8009260 <_dtoa_r+0xb80>)
 8009050:	4602      	mov	r2, r0
 8009052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009056:	f7ff bb5a 	b.w	800870e <_dtoa_r+0x2e>
 800905a:	692a      	ldr	r2, [r5, #16]
 800905c:	3202      	adds	r2, #2
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	f105 010c 	add.w	r1, r5, #12
 8009064:	300c      	adds	r0, #12
 8009066:	f7ff fa94 	bl	8008592 <memcpy>
 800906a:	2201      	movs	r2, #1
 800906c:	4631      	mov	r1, r6
 800906e:	4658      	mov	r0, fp
 8009070:	f000 fee8 	bl	8009e44 <__lshift>
 8009074:	f10a 0301 	add.w	r3, sl, #1
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	9b00      	ldr	r3, [sp, #0]
 800907c:	4453      	add	r3, sl
 800907e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	462f      	mov	r7, r5
 8009088:	930a      	str	r3, [sp, #40]	@ 0x28
 800908a:	4605      	mov	r5, r0
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	4621      	mov	r1, r4
 8009090:	3b01      	subs	r3, #1
 8009092:	4648      	mov	r0, r9
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	f7ff fa99 	bl	80085cc <quorem>
 800909a:	4639      	mov	r1, r7
 800909c:	9002      	str	r0, [sp, #8]
 800909e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090a2:	4648      	mov	r0, r9
 80090a4:	f000 ff3a 	bl	8009f1c <__mcmp>
 80090a8:	462a      	mov	r2, r5
 80090aa:	9008      	str	r0, [sp, #32]
 80090ac:	4621      	mov	r1, r4
 80090ae:	4658      	mov	r0, fp
 80090b0:	f000 ff50 	bl	8009f54 <__mdiff>
 80090b4:	68c2      	ldr	r2, [r0, #12]
 80090b6:	4606      	mov	r6, r0
 80090b8:	bb02      	cbnz	r2, 80090fc <_dtoa_r+0xa1c>
 80090ba:	4601      	mov	r1, r0
 80090bc:	4648      	mov	r0, r9
 80090be:	f000 ff2d 	bl	8009f1c <__mcmp>
 80090c2:	4602      	mov	r2, r0
 80090c4:	4631      	mov	r1, r6
 80090c6:	4658      	mov	r0, fp
 80090c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ca:	f000 fca3 	bl	8009a14 <_Bfree>
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090d2:	9e07      	ldr	r6, [sp, #28]
 80090d4:	ea43 0102 	orr.w	r1, r3, r2
 80090d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090da:	4319      	orrs	r1, r3
 80090dc:	d110      	bne.n	8009100 <_dtoa_r+0xa20>
 80090de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090e2:	d029      	beq.n	8009138 <_dtoa_r+0xa58>
 80090e4:	9b08      	ldr	r3, [sp, #32]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd02      	ble.n	80090f0 <_dtoa_r+0xa10>
 80090ea:	9b02      	ldr	r3, [sp, #8]
 80090ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090f0:	9b00      	ldr	r3, [sp, #0]
 80090f2:	f883 8000 	strb.w	r8, [r3]
 80090f6:	e63f      	b.n	8008d78 <_dtoa_r+0x698>
 80090f8:	4628      	mov	r0, r5
 80090fa:	e7bb      	b.n	8009074 <_dtoa_r+0x994>
 80090fc:	2201      	movs	r2, #1
 80090fe:	e7e1      	b.n	80090c4 <_dtoa_r+0x9e4>
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	db04      	blt.n	8009110 <_dtoa_r+0xa30>
 8009106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009108:	430b      	orrs	r3, r1
 800910a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800910c:	430b      	orrs	r3, r1
 800910e:	d120      	bne.n	8009152 <_dtoa_r+0xa72>
 8009110:	2a00      	cmp	r2, #0
 8009112:	dded      	ble.n	80090f0 <_dtoa_r+0xa10>
 8009114:	4649      	mov	r1, r9
 8009116:	2201      	movs	r2, #1
 8009118:	4658      	mov	r0, fp
 800911a:	f000 fe93 	bl	8009e44 <__lshift>
 800911e:	4621      	mov	r1, r4
 8009120:	4681      	mov	r9, r0
 8009122:	f000 fefb 	bl	8009f1c <__mcmp>
 8009126:	2800      	cmp	r0, #0
 8009128:	dc03      	bgt.n	8009132 <_dtoa_r+0xa52>
 800912a:	d1e1      	bne.n	80090f0 <_dtoa_r+0xa10>
 800912c:	f018 0f01 	tst.w	r8, #1
 8009130:	d0de      	beq.n	80090f0 <_dtoa_r+0xa10>
 8009132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009136:	d1d8      	bne.n	80090ea <_dtoa_r+0xa0a>
 8009138:	9a00      	ldr	r2, [sp, #0]
 800913a:	2339      	movs	r3, #57	@ 0x39
 800913c:	7013      	strb	r3, [r2, #0]
 800913e:	4633      	mov	r3, r6
 8009140:	461e      	mov	r6, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009148:	2a39      	cmp	r2, #57	@ 0x39
 800914a:	d052      	beq.n	80091f2 <_dtoa_r+0xb12>
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	e612      	b.n	8008d78 <_dtoa_r+0x698>
 8009152:	2a00      	cmp	r2, #0
 8009154:	dd07      	ble.n	8009166 <_dtoa_r+0xa86>
 8009156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800915a:	d0ed      	beq.n	8009138 <_dtoa_r+0xa58>
 800915c:	9a00      	ldr	r2, [sp, #0]
 800915e:	f108 0301 	add.w	r3, r8, #1
 8009162:	7013      	strb	r3, [r2, #0]
 8009164:	e608      	b.n	8008d78 <_dtoa_r+0x698>
 8009166:	9b07      	ldr	r3, [sp, #28]
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800916e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009170:	4293      	cmp	r3, r2
 8009172:	d028      	beq.n	80091c6 <_dtoa_r+0xae6>
 8009174:	4649      	mov	r1, r9
 8009176:	2300      	movs	r3, #0
 8009178:	220a      	movs	r2, #10
 800917a:	4658      	mov	r0, fp
 800917c:	f000 fc6c 	bl	8009a58 <__multadd>
 8009180:	42af      	cmp	r7, r5
 8009182:	4681      	mov	r9, r0
 8009184:	f04f 0300 	mov.w	r3, #0
 8009188:	f04f 020a 	mov.w	r2, #10
 800918c:	4639      	mov	r1, r7
 800918e:	4658      	mov	r0, fp
 8009190:	d107      	bne.n	80091a2 <_dtoa_r+0xac2>
 8009192:	f000 fc61 	bl	8009a58 <__multadd>
 8009196:	4607      	mov	r7, r0
 8009198:	4605      	mov	r5, r0
 800919a:	9b07      	ldr	r3, [sp, #28]
 800919c:	3301      	adds	r3, #1
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	e774      	b.n	800908c <_dtoa_r+0x9ac>
 80091a2:	f000 fc59 	bl	8009a58 <__multadd>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4607      	mov	r7, r0
 80091aa:	2300      	movs	r3, #0
 80091ac:	220a      	movs	r2, #10
 80091ae:	4658      	mov	r0, fp
 80091b0:	f000 fc52 	bl	8009a58 <__multadd>
 80091b4:	4605      	mov	r5, r0
 80091b6:	e7f0      	b.n	800919a <_dtoa_r+0xaba>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfcc      	ite	gt
 80091be:	461e      	movgt	r6, r3
 80091c0:	2601      	movle	r6, #1
 80091c2:	4456      	add	r6, sl
 80091c4:	2700      	movs	r7, #0
 80091c6:	4649      	mov	r1, r9
 80091c8:	2201      	movs	r2, #1
 80091ca:	4658      	mov	r0, fp
 80091cc:	f000 fe3a 	bl	8009e44 <__lshift>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4681      	mov	r9, r0
 80091d4:	f000 fea2 	bl	8009f1c <__mcmp>
 80091d8:	2800      	cmp	r0, #0
 80091da:	dcb0      	bgt.n	800913e <_dtoa_r+0xa5e>
 80091dc:	d102      	bne.n	80091e4 <_dtoa_r+0xb04>
 80091de:	f018 0f01 	tst.w	r8, #1
 80091e2:	d1ac      	bne.n	800913e <_dtoa_r+0xa5e>
 80091e4:	4633      	mov	r3, r6
 80091e6:	461e      	mov	r6, r3
 80091e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ec:	2a30      	cmp	r2, #48	@ 0x30
 80091ee:	d0fa      	beq.n	80091e6 <_dtoa_r+0xb06>
 80091f0:	e5c2      	b.n	8008d78 <_dtoa_r+0x698>
 80091f2:	459a      	cmp	sl, r3
 80091f4:	d1a4      	bne.n	8009140 <_dtoa_r+0xa60>
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	3301      	adds	r3, #1
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	2331      	movs	r3, #49	@ 0x31
 80091fe:	f88a 3000 	strb.w	r3, [sl]
 8009202:	e5b9      	b.n	8008d78 <_dtoa_r+0x698>
 8009204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009264 <_dtoa_r+0xb84>
 800920a:	b11b      	cbz	r3, 8009214 <_dtoa_r+0xb34>
 800920c:	f10a 0308 	add.w	r3, sl, #8
 8009210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	4650      	mov	r0, sl
 8009216:	b019      	add	sp, #100	@ 0x64
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921e:	2b01      	cmp	r3, #1
 8009220:	f77f ae37 	ble.w	8008e92 <_dtoa_r+0x7b2>
 8009224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009226:	930a      	str	r3, [sp, #40]	@ 0x28
 8009228:	2001      	movs	r0, #1
 800922a:	e655      	b.n	8008ed8 <_dtoa_r+0x7f8>
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f77f aed6 	ble.w	8008fe0 <_dtoa_r+0x900>
 8009234:	4656      	mov	r6, sl
 8009236:	4621      	mov	r1, r4
 8009238:	4648      	mov	r0, r9
 800923a:	f7ff f9c7 	bl	80085cc <quorem>
 800923e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009242:	f806 8b01 	strb.w	r8, [r6], #1
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	eba6 020a 	sub.w	r2, r6, sl
 800924c:	4293      	cmp	r3, r2
 800924e:	ddb3      	ble.n	80091b8 <_dtoa_r+0xad8>
 8009250:	4649      	mov	r1, r9
 8009252:	2300      	movs	r3, #0
 8009254:	220a      	movs	r2, #10
 8009256:	4658      	mov	r0, fp
 8009258:	f000 fbfe 	bl	8009a58 <__multadd>
 800925c:	4681      	mov	r9, r0
 800925e:	e7ea      	b.n	8009236 <_dtoa_r+0xb56>
 8009260:	0800b46d 	.word	0x0800b46d
 8009264:	0800b3f1 	.word	0x0800b3f1

08009268 <_free_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4605      	mov	r5, r0
 800926c:	2900      	cmp	r1, #0
 800926e:	d041      	beq.n	80092f4 <_free_r+0x8c>
 8009270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009274:	1f0c      	subs	r4, r1, #4
 8009276:	2b00      	cmp	r3, #0
 8009278:	bfb8      	it	lt
 800927a:	18e4      	addlt	r4, r4, r3
 800927c:	f7fd fa76 	bl	800676c <__malloc_lock>
 8009280:	4a1d      	ldr	r2, [pc, #116]	@ (80092f8 <_free_r+0x90>)
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	b933      	cbnz	r3, 8009294 <_free_r+0x2c>
 8009286:	6063      	str	r3, [r4, #4]
 8009288:	6014      	str	r4, [r2, #0]
 800928a:	4628      	mov	r0, r5
 800928c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009290:	f7fd ba72 	b.w	8006778 <__malloc_unlock>
 8009294:	42a3      	cmp	r3, r4
 8009296:	d908      	bls.n	80092aa <_free_r+0x42>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	1821      	adds	r1, r4, r0
 800929c:	428b      	cmp	r3, r1
 800929e:	bf01      	itttt	eq
 80092a0:	6819      	ldreq	r1, [r3, #0]
 80092a2:	685b      	ldreq	r3, [r3, #4]
 80092a4:	1809      	addeq	r1, r1, r0
 80092a6:	6021      	streq	r1, [r4, #0]
 80092a8:	e7ed      	b.n	8009286 <_free_r+0x1e>
 80092aa:	461a      	mov	r2, r3
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	b10b      	cbz	r3, 80092b4 <_free_r+0x4c>
 80092b0:	42a3      	cmp	r3, r4
 80092b2:	d9fa      	bls.n	80092aa <_free_r+0x42>
 80092b4:	6811      	ldr	r1, [r2, #0]
 80092b6:	1850      	adds	r0, r2, r1
 80092b8:	42a0      	cmp	r0, r4
 80092ba:	d10b      	bne.n	80092d4 <_free_r+0x6c>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	4401      	add	r1, r0
 80092c0:	1850      	adds	r0, r2, r1
 80092c2:	4283      	cmp	r3, r0
 80092c4:	6011      	str	r1, [r2, #0]
 80092c6:	d1e0      	bne.n	800928a <_free_r+0x22>
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	6053      	str	r3, [r2, #4]
 80092ce:	4408      	add	r0, r1
 80092d0:	6010      	str	r0, [r2, #0]
 80092d2:	e7da      	b.n	800928a <_free_r+0x22>
 80092d4:	d902      	bls.n	80092dc <_free_r+0x74>
 80092d6:	230c      	movs	r3, #12
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	e7d6      	b.n	800928a <_free_r+0x22>
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	1821      	adds	r1, r4, r0
 80092e0:	428b      	cmp	r3, r1
 80092e2:	bf04      	itt	eq
 80092e4:	6819      	ldreq	r1, [r3, #0]
 80092e6:	685b      	ldreq	r3, [r3, #4]
 80092e8:	6063      	str	r3, [r4, #4]
 80092ea:	bf04      	itt	eq
 80092ec:	1809      	addeq	r1, r1, r0
 80092ee:	6021      	streq	r1, [r4, #0]
 80092f0:	6054      	str	r4, [r2, #4]
 80092f2:	e7ca      	b.n	800928a <_free_r+0x22>
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	bf00      	nop
 80092f8:	200003fc 	.word	0x200003fc

080092fc <rshift>:
 80092fc:	6903      	ldr	r3, [r0, #16]
 80092fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009306:	ea4f 1261 	mov.w	r2, r1, asr #5
 800930a:	f100 0414 	add.w	r4, r0, #20
 800930e:	dd45      	ble.n	800939c <rshift+0xa0>
 8009310:	f011 011f 	ands.w	r1, r1, #31
 8009314:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800931c:	d10c      	bne.n	8009338 <rshift+0x3c>
 800931e:	f100 0710 	add.w	r7, r0, #16
 8009322:	4629      	mov	r1, r5
 8009324:	42b1      	cmp	r1, r6
 8009326:	d334      	bcc.n	8009392 <rshift+0x96>
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	1eea      	subs	r2, r5, #3
 800932e:	4296      	cmp	r6, r2
 8009330:	bf38      	it	cc
 8009332:	2300      	movcc	r3, #0
 8009334:	4423      	add	r3, r4
 8009336:	e015      	b.n	8009364 <rshift+0x68>
 8009338:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800933c:	f1c1 0820 	rsb	r8, r1, #32
 8009340:	40cf      	lsrs	r7, r1
 8009342:	f105 0e04 	add.w	lr, r5, #4
 8009346:	46a1      	mov	r9, r4
 8009348:	4576      	cmp	r6, lr
 800934a:	46f4      	mov	ip, lr
 800934c:	d815      	bhi.n	800937a <rshift+0x7e>
 800934e:	1a9a      	subs	r2, r3, r2
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	3a04      	subs	r2, #4
 8009354:	3501      	adds	r5, #1
 8009356:	42ae      	cmp	r6, r5
 8009358:	bf38      	it	cc
 800935a:	2200      	movcc	r2, #0
 800935c:	18a3      	adds	r3, r4, r2
 800935e:	50a7      	str	r7, [r4, r2]
 8009360:	b107      	cbz	r7, 8009364 <rshift+0x68>
 8009362:	3304      	adds	r3, #4
 8009364:	1b1a      	subs	r2, r3, r4
 8009366:	42a3      	cmp	r3, r4
 8009368:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800936c:	bf08      	it	eq
 800936e:	2300      	moveq	r3, #0
 8009370:	6102      	str	r2, [r0, #16]
 8009372:	bf08      	it	eq
 8009374:	6143      	streq	r3, [r0, #20]
 8009376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937a:	f8dc c000 	ldr.w	ip, [ip]
 800937e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009382:	ea4c 0707 	orr.w	r7, ip, r7
 8009386:	f849 7b04 	str.w	r7, [r9], #4
 800938a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800938e:	40cf      	lsrs	r7, r1
 8009390:	e7da      	b.n	8009348 <rshift+0x4c>
 8009392:	f851 cb04 	ldr.w	ip, [r1], #4
 8009396:	f847 cf04 	str.w	ip, [r7, #4]!
 800939a:	e7c3      	b.n	8009324 <rshift+0x28>
 800939c:	4623      	mov	r3, r4
 800939e:	e7e1      	b.n	8009364 <rshift+0x68>

080093a0 <__hexdig_fun>:
 80093a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	d802      	bhi.n	80093ae <__hexdig_fun+0xe>
 80093a8:	3820      	subs	r0, #32
 80093aa:	b2c0      	uxtb	r0, r0
 80093ac:	4770      	bx	lr
 80093ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d801      	bhi.n	80093ba <__hexdig_fun+0x1a>
 80093b6:	3847      	subs	r0, #71	@ 0x47
 80093b8:	e7f7      	b.n	80093aa <__hexdig_fun+0xa>
 80093ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d801      	bhi.n	80093c6 <__hexdig_fun+0x26>
 80093c2:	3827      	subs	r0, #39	@ 0x27
 80093c4:	e7f1      	b.n	80093aa <__hexdig_fun+0xa>
 80093c6:	2000      	movs	r0, #0
 80093c8:	4770      	bx	lr
	...

080093cc <__gethex>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	b085      	sub	sp, #20
 80093d2:	468a      	mov	sl, r1
 80093d4:	9302      	str	r3, [sp, #8]
 80093d6:	680b      	ldr	r3, [r1, #0]
 80093d8:	9001      	str	r0, [sp, #4]
 80093da:	4690      	mov	r8, r2
 80093dc:	1c9c      	adds	r4, r3, #2
 80093de:	46a1      	mov	r9, r4
 80093e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093e4:	2830      	cmp	r0, #48	@ 0x30
 80093e6:	d0fa      	beq.n	80093de <__gethex+0x12>
 80093e8:	eba9 0303 	sub.w	r3, r9, r3
 80093ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80093f0:	f7ff ffd6 	bl	80093a0 <__hexdig_fun>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d168      	bne.n	80094cc <__gethex+0x100>
 80093fa:	49a0      	ldr	r1, [pc, #640]	@ (800967c <__gethex+0x2b0>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	4648      	mov	r0, r9
 8009400:	f7ff f82e 	bl	8008460 <strncmp>
 8009404:	4607      	mov	r7, r0
 8009406:	2800      	cmp	r0, #0
 8009408:	d167      	bne.n	80094da <__gethex+0x10e>
 800940a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800940e:	4626      	mov	r6, r4
 8009410:	f7ff ffc6 	bl	80093a0 <__hexdig_fun>
 8009414:	2800      	cmp	r0, #0
 8009416:	d062      	beq.n	80094de <__gethex+0x112>
 8009418:	4623      	mov	r3, r4
 800941a:	7818      	ldrb	r0, [r3, #0]
 800941c:	2830      	cmp	r0, #48	@ 0x30
 800941e:	4699      	mov	r9, r3
 8009420:	f103 0301 	add.w	r3, r3, #1
 8009424:	d0f9      	beq.n	800941a <__gethex+0x4e>
 8009426:	f7ff ffbb 	bl	80093a0 <__hexdig_fun>
 800942a:	fab0 f580 	clz	r5, r0
 800942e:	096d      	lsrs	r5, r5, #5
 8009430:	f04f 0b01 	mov.w	fp, #1
 8009434:	464a      	mov	r2, r9
 8009436:	4616      	mov	r6, r2
 8009438:	3201      	adds	r2, #1
 800943a:	7830      	ldrb	r0, [r6, #0]
 800943c:	f7ff ffb0 	bl	80093a0 <__hexdig_fun>
 8009440:	2800      	cmp	r0, #0
 8009442:	d1f8      	bne.n	8009436 <__gethex+0x6a>
 8009444:	498d      	ldr	r1, [pc, #564]	@ (800967c <__gethex+0x2b0>)
 8009446:	2201      	movs	r2, #1
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff f809 	bl	8008460 <strncmp>
 800944e:	2800      	cmp	r0, #0
 8009450:	d13f      	bne.n	80094d2 <__gethex+0x106>
 8009452:	b944      	cbnz	r4, 8009466 <__gethex+0x9a>
 8009454:	1c74      	adds	r4, r6, #1
 8009456:	4622      	mov	r2, r4
 8009458:	4616      	mov	r6, r2
 800945a:	3201      	adds	r2, #1
 800945c:	7830      	ldrb	r0, [r6, #0]
 800945e:	f7ff ff9f 	bl	80093a0 <__hexdig_fun>
 8009462:	2800      	cmp	r0, #0
 8009464:	d1f8      	bne.n	8009458 <__gethex+0x8c>
 8009466:	1ba4      	subs	r4, r4, r6
 8009468:	00a7      	lsls	r7, r4, #2
 800946a:	7833      	ldrb	r3, [r6, #0]
 800946c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009470:	2b50      	cmp	r3, #80	@ 0x50
 8009472:	d13e      	bne.n	80094f2 <__gethex+0x126>
 8009474:	7873      	ldrb	r3, [r6, #1]
 8009476:	2b2b      	cmp	r3, #43	@ 0x2b
 8009478:	d033      	beq.n	80094e2 <__gethex+0x116>
 800947a:	2b2d      	cmp	r3, #45	@ 0x2d
 800947c:	d034      	beq.n	80094e8 <__gethex+0x11c>
 800947e:	1c71      	adds	r1, r6, #1
 8009480:	2400      	movs	r4, #0
 8009482:	7808      	ldrb	r0, [r1, #0]
 8009484:	f7ff ff8c 	bl	80093a0 <__hexdig_fun>
 8009488:	1e43      	subs	r3, r0, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b18      	cmp	r3, #24
 800948e:	d830      	bhi.n	80094f2 <__gethex+0x126>
 8009490:	f1a0 0210 	sub.w	r2, r0, #16
 8009494:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009498:	f7ff ff82 	bl	80093a0 <__hexdig_fun>
 800949c:	f100 3cff 	add.w	ip, r0, #4294967295
 80094a0:	fa5f fc8c 	uxtb.w	ip, ip
 80094a4:	f1bc 0f18 	cmp.w	ip, #24
 80094a8:	f04f 030a 	mov.w	r3, #10
 80094ac:	d91e      	bls.n	80094ec <__gethex+0x120>
 80094ae:	b104      	cbz	r4, 80094b2 <__gethex+0xe6>
 80094b0:	4252      	negs	r2, r2
 80094b2:	4417      	add	r7, r2
 80094b4:	f8ca 1000 	str.w	r1, [sl]
 80094b8:	b1ed      	cbz	r5, 80094f6 <__gethex+0x12a>
 80094ba:	f1bb 0f00 	cmp.w	fp, #0
 80094be:	bf0c      	ite	eq
 80094c0:	2506      	moveq	r5, #6
 80094c2:	2500      	movne	r5, #0
 80094c4:	4628      	mov	r0, r5
 80094c6:	b005      	add	sp, #20
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094cc:	2500      	movs	r5, #0
 80094ce:	462c      	mov	r4, r5
 80094d0:	e7b0      	b.n	8009434 <__gethex+0x68>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d1c7      	bne.n	8009466 <__gethex+0x9a>
 80094d6:	4627      	mov	r7, r4
 80094d8:	e7c7      	b.n	800946a <__gethex+0x9e>
 80094da:	464e      	mov	r6, r9
 80094dc:	462f      	mov	r7, r5
 80094de:	2501      	movs	r5, #1
 80094e0:	e7c3      	b.n	800946a <__gethex+0x9e>
 80094e2:	2400      	movs	r4, #0
 80094e4:	1cb1      	adds	r1, r6, #2
 80094e6:	e7cc      	b.n	8009482 <__gethex+0xb6>
 80094e8:	2401      	movs	r4, #1
 80094ea:	e7fb      	b.n	80094e4 <__gethex+0x118>
 80094ec:	fb03 0002 	mla	r0, r3, r2, r0
 80094f0:	e7ce      	b.n	8009490 <__gethex+0xc4>
 80094f2:	4631      	mov	r1, r6
 80094f4:	e7de      	b.n	80094b4 <__gethex+0xe8>
 80094f6:	eba6 0309 	sub.w	r3, r6, r9
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4629      	mov	r1, r5
 80094fe:	2b07      	cmp	r3, #7
 8009500:	dc0a      	bgt.n	8009518 <__gethex+0x14c>
 8009502:	9801      	ldr	r0, [sp, #4]
 8009504:	f000 fa46 	bl	8009994 <_Balloc>
 8009508:	4604      	mov	r4, r0
 800950a:	b940      	cbnz	r0, 800951e <__gethex+0x152>
 800950c:	4b5c      	ldr	r3, [pc, #368]	@ (8009680 <__gethex+0x2b4>)
 800950e:	4602      	mov	r2, r0
 8009510:	21e4      	movs	r1, #228	@ 0xe4
 8009512:	485c      	ldr	r0, [pc, #368]	@ (8009684 <__gethex+0x2b8>)
 8009514:	f001 fa1a 	bl	800a94c <__assert_func>
 8009518:	3101      	adds	r1, #1
 800951a:	105b      	asrs	r3, r3, #1
 800951c:	e7ef      	b.n	80094fe <__gethex+0x132>
 800951e:	f100 0a14 	add.w	sl, r0, #20
 8009522:	2300      	movs	r3, #0
 8009524:	4655      	mov	r5, sl
 8009526:	469b      	mov	fp, r3
 8009528:	45b1      	cmp	r9, r6
 800952a:	d337      	bcc.n	800959c <__gethex+0x1d0>
 800952c:	f845 bb04 	str.w	fp, [r5], #4
 8009530:	eba5 050a 	sub.w	r5, r5, sl
 8009534:	10ad      	asrs	r5, r5, #2
 8009536:	6125      	str	r5, [r4, #16]
 8009538:	4658      	mov	r0, fp
 800953a:	f000 fb1d 	bl	8009b78 <__hi0bits>
 800953e:	016d      	lsls	r5, r5, #5
 8009540:	f8d8 6000 	ldr.w	r6, [r8]
 8009544:	1a2d      	subs	r5, r5, r0
 8009546:	42b5      	cmp	r5, r6
 8009548:	dd54      	ble.n	80095f4 <__gethex+0x228>
 800954a:	1bad      	subs	r5, r5, r6
 800954c:	4629      	mov	r1, r5
 800954e:	4620      	mov	r0, r4
 8009550:	f000 feb1 	bl	800a2b6 <__any_on>
 8009554:	4681      	mov	r9, r0
 8009556:	b178      	cbz	r0, 8009578 <__gethex+0x1ac>
 8009558:	1e6b      	subs	r3, r5, #1
 800955a:	1159      	asrs	r1, r3, #5
 800955c:	f003 021f 	and.w	r2, r3, #31
 8009560:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009564:	f04f 0901 	mov.w	r9, #1
 8009568:	fa09 f202 	lsl.w	r2, r9, r2
 800956c:	420a      	tst	r2, r1
 800956e:	d003      	beq.n	8009578 <__gethex+0x1ac>
 8009570:	454b      	cmp	r3, r9
 8009572:	dc36      	bgt.n	80095e2 <__gethex+0x216>
 8009574:	f04f 0902 	mov.w	r9, #2
 8009578:	4629      	mov	r1, r5
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff febe 	bl	80092fc <rshift>
 8009580:	442f      	add	r7, r5
 8009582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009586:	42bb      	cmp	r3, r7
 8009588:	da42      	bge.n	8009610 <__gethex+0x244>
 800958a:	9801      	ldr	r0, [sp, #4]
 800958c:	4621      	mov	r1, r4
 800958e:	f000 fa41 	bl	8009a14 <_Bfree>
 8009592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009594:	2300      	movs	r3, #0
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	25a3      	movs	r5, #163	@ 0xa3
 800959a:	e793      	b.n	80094c4 <__gethex+0xf8>
 800959c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80095a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80095a2:	d012      	beq.n	80095ca <__gethex+0x1fe>
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d104      	bne.n	80095b2 <__gethex+0x1e6>
 80095a8:	f845 bb04 	str.w	fp, [r5], #4
 80095ac:	f04f 0b00 	mov.w	fp, #0
 80095b0:	465b      	mov	r3, fp
 80095b2:	7830      	ldrb	r0, [r6, #0]
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	f7ff fef3 	bl	80093a0 <__hexdig_fun>
 80095ba:	9b03      	ldr	r3, [sp, #12]
 80095bc:	f000 000f 	and.w	r0, r0, #15
 80095c0:	4098      	lsls	r0, r3
 80095c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80095c6:	3304      	adds	r3, #4
 80095c8:	e7ae      	b.n	8009528 <__gethex+0x15c>
 80095ca:	45b1      	cmp	r9, r6
 80095cc:	d8ea      	bhi.n	80095a4 <__gethex+0x1d8>
 80095ce:	492b      	ldr	r1, [pc, #172]	@ (800967c <__gethex+0x2b0>)
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7fe ff43 	bl	8008460 <strncmp>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1e1      	bne.n	80095a4 <__gethex+0x1d8>
 80095e0:	e7a2      	b.n	8009528 <__gethex+0x15c>
 80095e2:	1ea9      	subs	r1, r5, #2
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fe66 	bl	800a2b6 <__any_on>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0c2      	beq.n	8009574 <__gethex+0x1a8>
 80095ee:	f04f 0903 	mov.w	r9, #3
 80095f2:	e7c1      	b.n	8009578 <__gethex+0x1ac>
 80095f4:	da09      	bge.n	800960a <__gethex+0x23e>
 80095f6:	1b75      	subs	r5, r6, r5
 80095f8:	4621      	mov	r1, r4
 80095fa:	9801      	ldr	r0, [sp, #4]
 80095fc:	462a      	mov	r2, r5
 80095fe:	f000 fc21 	bl	8009e44 <__lshift>
 8009602:	1b7f      	subs	r7, r7, r5
 8009604:	4604      	mov	r4, r0
 8009606:	f100 0a14 	add.w	sl, r0, #20
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	e7b8      	b.n	8009582 <__gethex+0x1b6>
 8009610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009614:	42bd      	cmp	r5, r7
 8009616:	dd6f      	ble.n	80096f8 <__gethex+0x32c>
 8009618:	1bed      	subs	r5, r5, r7
 800961a:	42ae      	cmp	r6, r5
 800961c:	dc34      	bgt.n	8009688 <__gethex+0x2bc>
 800961e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d022      	beq.n	800966c <__gethex+0x2a0>
 8009626:	2b03      	cmp	r3, #3
 8009628:	d024      	beq.n	8009674 <__gethex+0x2a8>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d115      	bne.n	800965a <__gethex+0x28e>
 800962e:	42ae      	cmp	r6, r5
 8009630:	d113      	bne.n	800965a <__gethex+0x28e>
 8009632:	2e01      	cmp	r6, #1
 8009634:	d10b      	bne.n	800964e <__gethex+0x282>
 8009636:	9a02      	ldr	r2, [sp, #8]
 8009638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	2301      	movs	r3, #1
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	f8ca 3000 	str.w	r3, [sl]
 8009646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009648:	2562      	movs	r5, #98	@ 0x62
 800964a:	601c      	str	r4, [r3, #0]
 800964c:	e73a      	b.n	80094c4 <__gethex+0xf8>
 800964e:	1e71      	subs	r1, r6, #1
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fe30 	bl	800a2b6 <__any_on>
 8009656:	2800      	cmp	r0, #0
 8009658:	d1ed      	bne.n	8009636 <__gethex+0x26a>
 800965a:	9801      	ldr	r0, [sp, #4]
 800965c:	4621      	mov	r1, r4
 800965e:	f000 f9d9 	bl	8009a14 <_Bfree>
 8009662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009664:	2300      	movs	r3, #0
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	2550      	movs	r5, #80	@ 0x50
 800966a:	e72b      	b.n	80094c4 <__gethex+0xf8>
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f3      	bne.n	800965a <__gethex+0x28e>
 8009672:	e7e0      	b.n	8009636 <__gethex+0x26a>
 8009674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1dd      	bne.n	8009636 <__gethex+0x26a>
 800967a:	e7ee      	b.n	800965a <__gethex+0x28e>
 800967c:	0800b358 	.word	0x0800b358
 8009680:	0800b46d 	.word	0x0800b46d
 8009684:	0800b47e 	.word	0x0800b47e
 8009688:	1e6f      	subs	r7, r5, #1
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	d130      	bne.n	80096f2 <__gethex+0x326>
 8009690:	b127      	cbz	r7, 800969c <__gethex+0x2d0>
 8009692:	4639      	mov	r1, r7
 8009694:	4620      	mov	r0, r4
 8009696:	f000 fe0e 	bl	800a2b6 <__any_on>
 800969a:	4681      	mov	r9, r0
 800969c:	117a      	asrs	r2, r7, #5
 800969e:	2301      	movs	r3, #1
 80096a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096a4:	f007 071f 	and.w	r7, r7, #31
 80096a8:	40bb      	lsls	r3, r7
 80096aa:	4213      	tst	r3, r2
 80096ac:	4629      	mov	r1, r5
 80096ae:	4620      	mov	r0, r4
 80096b0:	bf18      	it	ne
 80096b2:	f049 0902 	orrne.w	r9, r9, #2
 80096b6:	f7ff fe21 	bl	80092fc <rshift>
 80096ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80096be:	1b76      	subs	r6, r6, r5
 80096c0:	2502      	movs	r5, #2
 80096c2:	f1b9 0f00 	cmp.w	r9, #0
 80096c6:	d047      	beq.n	8009758 <__gethex+0x38c>
 80096c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d015      	beq.n	80096fc <__gethex+0x330>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d017      	beq.n	8009704 <__gethex+0x338>
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d109      	bne.n	80096ec <__gethex+0x320>
 80096d8:	f019 0f02 	tst.w	r9, #2
 80096dc:	d006      	beq.n	80096ec <__gethex+0x320>
 80096de:	f8da 3000 	ldr.w	r3, [sl]
 80096e2:	ea49 0903 	orr.w	r9, r9, r3
 80096e6:	f019 0f01 	tst.w	r9, #1
 80096ea:	d10e      	bne.n	800970a <__gethex+0x33e>
 80096ec:	f045 0510 	orr.w	r5, r5, #16
 80096f0:	e032      	b.n	8009758 <__gethex+0x38c>
 80096f2:	f04f 0901 	mov.w	r9, #1
 80096f6:	e7d1      	b.n	800969c <__gethex+0x2d0>
 80096f8:	2501      	movs	r5, #1
 80096fa:	e7e2      	b.n	80096c2 <__gethex+0x2f6>
 80096fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096fe:	f1c3 0301 	rsb	r3, r3, #1
 8009702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <__gethex+0x320>
 800970a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800970e:	f104 0314 	add.w	r3, r4, #20
 8009712:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009716:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800971a:	f04f 0c00 	mov.w	ip, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009728:	d01b      	beq.n	8009762 <__gethex+0x396>
 800972a:	3201      	adds	r2, #1
 800972c:	6002      	str	r2, [r0, #0]
 800972e:	2d02      	cmp	r5, #2
 8009730:	f104 0314 	add.w	r3, r4, #20
 8009734:	d13c      	bne.n	80097b0 <__gethex+0x3e4>
 8009736:	f8d8 2000 	ldr.w	r2, [r8]
 800973a:	3a01      	subs	r2, #1
 800973c:	42b2      	cmp	r2, r6
 800973e:	d109      	bne.n	8009754 <__gethex+0x388>
 8009740:	1171      	asrs	r1, r6, #5
 8009742:	2201      	movs	r2, #1
 8009744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009748:	f006 061f 	and.w	r6, r6, #31
 800974c:	fa02 f606 	lsl.w	r6, r2, r6
 8009750:	421e      	tst	r6, r3
 8009752:	d13a      	bne.n	80097ca <__gethex+0x3fe>
 8009754:	f045 0520 	orr.w	r5, r5, #32
 8009758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975a:	601c      	str	r4, [r3, #0]
 800975c:	9b02      	ldr	r3, [sp, #8]
 800975e:	601f      	str	r7, [r3, #0]
 8009760:	e6b0      	b.n	80094c4 <__gethex+0xf8>
 8009762:	4299      	cmp	r1, r3
 8009764:	f843 cc04 	str.w	ip, [r3, #-4]
 8009768:	d8d9      	bhi.n	800971e <__gethex+0x352>
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	459b      	cmp	fp, r3
 800976e:	db17      	blt.n	80097a0 <__gethex+0x3d4>
 8009770:	6861      	ldr	r1, [r4, #4]
 8009772:	9801      	ldr	r0, [sp, #4]
 8009774:	3101      	adds	r1, #1
 8009776:	f000 f90d 	bl	8009994 <_Balloc>
 800977a:	4681      	mov	r9, r0
 800977c:	b918      	cbnz	r0, 8009786 <__gethex+0x3ba>
 800977e:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <__gethex+0x41c>)
 8009780:	4602      	mov	r2, r0
 8009782:	2184      	movs	r1, #132	@ 0x84
 8009784:	e6c5      	b.n	8009512 <__gethex+0x146>
 8009786:	6922      	ldr	r2, [r4, #16]
 8009788:	3202      	adds	r2, #2
 800978a:	f104 010c 	add.w	r1, r4, #12
 800978e:	0092      	lsls	r2, r2, #2
 8009790:	300c      	adds	r0, #12
 8009792:	f7fe fefe 	bl	8008592 <memcpy>
 8009796:	4621      	mov	r1, r4
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	f000 f93b 	bl	8009a14 <_Bfree>
 800979e:	464c      	mov	r4, r9
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097a8:	6122      	str	r2, [r4, #16]
 80097aa:	2201      	movs	r2, #1
 80097ac:	615a      	str	r2, [r3, #20]
 80097ae:	e7be      	b.n	800972e <__gethex+0x362>
 80097b0:	6922      	ldr	r2, [r4, #16]
 80097b2:	455a      	cmp	r2, fp
 80097b4:	dd0b      	ble.n	80097ce <__gethex+0x402>
 80097b6:	2101      	movs	r1, #1
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff fd9f 	bl	80092fc <rshift>
 80097be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097c2:	3701      	adds	r7, #1
 80097c4:	42bb      	cmp	r3, r7
 80097c6:	f6ff aee0 	blt.w	800958a <__gethex+0x1be>
 80097ca:	2501      	movs	r5, #1
 80097cc:	e7c2      	b.n	8009754 <__gethex+0x388>
 80097ce:	f016 061f 	ands.w	r6, r6, #31
 80097d2:	d0fa      	beq.n	80097ca <__gethex+0x3fe>
 80097d4:	4453      	add	r3, sl
 80097d6:	f1c6 0620 	rsb	r6, r6, #32
 80097da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097de:	f000 f9cb 	bl	8009b78 <__hi0bits>
 80097e2:	42b0      	cmp	r0, r6
 80097e4:	dbe7      	blt.n	80097b6 <__gethex+0x3ea>
 80097e6:	e7f0      	b.n	80097ca <__gethex+0x3fe>
 80097e8:	0800b46d 	.word	0x0800b46d

080097ec <L_shift>:
 80097ec:	f1c2 0208 	rsb	r2, r2, #8
 80097f0:	0092      	lsls	r2, r2, #2
 80097f2:	b570      	push	{r4, r5, r6, lr}
 80097f4:	f1c2 0620 	rsb	r6, r2, #32
 80097f8:	6843      	ldr	r3, [r0, #4]
 80097fa:	6804      	ldr	r4, [r0, #0]
 80097fc:	fa03 f506 	lsl.w	r5, r3, r6
 8009800:	432c      	orrs	r4, r5
 8009802:	40d3      	lsrs	r3, r2
 8009804:	6004      	str	r4, [r0, #0]
 8009806:	f840 3f04 	str.w	r3, [r0, #4]!
 800980a:	4288      	cmp	r0, r1
 800980c:	d3f4      	bcc.n	80097f8 <L_shift+0xc>
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <__match>:
 8009810:	b530      	push	{r4, r5, lr}
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800981a:	b914      	cbnz	r4, 8009822 <__match+0x12>
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	2001      	movs	r0, #1
 8009820:	bd30      	pop	{r4, r5, pc}
 8009822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009826:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800982a:	2d19      	cmp	r5, #25
 800982c:	bf98      	it	ls
 800982e:	3220      	addls	r2, #32
 8009830:	42a2      	cmp	r2, r4
 8009832:	d0f0      	beq.n	8009816 <__match+0x6>
 8009834:	2000      	movs	r0, #0
 8009836:	e7f3      	b.n	8009820 <__match+0x10>

08009838 <__hexnan>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	680b      	ldr	r3, [r1, #0]
 800983e:	6801      	ldr	r1, [r0, #0]
 8009840:	115e      	asrs	r6, r3, #5
 8009842:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009846:	f013 031f 	ands.w	r3, r3, #31
 800984a:	b087      	sub	sp, #28
 800984c:	bf18      	it	ne
 800984e:	3604      	addne	r6, #4
 8009850:	2500      	movs	r5, #0
 8009852:	1f37      	subs	r7, r6, #4
 8009854:	4682      	mov	sl, r0
 8009856:	4690      	mov	r8, r2
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f846 5c04 	str.w	r5, [r6, #-4]
 800985e:	46b9      	mov	r9, r7
 8009860:	463c      	mov	r4, r7
 8009862:	9502      	str	r5, [sp, #8]
 8009864:	46ab      	mov	fp, r5
 8009866:	784a      	ldrb	r2, [r1, #1]
 8009868:	1c4b      	adds	r3, r1, #1
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	b342      	cbz	r2, 80098c0 <__hexnan+0x88>
 800986e:	4610      	mov	r0, r2
 8009870:	9105      	str	r1, [sp, #20]
 8009872:	9204      	str	r2, [sp, #16]
 8009874:	f7ff fd94 	bl	80093a0 <__hexdig_fun>
 8009878:	2800      	cmp	r0, #0
 800987a:	d151      	bne.n	8009920 <__hexnan+0xe8>
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	9905      	ldr	r1, [sp, #20]
 8009880:	2a20      	cmp	r2, #32
 8009882:	d818      	bhi.n	80098b6 <__hexnan+0x7e>
 8009884:	9b02      	ldr	r3, [sp, #8]
 8009886:	459b      	cmp	fp, r3
 8009888:	dd13      	ble.n	80098b2 <__hexnan+0x7a>
 800988a:	454c      	cmp	r4, r9
 800988c:	d206      	bcs.n	800989c <__hexnan+0x64>
 800988e:	2d07      	cmp	r5, #7
 8009890:	dc04      	bgt.n	800989c <__hexnan+0x64>
 8009892:	462a      	mov	r2, r5
 8009894:	4649      	mov	r1, r9
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff ffa8 	bl	80097ec <L_shift>
 800989c:	4544      	cmp	r4, r8
 800989e:	d952      	bls.n	8009946 <__hexnan+0x10e>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f1a4 0904 	sub.w	r9, r4, #4
 80098a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098aa:	f8cd b008 	str.w	fp, [sp, #8]
 80098ae:	464c      	mov	r4, r9
 80098b0:	461d      	mov	r5, r3
 80098b2:	9903      	ldr	r1, [sp, #12]
 80098b4:	e7d7      	b.n	8009866 <__hexnan+0x2e>
 80098b6:	2a29      	cmp	r2, #41	@ 0x29
 80098b8:	d157      	bne.n	800996a <__hexnan+0x132>
 80098ba:	3102      	adds	r1, #2
 80098bc:	f8ca 1000 	str.w	r1, [sl]
 80098c0:	f1bb 0f00 	cmp.w	fp, #0
 80098c4:	d051      	beq.n	800996a <__hexnan+0x132>
 80098c6:	454c      	cmp	r4, r9
 80098c8:	d206      	bcs.n	80098d8 <__hexnan+0xa0>
 80098ca:	2d07      	cmp	r5, #7
 80098cc:	dc04      	bgt.n	80098d8 <__hexnan+0xa0>
 80098ce:	462a      	mov	r2, r5
 80098d0:	4649      	mov	r1, r9
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7ff ff8a 	bl	80097ec <L_shift>
 80098d8:	4544      	cmp	r4, r8
 80098da:	d936      	bls.n	800994a <__hexnan+0x112>
 80098dc:	f1a8 0204 	sub.w	r2, r8, #4
 80098e0:	4623      	mov	r3, r4
 80098e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80098e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80098ea:	429f      	cmp	r7, r3
 80098ec:	d2f9      	bcs.n	80098e2 <__hexnan+0xaa>
 80098ee:	1b3b      	subs	r3, r7, r4
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	3304      	adds	r3, #4
 80098f6:	3401      	adds	r4, #1
 80098f8:	3e03      	subs	r6, #3
 80098fa:	42b4      	cmp	r4, r6
 80098fc:	bf88      	it	hi
 80098fe:	2304      	movhi	r3, #4
 8009900:	4443      	add	r3, r8
 8009902:	2200      	movs	r2, #0
 8009904:	f843 2b04 	str.w	r2, [r3], #4
 8009908:	429f      	cmp	r7, r3
 800990a:	d2fb      	bcs.n	8009904 <__hexnan+0xcc>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	b91b      	cbnz	r3, 8009918 <__hexnan+0xe0>
 8009910:	4547      	cmp	r7, r8
 8009912:	d128      	bne.n	8009966 <__hexnan+0x12e>
 8009914:	2301      	movs	r3, #1
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	2005      	movs	r0, #5
 800991a:	b007      	add	sp, #28
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	3501      	adds	r5, #1
 8009922:	2d08      	cmp	r5, #8
 8009924:	f10b 0b01 	add.w	fp, fp, #1
 8009928:	dd06      	ble.n	8009938 <__hexnan+0x100>
 800992a:	4544      	cmp	r4, r8
 800992c:	d9c1      	bls.n	80098b2 <__hexnan+0x7a>
 800992e:	2300      	movs	r3, #0
 8009930:	f844 3c04 	str.w	r3, [r4, #-4]
 8009934:	2501      	movs	r5, #1
 8009936:	3c04      	subs	r4, #4
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	f000 000f 	and.w	r0, r0, #15
 800993e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	e7b5      	b.n	80098b2 <__hexnan+0x7a>
 8009946:	2508      	movs	r5, #8
 8009948:	e7b3      	b.n	80098b2 <__hexnan+0x7a>
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0dd      	beq.n	800990c <__hexnan+0xd4>
 8009950:	f1c3 0320 	rsb	r3, r3, #32
 8009954:	f04f 32ff 	mov.w	r2, #4294967295
 8009958:	40da      	lsrs	r2, r3
 800995a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800995e:	4013      	ands	r3, r2
 8009960:	f846 3c04 	str.w	r3, [r6, #-4]
 8009964:	e7d2      	b.n	800990c <__hexnan+0xd4>
 8009966:	3f04      	subs	r7, #4
 8009968:	e7d0      	b.n	800990c <__hexnan+0xd4>
 800996a:	2004      	movs	r0, #4
 800996c:	e7d5      	b.n	800991a <__hexnan+0xe2>

0800996e <__ascii_mbtowc>:
 800996e:	b082      	sub	sp, #8
 8009970:	b901      	cbnz	r1, 8009974 <__ascii_mbtowc+0x6>
 8009972:	a901      	add	r1, sp, #4
 8009974:	b142      	cbz	r2, 8009988 <__ascii_mbtowc+0x1a>
 8009976:	b14b      	cbz	r3, 800998c <__ascii_mbtowc+0x1e>
 8009978:	7813      	ldrb	r3, [r2, #0]
 800997a:	600b      	str	r3, [r1, #0]
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	1e10      	subs	r0, r2, #0
 8009980:	bf18      	it	ne
 8009982:	2001      	movne	r0, #1
 8009984:	b002      	add	sp, #8
 8009986:	4770      	bx	lr
 8009988:	4610      	mov	r0, r2
 800998a:	e7fb      	b.n	8009984 <__ascii_mbtowc+0x16>
 800998c:	f06f 0001 	mvn.w	r0, #1
 8009990:	e7f8      	b.n	8009984 <__ascii_mbtowc+0x16>
	...

08009994 <_Balloc>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	69c6      	ldr	r6, [r0, #28]
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	b976      	cbnz	r6, 80099bc <_Balloc+0x28>
 800999e:	2010      	movs	r0, #16
 80099a0:	f7fc fe32 	bl	8006608 <malloc>
 80099a4:	4602      	mov	r2, r0
 80099a6:	61e0      	str	r0, [r4, #28]
 80099a8:	b920      	cbnz	r0, 80099b4 <_Balloc+0x20>
 80099aa:	4b18      	ldr	r3, [pc, #96]	@ (8009a0c <_Balloc+0x78>)
 80099ac:	4818      	ldr	r0, [pc, #96]	@ (8009a10 <_Balloc+0x7c>)
 80099ae:	216b      	movs	r1, #107	@ 0x6b
 80099b0:	f000 ffcc 	bl	800a94c <__assert_func>
 80099b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099b8:	6006      	str	r6, [r0, #0]
 80099ba:	60c6      	str	r6, [r0, #12]
 80099bc:	69e6      	ldr	r6, [r4, #28]
 80099be:	68f3      	ldr	r3, [r6, #12]
 80099c0:	b183      	cbz	r3, 80099e4 <_Balloc+0x50>
 80099c2:	69e3      	ldr	r3, [r4, #28]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ca:	b9b8      	cbnz	r0, 80099fc <_Balloc+0x68>
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f605 	lsl.w	r6, r1, r5
 80099d2:	1d72      	adds	r2, r6, #5
 80099d4:	0092      	lsls	r2, r2, #2
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 ffd6 	bl	800a988 <_calloc_r>
 80099dc:	b160      	cbz	r0, 80099f8 <_Balloc+0x64>
 80099de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e2:	e00e      	b.n	8009a02 <_Balloc+0x6e>
 80099e4:	2221      	movs	r2, #33	@ 0x21
 80099e6:	2104      	movs	r1, #4
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 ffcd 	bl	800a988 <_calloc_r>
 80099ee:	69e3      	ldr	r3, [r4, #28]
 80099f0:	60f0      	str	r0, [r6, #12]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e4      	bne.n	80099c2 <_Balloc+0x2e>
 80099f8:	2000      	movs	r0, #0
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	6802      	ldr	r2, [r0, #0]
 80099fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a02:	2300      	movs	r3, #0
 8009a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a08:	e7f7      	b.n	80099fa <_Balloc+0x66>
 8009a0a:	bf00      	nop
 8009a0c:	0800b3fe 	.word	0x0800b3fe
 8009a10:	0800b4de 	.word	0x0800b4de

08009a14 <_Bfree>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	69c6      	ldr	r6, [r0, #28]
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	b976      	cbnz	r6, 8009a3c <_Bfree+0x28>
 8009a1e:	2010      	movs	r0, #16
 8009a20:	f7fc fdf2 	bl	8006608 <malloc>
 8009a24:	4602      	mov	r2, r0
 8009a26:	61e8      	str	r0, [r5, #28]
 8009a28:	b920      	cbnz	r0, 8009a34 <_Bfree+0x20>
 8009a2a:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <_Bfree+0x3c>)
 8009a2c:	4809      	ldr	r0, [pc, #36]	@ (8009a54 <_Bfree+0x40>)
 8009a2e:	218f      	movs	r1, #143	@ 0x8f
 8009a30:	f000 ff8c 	bl	800a94c <__assert_func>
 8009a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a38:	6006      	str	r6, [r0, #0]
 8009a3a:	60c6      	str	r6, [r0, #12]
 8009a3c:	b13c      	cbz	r4, 8009a4e <_Bfree+0x3a>
 8009a3e:	69eb      	ldr	r3, [r5, #28]
 8009a40:	6862      	ldr	r2, [r4, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a48:	6021      	str	r1, [r4, #0]
 8009a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	0800b3fe 	.word	0x0800b3fe
 8009a54:	0800b4de 	.word	0x0800b4de

08009a58 <__multadd>:
 8009a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	690d      	ldr	r5, [r1, #16]
 8009a5e:	4607      	mov	r7, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	461e      	mov	r6, r3
 8009a64:	f101 0c14 	add.w	ip, r1, #20
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a6e:	b299      	uxth	r1, r3
 8009a70:	fb02 6101 	mla	r1, r2, r1, r6
 8009a74:	0c1e      	lsrs	r6, r3, #16
 8009a76:	0c0b      	lsrs	r3, r1, #16
 8009a78:	fb02 3306 	mla	r3, r2, r6, r3
 8009a7c:	b289      	uxth	r1, r1
 8009a7e:	3001      	adds	r0, #1
 8009a80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a84:	4285      	cmp	r5, r0
 8009a86:	f84c 1b04 	str.w	r1, [ip], #4
 8009a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a8e:	dcec      	bgt.n	8009a6a <__multadd+0x12>
 8009a90:	b30e      	cbz	r6, 8009ad6 <__multadd+0x7e>
 8009a92:	68a3      	ldr	r3, [r4, #8]
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	dc19      	bgt.n	8009acc <__multadd+0x74>
 8009a98:	6861      	ldr	r1, [r4, #4]
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	3101      	adds	r1, #1
 8009a9e:	f7ff ff79 	bl	8009994 <_Balloc>
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <__multadd+0x5a>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8009adc <__multadd+0x84>)
 8009aaa:	480d      	ldr	r0, [pc, #52]	@ (8009ae0 <__multadd+0x88>)
 8009aac:	21ba      	movs	r1, #186	@ 0xba
 8009aae:	f000 ff4d 	bl	800a94c <__assert_func>
 8009ab2:	6922      	ldr	r2, [r4, #16]
 8009ab4:	3202      	adds	r2, #2
 8009ab6:	f104 010c 	add.w	r1, r4, #12
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	300c      	adds	r0, #12
 8009abe:	f7fe fd68 	bl	8008592 <memcpy>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff ffa5 	bl	8009a14 <_Bfree>
 8009aca:	4644      	mov	r4, r8
 8009acc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	615e      	str	r6, [r3, #20]
 8009ad4:	6125      	str	r5, [r4, #16]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009adc:	0800b46d 	.word	0x0800b46d
 8009ae0:	0800b4de 	.word	0x0800b4de

08009ae4 <__s2b>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	460c      	mov	r4, r1
 8009aea:	4615      	mov	r5, r2
 8009aec:	461f      	mov	r7, r3
 8009aee:	2209      	movs	r2, #9
 8009af0:	3308      	adds	r3, #8
 8009af2:	4606      	mov	r6, r0
 8009af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af8:	2100      	movs	r1, #0
 8009afa:	2201      	movs	r2, #1
 8009afc:	429a      	cmp	r2, r3
 8009afe:	db09      	blt.n	8009b14 <__s2b+0x30>
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff ff47 	bl	8009994 <_Balloc>
 8009b06:	b940      	cbnz	r0, 8009b1a <__s2b+0x36>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b19      	ldr	r3, [pc, #100]	@ (8009b70 <__s2b+0x8c>)
 8009b0c:	4819      	ldr	r0, [pc, #100]	@ (8009b74 <__s2b+0x90>)
 8009b0e:	21d3      	movs	r1, #211	@ 0xd3
 8009b10:	f000 ff1c 	bl	800a94c <__assert_func>
 8009b14:	0052      	lsls	r2, r2, #1
 8009b16:	3101      	adds	r1, #1
 8009b18:	e7f0      	b.n	8009afc <__s2b+0x18>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	6143      	str	r3, [r0, #20]
 8009b1e:	2d09      	cmp	r5, #9
 8009b20:	f04f 0301 	mov.w	r3, #1
 8009b24:	6103      	str	r3, [r0, #16]
 8009b26:	dd16      	ble.n	8009b56 <__s2b+0x72>
 8009b28:	f104 0909 	add.w	r9, r4, #9
 8009b2c:	46c8      	mov	r8, r9
 8009b2e:	442c      	add	r4, r5
 8009b30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b34:	4601      	mov	r1, r0
 8009b36:	3b30      	subs	r3, #48	@ 0x30
 8009b38:	220a      	movs	r2, #10
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7ff ff8c 	bl	8009a58 <__multadd>
 8009b40:	45a0      	cmp	r8, r4
 8009b42:	d1f5      	bne.n	8009b30 <__s2b+0x4c>
 8009b44:	f1a5 0408 	sub.w	r4, r5, #8
 8009b48:	444c      	add	r4, r9
 8009b4a:	1b2d      	subs	r5, r5, r4
 8009b4c:	1963      	adds	r3, r4, r5
 8009b4e:	42bb      	cmp	r3, r7
 8009b50:	db04      	blt.n	8009b5c <__s2b+0x78>
 8009b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b56:	340a      	adds	r4, #10
 8009b58:	2509      	movs	r5, #9
 8009b5a:	e7f6      	b.n	8009b4a <__s2b+0x66>
 8009b5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b60:	4601      	mov	r1, r0
 8009b62:	3b30      	subs	r3, #48	@ 0x30
 8009b64:	220a      	movs	r2, #10
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff ff76 	bl	8009a58 <__multadd>
 8009b6c:	e7ee      	b.n	8009b4c <__s2b+0x68>
 8009b6e:	bf00      	nop
 8009b70:	0800b46d 	.word	0x0800b46d
 8009b74:	0800b4de 	.word	0x0800b4de

08009b78 <__hi0bits>:
 8009b78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	bf36      	itet	cc
 8009b80:	0403      	lslcc	r3, r0, #16
 8009b82:	2000      	movcs	r0, #0
 8009b84:	2010      	movcc	r0, #16
 8009b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b8a:	bf3c      	itt	cc
 8009b8c:	021b      	lslcc	r3, r3, #8
 8009b8e:	3008      	addcc	r0, #8
 8009b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b94:	bf3c      	itt	cc
 8009b96:	011b      	lslcc	r3, r3, #4
 8009b98:	3004      	addcc	r0, #4
 8009b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9e:	bf3c      	itt	cc
 8009ba0:	009b      	lslcc	r3, r3, #2
 8009ba2:	3002      	addcc	r0, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	db05      	blt.n	8009bb4 <__hi0bits+0x3c>
 8009ba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bac:	f100 0001 	add.w	r0, r0, #1
 8009bb0:	bf08      	it	eq
 8009bb2:	2020      	moveq	r0, #32
 8009bb4:	4770      	bx	lr

08009bb6 <__lo0bits>:
 8009bb6:	6803      	ldr	r3, [r0, #0]
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f013 0007 	ands.w	r0, r3, #7
 8009bbe:	d00b      	beq.n	8009bd8 <__lo0bits+0x22>
 8009bc0:	07d9      	lsls	r1, r3, #31
 8009bc2:	d421      	bmi.n	8009c08 <__lo0bits+0x52>
 8009bc4:	0798      	lsls	r0, r3, #30
 8009bc6:	bf49      	itett	mi
 8009bc8:	085b      	lsrmi	r3, r3, #1
 8009bca:	089b      	lsrpl	r3, r3, #2
 8009bcc:	2001      	movmi	r0, #1
 8009bce:	6013      	strmi	r3, [r2, #0]
 8009bd0:	bf5c      	itt	pl
 8009bd2:	6013      	strpl	r3, [r2, #0]
 8009bd4:	2002      	movpl	r0, #2
 8009bd6:	4770      	bx	lr
 8009bd8:	b299      	uxth	r1, r3
 8009bda:	b909      	cbnz	r1, 8009be0 <__lo0bits+0x2a>
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	2010      	movs	r0, #16
 8009be0:	b2d9      	uxtb	r1, r3
 8009be2:	b909      	cbnz	r1, 8009be8 <__lo0bits+0x32>
 8009be4:	3008      	adds	r0, #8
 8009be6:	0a1b      	lsrs	r3, r3, #8
 8009be8:	0719      	lsls	r1, r3, #28
 8009bea:	bf04      	itt	eq
 8009bec:	091b      	lsreq	r3, r3, #4
 8009bee:	3004      	addeq	r0, #4
 8009bf0:	0799      	lsls	r1, r3, #30
 8009bf2:	bf04      	itt	eq
 8009bf4:	089b      	lsreq	r3, r3, #2
 8009bf6:	3002      	addeq	r0, #2
 8009bf8:	07d9      	lsls	r1, r3, #31
 8009bfa:	d403      	bmi.n	8009c04 <__lo0bits+0x4e>
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	f100 0001 	add.w	r0, r0, #1
 8009c02:	d003      	beq.n	8009c0c <__lo0bits+0x56>
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	4770      	bx	lr
 8009c08:	2000      	movs	r0, #0
 8009c0a:	4770      	bx	lr
 8009c0c:	2020      	movs	r0, #32
 8009c0e:	4770      	bx	lr

08009c10 <__i2b>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	2101      	movs	r1, #1
 8009c16:	f7ff febd 	bl	8009994 <_Balloc>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	b928      	cbnz	r0, 8009c2a <__i2b+0x1a>
 8009c1e:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <__i2b+0x24>)
 8009c20:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <__i2b+0x28>)
 8009c22:	f240 1145 	movw	r1, #325	@ 0x145
 8009c26:	f000 fe91 	bl	800a94c <__assert_func>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	6144      	str	r4, [r0, #20]
 8009c2e:	6103      	str	r3, [r0, #16]
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	bf00      	nop
 8009c34:	0800b46d 	.word	0x0800b46d
 8009c38:	0800b4de 	.word	0x0800b4de

08009c3c <__multiply>:
 8009c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	4614      	mov	r4, r2
 8009c42:	690a      	ldr	r2, [r1, #16]
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	bfa8      	it	ge
 8009c4a:	4623      	movge	r3, r4
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	bfa4      	itt	ge
 8009c50:	460c      	movge	r4, r1
 8009c52:	461f      	movge	r7, r3
 8009c54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c5c:	68a3      	ldr	r3, [r4, #8]
 8009c5e:	6861      	ldr	r1, [r4, #4]
 8009c60:	eb0a 0609 	add.w	r6, sl, r9
 8009c64:	42b3      	cmp	r3, r6
 8009c66:	b085      	sub	sp, #20
 8009c68:	bfb8      	it	lt
 8009c6a:	3101      	addlt	r1, #1
 8009c6c:	f7ff fe92 	bl	8009994 <_Balloc>
 8009c70:	b930      	cbnz	r0, 8009c80 <__multiply+0x44>
 8009c72:	4602      	mov	r2, r0
 8009c74:	4b44      	ldr	r3, [pc, #272]	@ (8009d88 <__multiply+0x14c>)
 8009c76:	4845      	ldr	r0, [pc, #276]	@ (8009d8c <__multiply+0x150>)
 8009c78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c7c:	f000 fe66 	bl	800a94c <__assert_func>
 8009c80:	f100 0514 	add.w	r5, r0, #20
 8009c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c88:	462b      	mov	r3, r5
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4543      	cmp	r3, r8
 8009c8e:	d321      	bcc.n	8009cd4 <__multiply+0x98>
 8009c90:	f107 0114 	add.w	r1, r7, #20
 8009c94:	f104 0214 	add.w	r2, r4, #20
 8009c98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ca0:	9302      	str	r3, [sp, #8]
 8009ca2:	1b13      	subs	r3, r2, r4
 8009ca4:	3b15      	subs	r3, #21
 8009ca6:	f023 0303 	bic.w	r3, r3, #3
 8009caa:	3304      	adds	r3, #4
 8009cac:	f104 0715 	add.w	r7, r4, #21
 8009cb0:	42ba      	cmp	r2, r7
 8009cb2:	bf38      	it	cc
 8009cb4:	2304      	movcc	r3, #4
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	9103      	str	r1, [sp, #12]
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	d80c      	bhi.n	8009cda <__multiply+0x9e>
 8009cc0:	2e00      	cmp	r6, #0
 8009cc2:	dd03      	ble.n	8009ccc <__multiply+0x90>
 8009cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d05b      	beq.n	8009d84 <__multiply+0x148>
 8009ccc:	6106      	str	r6, [r0, #16]
 8009cce:	b005      	add	sp, #20
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	f843 2b04 	str.w	r2, [r3], #4
 8009cd8:	e7d8      	b.n	8009c8c <__multiply+0x50>
 8009cda:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cde:	f1ba 0f00 	cmp.w	sl, #0
 8009ce2:	d024      	beq.n	8009d2e <__multiply+0xf2>
 8009ce4:	f104 0e14 	add.w	lr, r4, #20
 8009ce8:	46a9      	mov	r9, r5
 8009cea:	f04f 0c00 	mov.w	ip, #0
 8009cee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cf2:	f8d9 3000 	ldr.w	r3, [r9]
 8009cf6:	fa1f fb87 	uxth.w	fp, r7
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d04:	f8d9 7000 	ldr.w	r7, [r9]
 8009d08:	4463      	add	r3, ip
 8009d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d1c:	4572      	cmp	r2, lr
 8009d1e:	f849 3b04 	str.w	r3, [r9], #4
 8009d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d26:	d8e2      	bhi.n	8009cee <__multiply+0xb2>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	f845 c003 	str.w	ip, [r5, r3]
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d34:	3104      	adds	r1, #4
 8009d36:	f1b9 0f00 	cmp.w	r9, #0
 8009d3a:	d021      	beq.n	8009d80 <__multiply+0x144>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	f104 0c14 	add.w	ip, r4, #20
 8009d42:	46ae      	mov	lr, r5
 8009d44:	f04f 0a00 	mov.w	sl, #0
 8009d48:	f8bc b000 	ldrh.w	fp, [ip]
 8009d4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d50:	fb09 770b 	mla	r7, r9, fp, r7
 8009d54:	4457      	add	r7, sl
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d5c:	f84e 3b04 	str.w	r3, [lr], #4
 8009d60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d68:	f8be 3000 	ldrh.w	r3, [lr]
 8009d6c:	fb09 330a 	mla	r3, r9, sl, r3
 8009d70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d74:	4562      	cmp	r2, ip
 8009d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d7a:	d8e5      	bhi.n	8009d48 <__multiply+0x10c>
 8009d7c:	9f01      	ldr	r7, [sp, #4]
 8009d7e:	51eb      	str	r3, [r5, r7]
 8009d80:	3504      	adds	r5, #4
 8009d82:	e799      	b.n	8009cb8 <__multiply+0x7c>
 8009d84:	3e01      	subs	r6, #1
 8009d86:	e79b      	b.n	8009cc0 <__multiply+0x84>
 8009d88:	0800b46d 	.word	0x0800b46d
 8009d8c:	0800b4de 	.word	0x0800b4de

08009d90 <__pow5mult>:
 8009d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d94:	4615      	mov	r5, r2
 8009d96:	f012 0203 	ands.w	r2, r2, #3
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	460e      	mov	r6, r1
 8009d9e:	d007      	beq.n	8009db0 <__pow5mult+0x20>
 8009da0:	4c25      	ldr	r4, [pc, #148]	@ (8009e38 <__pow5mult+0xa8>)
 8009da2:	3a01      	subs	r2, #1
 8009da4:	2300      	movs	r3, #0
 8009da6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009daa:	f7ff fe55 	bl	8009a58 <__multadd>
 8009dae:	4606      	mov	r6, r0
 8009db0:	10ad      	asrs	r5, r5, #2
 8009db2:	d03d      	beq.n	8009e30 <__pow5mult+0xa0>
 8009db4:	69fc      	ldr	r4, [r7, #28]
 8009db6:	b97c      	cbnz	r4, 8009dd8 <__pow5mult+0x48>
 8009db8:	2010      	movs	r0, #16
 8009dba:	f7fc fc25 	bl	8006608 <malloc>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	61f8      	str	r0, [r7, #28]
 8009dc2:	b928      	cbnz	r0, 8009dd0 <__pow5mult+0x40>
 8009dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e3c <__pow5mult+0xac>)
 8009dc6:	481e      	ldr	r0, [pc, #120]	@ (8009e40 <__pow5mult+0xb0>)
 8009dc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009dcc:	f000 fdbe 	bl	800a94c <__assert_func>
 8009dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dd4:	6004      	str	r4, [r0, #0]
 8009dd6:	60c4      	str	r4, [r0, #12]
 8009dd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009de0:	b94c      	cbnz	r4, 8009df6 <__pow5mult+0x66>
 8009de2:	f240 2171 	movw	r1, #625	@ 0x271
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7ff ff12 	bl	8009c10 <__i2b>
 8009dec:	2300      	movs	r3, #0
 8009dee:	f8c8 0008 	str.w	r0, [r8, #8]
 8009df2:	4604      	mov	r4, r0
 8009df4:	6003      	str	r3, [r0, #0]
 8009df6:	f04f 0900 	mov.w	r9, #0
 8009dfa:	07eb      	lsls	r3, r5, #31
 8009dfc:	d50a      	bpl.n	8009e14 <__pow5mult+0x84>
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4622      	mov	r2, r4
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ff1a 	bl	8009c3c <__multiply>
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f7ff fe01 	bl	8009a14 <_Bfree>
 8009e12:	4646      	mov	r6, r8
 8009e14:	106d      	asrs	r5, r5, #1
 8009e16:	d00b      	beq.n	8009e30 <__pow5mult+0xa0>
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	b938      	cbnz	r0, 8009e2c <__pow5mult+0x9c>
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff0b 	bl	8009c3c <__multiply>
 8009e26:	6020      	str	r0, [r4, #0]
 8009e28:	f8c0 9000 	str.w	r9, [r0]
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	e7e4      	b.n	8009dfa <__pow5mult+0x6a>
 8009e30:	4630      	mov	r0, r6
 8009e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e36:	bf00      	nop
 8009e38:	0800b538 	.word	0x0800b538
 8009e3c:	0800b3fe 	.word	0x0800b3fe
 8009e40:	0800b4de 	.word	0x0800b4de

08009e44 <__lshift>:
 8009e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e48:	460c      	mov	r4, r1
 8009e4a:	6849      	ldr	r1, [r1, #4]
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	4607      	mov	r7, r0
 8009e56:	4691      	mov	r9, r2
 8009e58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e5c:	f108 0601 	add.w	r6, r8, #1
 8009e60:	42b3      	cmp	r3, r6
 8009e62:	db0b      	blt.n	8009e7c <__lshift+0x38>
 8009e64:	4638      	mov	r0, r7
 8009e66:	f7ff fd95 	bl	8009994 <_Balloc>
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	b948      	cbnz	r0, 8009e82 <__lshift+0x3e>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	4b28      	ldr	r3, [pc, #160]	@ (8009f14 <__lshift+0xd0>)
 8009e72:	4829      	ldr	r0, [pc, #164]	@ (8009f18 <__lshift+0xd4>)
 8009e74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e78:	f000 fd68 	bl	800a94c <__assert_func>
 8009e7c:	3101      	adds	r1, #1
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	e7ee      	b.n	8009e60 <__lshift+0x1c>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f100 0114 	add.w	r1, r0, #20
 8009e88:	f100 0210 	add.w	r2, r0, #16
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	4553      	cmp	r3, sl
 8009e90:	db33      	blt.n	8009efa <__lshift+0xb6>
 8009e92:	6920      	ldr	r0, [r4, #16]
 8009e94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e98:	f104 0314 	add.w	r3, r4, #20
 8009e9c:	f019 091f 	ands.w	r9, r9, #31
 8009ea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ea8:	d02b      	beq.n	8009f02 <__lshift+0xbe>
 8009eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8009eae:	468a      	mov	sl, r1
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	fa00 f009 	lsl.w	r0, r0, r9
 8009eb8:	4310      	orrs	r0, r2
 8009eba:	f84a 0b04 	str.w	r0, [sl], #4
 8009ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec2:	459c      	cmp	ip, r3
 8009ec4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ec8:	d8f3      	bhi.n	8009eb2 <__lshift+0x6e>
 8009eca:	ebac 0304 	sub.w	r3, ip, r4
 8009ece:	3b15      	subs	r3, #21
 8009ed0:	f023 0303 	bic.w	r3, r3, #3
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	f104 0015 	add.w	r0, r4, #21
 8009eda:	4584      	cmp	ip, r0
 8009edc:	bf38      	it	cc
 8009ede:	2304      	movcc	r3, #4
 8009ee0:	50ca      	str	r2, [r1, r3]
 8009ee2:	b10a      	cbz	r2, 8009ee8 <__lshift+0xa4>
 8009ee4:	f108 0602 	add.w	r6, r8, #2
 8009ee8:	3e01      	subs	r6, #1
 8009eea:	4638      	mov	r0, r7
 8009eec:	612e      	str	r6, [r5, #16]
 8009eee:	4621      	mov	r1, r4
 8009ef0:	f7ff fd90 	bl	8009a14 <_Bfree>
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009efe:	3301      	adds	r3, #1
 8009f00:	e7c5      	b.n	8009e8e <__lshift+0x4a>
 8009f02:	3904      	subs	r1, #4
 8009f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f0c:	459c      	cmp	ip, r3
 8009f0e:	d8f9      	bhi.n	8009f04 <__lshift+0xc0>
 8009f10:	e7ea      	b.n	8009ee8 <__lshift+0xa4>
 8009f12:	bf00      	nop
 8009f14:	0800b46d 	.word	0x0800b46d
 8009f18:	0800b4de 	.word	0x0800b4de

08009f1c <__mcmp>:
 8009f1c:	690a      	ldr	r2, [r1, #16]
 8009f1e:	4603      	mov	r3, r0
 8009f20:	6900      	ldr	r0, [r0, #16]
 8009f22:	1a80      	subs	r0, r0, r2
 8009f24:	b530      	push	{r4, r5, lr}
 8009f26:	d10e      	bne.n	8009f46 <__mcmp+0x2a>
 8009f28:	3314      	adds	r3, #20
 8009f2a:	3114      	adds	r1, #20
 8009f2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f3c:	4295      	cmp	r5, r2
 8009f3e:	d003      	beq.n	8009f48 <__mcmp+0x2c>
 8009f40:	d205      	bcs.n	8009f4e <__mcmp+0x32>
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295
 8009f46:	bd30      	pop	{r4, r5, pc}
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	d3f3      	bcc.n	8009f34 <__mcmp+0x18>
 8009f4c:	e7fb      	b.n	8009f46 <__mcmp+0x2a>
 8009f4e:	2001      	movs	r0, #1
 8009f50:	e7f9      	b.n	8009f46 <__mcmp+0x2a>
	...

08009f54 <__mdiff>:
 8009f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	4689      	mov	r9, r1
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4648      	mov	r0, r9
 8009f60:	4614      	mov	r4, r2
 8009f62:	f7ff ffdb 	bl	8009f1c <__mcmp>
 8009f66:	1e05      	subs	r5, r0, #0
 8009f68:	d112      	bne.n	8009f90 <__mdiff+0x3c>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7ff fd11 	bl	8009994 <_Balloc>
 8009f72:	4602      	mov	r2, r0
 8009f74:	b928      	cbnz	r0, 8009f82 <__mdiff+0x2e>
 8009f76:	4b3f      	ldr	r3, [pc, #252]	@ (800a074 <__mdiff+0x120>)
 8009f78:	f240 2137 	movw	r1, #567	@ 0x237
 8009f7c:	483e      	ldr	r0, [pc, #248]	@ (800a078 <__mdiff+0x124>)
 8009f7e:	f000 fce5 	bl	800a94c <__assert_func>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	b003      	add	sp, #12
 8009f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	bfbc      	itt	lt
 8009f92:	464b      	movlt	r3, r9
 8009f94:	46a1      	movlt	r9, r4
 8009f96:	4630      	mov	r0, r6
 8009f98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f9c:	bfba      	itte	lt
 8009f9e:	461c      	movlt	r4, r3
 8009fa0:	2501      	movlt	r5, #1
 8009fa2:	2500      	movge	r5, #0
 8009fa4:	f7ff fcf6 	bl	8009994 <_Balloc>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	b918      	cbnz	r0, 8009fb4 <__mdiff+0x60>
 8009fac:	4b31      	ldr	r3, [pc, #196]	@ (800a074 <__mdiff+0x120>)
 8009fae:	f240 2145 	movw	r1, #581	@ 0x245
 8009fb2:	e7e3      	b.n	8009f7c <__mdiff+0x28>
 8009fb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fb8:	6926      	ldr	r6, [r4, #16]
 8009fba:	60c5      	str	r5, [r0, #12]
 8009fbc:	f109 0310 	add.w	r3, r9, #16
 8009fc0:	f109 0514 	add.w	r5, r9, #20
 8009fc4:	f104 0e14 	add.w	lr, r4, #20
 8009fc8:	f100 0b14 	add.w	fp, r0, #20
 8009fcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	46d9      	mov	r9, fp
 8009fd8:	f04f 0c00 	mov.w	ip, #0
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	fa1f f38a 	uxth.w	r3, sl
 8009fec:	4619      	mov	r1, r3
 8009fee:	b283      	uxth	r3, r0
 8009ff0:	1acb      	subs	r3, r1, r3
 8009ff2:	0c00      	lsrs	r0, r0, #16
 8009ff4:	4463      	add	r3, ip
 8009ff6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ffa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a004:	4576      	cmp	r6, lr
 800a006:	f849 3b04 	str.w	r3, [r9], #4
 800a00a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a00e:	d8e5      	bhi.n	8009fdc <__mdiff+0x88>
 800a010:	1b33      	subs	r3, r6, r4
 800a012:	3b15      	subs	r3, #21
 800a014:	f023 0303 	bic.w	r3, r3, #3
 800a018:	3415      	adds	r4, #21
 800a01a:	3304      	adds	r3, #4
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	bf38      	it	cc
 800a020:	2304      	movcc	r3, #4
 800a022:	441d      	add	r5, r3
 800a024:	445b      	add	r3, fp
 800a026:	461e      	mov	r6, r3
 800a028:	462c      	mov	r4, r5
 800a02a:	4544      	cmp	r4, r8
 800a02c:	d30e      	bcc.n	800a04c <__mdiff+0xf8>
 800a02e:	f108 0103 	add.w	r1, r8, #3
 800a032:	1b49      	subs	r1, r1, r5
 800a034:	f021 0103 	bic.w	r1, r1, #3
 800a038:	3d03      	subs	r5, #3
 800a03a:	45a8      	cmp	r8, r5
 800a03c:	bf38      	it	cc
 800a03e:	2100      	movcc	r1, #0
 800a040:	440b      	add	r3, r1
 800a042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a046:	b191      	cbz	r1, 800a06e <__mdiff+0x11a>
 800a048:	6117      	str	r7, [r2, #16]
 800a04a:	e79d      	b.n	8009f88 <__mdiff+0x34>
 800a04c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a050:	46e6      	mov	lr, ip
 800a052:	0c08      	lsrs	r0, r1, #16
 800a054:	fa1c fc81 	uxtah	ip, ip, r1
 800a058:	4471      	add	r1, lr
 800a05a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a05e:	b289      	uxth	r1, r1
 800a060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a064:	f846 1b04 	str.w	r1, [r6], #4
 800a068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a06c:	e7dd      	b.n	800a02a <__mdiff+0xd6>
 800a06e:	3f01      	subs	r7, #1
 800a070:	e7e7      	b.n	800a042 <__mdiff+0xee>
 800a072:	bf00      	nop
 800a074:	0800b46d 	.word	0x0800b46d
 800a078:	0800b4de 	.word	0x0800b4de

0800a07c <__ulp>:
 800a07c:	b082      	sub	sp, #8
 800a07e:	ed8d 0b00 	vstr	d0, [sp]
 800a082:	9a01      	ldr	r2, [sp, #4]
 800a084:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <__ulp+0x48>)
 800a086:	4013      	ands	r3, r2
 800a088:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dc08      	bgt.n	800a0a2 <__ulp+0x26>
 800a090:	425b      	negs	r3, r3
 800a092:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a096:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a09a:	da04      	bge.n	800a0a6 <__ulp+0x2a>
 800a09c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0a0:	4113      	asrs	r3, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	e008      	b.n	800a0b8 <__ulp+0x3c>
 800a0a6:	f1a2 0314 	sub.w	r3, r2, #20
 800a0aa:	2b1e      	cmp	r3, #30
 800a0ac:	bfda      	itte	le
 800a0ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0b2:	40da      	lsrle	r2, r3
 800a0b4:	2201      	movgt	r2, #1
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	ec41 0b10 	vmov	d0, r0, r1
 800a0c0:	b002      	add	sp, #8
 800a0c2:	4770      	bx	lr
 800a0c4:	7ff00000 	.word	0x7ff00000

0800a0c8 <__b2d>:
 800a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0cc:	6906      	ldr	r6, [r0, #16]
 800a0ce:	f100 0814 	add.w	r8, r0, #20
 800a0d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a0d6:	1f37      	subs	r7, r6, #4
 800a0d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f7ff fd4b 	bl	8009b78 <__hi0bits>
 800a0e2:	f1c0 0320 	rsb	r3, r0, #32
 800a0e6:	280a      	cmp	r0, #10
 800a0e8:	600b      	str	r3, [r1, #0]
 800a0ea:	491b      	ldr	r1, [pc, #108]	@ (800a158 <__b2d+0x90>)
 800a0ec:	dc15      	bgt.n	800a11a <__b2d+0x52>
 800a0ee:	f1c0 0c0b 	rsb	ip, r0, #11
 800a0f2:	fa22 f30c 	lsr.w	r3, r2, ip
 800a0f6:	45b8      	cmp	r8, r7
 800a0f8:	ea43 0501 	orr.w	r5, r3, r1
 800a0fc:	bf34      	ite	cc
 800a0fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a102:	2300      	movcs	r3, #0
 800a104:	3015      	adds	r0, #21
 800a106:	fa02 f000 	lsl.w	r0, r2, r0
 800a10a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a10e:	4303      	orrs	r3, r0
 800a110:	461c      	mov	r4, r3
 800a112:	ec45 4b10 	vmov	d0, r4, r5
 800a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a11a:	45b8      	cmp	r8, r7
 800a11c:	bf3a      	itte	cc
 800a11e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a122:	f1a6 0708 	subcc.w	r7, r6, #8
 800a126:	2300      	movcs	r3, #0
 800a128:	380b      	subs	r0, #11
 800a12a:	d012      	beq.n	800a152 <__b2d+0x8a>
 800a12c:	f1c0 0120 	rsb	r1, r0, #32
 800a130:	fa23 f401 	lsr.w	r4, r3, r1
 800a134:	4082      	lsls	r2, r0
 800a136:	4322      	orrs	r2, r4
 800a138:	4547      	cmp	r7, r8
 800a13a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a13e:	bf8c      	ite	hi
 800a140:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a144:	2200      	movls	r2, #0
 800a146:	4083      	lsls	r3, r0
 800a148:	40ca      	lsrs	r2, r1
 800a14a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a14e:	4313      	orrs	r3, r2
 800a150:	e7de      	b.n	800a110 <__b2d+0x48>
 800a152:	ea42 0501 	orr.w	r5, r2, r1
 800a156:	e7db      	b.n	800a110 <__b2d+0x48>
 800a158:	3ff00000 	.word	0x3ff00000

0800a15c <__d2b>:
 800a15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a160:	460f      	mov	r7, r1
 800a162:	2101      	movs	r1, #1
 800a164:	ec59 8b10 	vmov	r8, r9, d0
 800a168:	4616      	mov	r6, r2
 800a16a:	f7ff fc13 	bl	8009994 <_Balloc>
 800a16e:	4604      	mov	r4, r0
 800a170:	b930      	cbnz	r0, 800a180 <__d2b+0x24>
 800a172:	4602      	mov	r2, r0
 800a174:	4b23      	ldr	r3, [pc, #140]	@ (800a204 <__d2b+0xa8>)
 800a176:	4824      	ldr	r0, [pc, #144]	@ (800a208 <__d2b+0xac>)
 800a178:	f240 310f 	movw	r1, #783	@ 0x30f
 800a17c:	f000 fbe6 	bl	800a94c <__assert_func>
 800a180:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a188:	b10d      	cbz	r5, 800a18e <__d2b+0x32>
 800a18a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	f1b8 0300 	subs.w	r3, r8, #0
 800a194:	d023      	beq.n	800a1de <__d2b+0x82>
 800a196:	4668      	mov	r0, sp
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	f7ff fd0c 	bl	8009bb6 <__lo0bits>
 800a19e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1a2:	b1d0      	cbz	r0, 800a1da <__d2b+0x7e>
 800a1a4:	f1c0 0320 	rsb	r3, r0, #32
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	40c2      	lsrs	r2, r0
 800a1b0:	6163      	str	r3, [r4, #20]
 800a1b2:	9201      	str	r2, [sp, #4]
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	61a3      	str	r3, [r4, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bf0c      	ite	eq
 800a1bc:	2201      	moveq	r2, #1
 800a1be:	2202      	movne	r2, #2
 800a1c0:	6122      	str	r2, [r4, #16]
 800a1c2:	b1a5      	cbz	r5, 800a1ee <__d2b+0x92>
 800a1c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1c8:	4405      	add	r5, r0
 800a1ca:	603d      	str	r5, [r7, #0]
 800a1cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1d0:	6030      	str	r0, [r6, #0]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1da:	6161      	str	r1, [r4, #20]
 800a1dc:	e7ea      	b.n	800a1b4 <__d2b+0x58>
 800a1de:	a801      	add	r0, sp, #4
 800a1e0:	f7ff fce9 	bl	8009bb6 <__lo0bits>
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	6163      	str	r3, [r4, #20]
 800a1e8:	3020      	adds	r0, #32
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	e7e8      	b.n	800a1c0 <__d2b+0x64>
 800a1ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1f6:	6038      	str	r0, [r7, #0]
 800a1f8:	6918      	ldr	r0, [r3, #16]
 800a1fa:	f7ff fcbd 	bl	8009b78 <__hi0bits>
 800a1fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a202:	e7e5      	b.n	800a1d0 <__d2b+0x74>
 800a204:	0800b46d 	.word	0x0800b46d
 800a208:	0800b4de 	.word	0x0800b4de

0800a20c <__ratio>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	b085      	sub	sp, #20
 800a212:	e9cd 1000 	strd	r1, r0, [sp]
 800a216:	a902      	add	r1, sp, #8
 800a218:	f7ff ff56 	bl	800a0c8 <__b2d>
 800a21c:	9800      	ldr	r0, [sp, #0]
 800a21e:	a903      	add	r1, sp, #12
 800a220:	ec55 4b10 	vmov	r4, r5, d0
 800a224:	f7ff ff50 	bl	800a0c8 <__b2d>
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	6919      	ldr	r1, [r3, #16]
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	1ac9      	subs	r1, r1, r3
 800a232:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	ec5b ab10 	vmov	sl, fp, d0
 800a23c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfce      	itee	gt
 800a244:	462a      	movgt	r2, r5
 800a246:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a24a:	465a      	movle	r2, fp
 800a24c:	462f      	mov	r7, r5
 800a24e:	46d9      	mov	r9, fp
 800a250:	bfcc      	ite	gt
 800a252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a256:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a25a:	464b      	mov	r3, r9
 800a25c:	4652      	mov	r2, sl
 800a25e:	4620      	mov	r0, r4
 800a260:	4639      	mov	r1, r7
 800a262:	f7f6 fafb 	bl	800085c <__aeabi_ddiv>
 800a266:	ec41 0b10 	vmov	d0, r0, r1
 800a26a:	b005      	add	sp, #20
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a270 <__copybits>:
 800a270:	3901      	subs	r1, #1
 800a272:	b570      	push	{r4, r5, r6, lr}
 800a274:	1149      	asrs	r1, r1, #5
 800a276:	6914      	ldr	r4, [r2, #16]
 800a278:	3101      	adds	r1, #1
 800a27a:	f102 0314 	add.w	r3, r2, #20
 800a27e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a282:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a286:	1f05      	subs	r5, r0, #4
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d30c      	bcc.n	800a2a6 <__copybits+0x36>
 800a28c:	1aa3      	subs	r3, r4, r2
 800a28e:	3b11      	subs	r3, #17
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	3211      	adds	r2, #17
 800a296:	42a2      	cmp	r2, r4
 800a298:	bf88      	it	hi
 800a29a:	2300      	movhi	r3, #0
 800a29c:	4418      	add	r0, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	4288      	cmp	r0, r1
 800a2a2:	d305      	bcc.n	800a2b0 <__copybits+0x40>
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
 800a2a6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2aa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2ae:	e7eb      	b.n	800a288 <__copybits+0x18>
 800a2b0:	f840 3b04 	str.w	r3, [r0], #4
 800a2b4:	e7f4      	b.n	800a2a0 <__copybits+0x30>

0800a2b6 <__any_on>:
 800a2b6:	f100 0214 	add.w	r2, r0, #20
 800a2ba:	6900      	ldr	r0, [r0, #16]
 800a2bc:	114b      	asrs	r3, r1, #5
 800a2be:	4298      	cmp	r0, r3
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	db11      	blt.n	800a2e8 <__any_on+0x32>
 800a2c4:	dd0a      	ble.n	800a2dc <__any_on+0x26>
 800a2c6:	f011 011f 	ands.w	r1, r1, #31
 800a2ca:	d007      	beq.n	800a2dc <__any_on+0x26>
 800a2cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2d0:	fa24 f001 	lsr.w	r0, r4, r1
 800a2d4:	fa00 f101 	lsl.w	r1, r0, r1
 800a2d8:	428c      	cmp	r4, r1
 800a2da:	d10b      	bne.n	800a2f4 <__any_on+0x3e>
 800a2dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d803      	bhi.n	800a2ec <__any_on+0x36>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	e7f7      	b.n	800a2dc <__any_on+0x26>
 800a2ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d0f5      	beq.n	800a2e0 <__any_on+0x2a>
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e7f6      	b.n	800a2e6 <__any_on+0x30>

0800a2f8 <_strtol_l.constprop.0>:
 800a2f8:	2b24      	cmp	r3, #36	@ 0x24
 800a2fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fe:	4686      	mov	lr, r0
 800a300:	4690      	mov	r8, r2
 800a302:	d801      	bhi.n	800a308 <_strtol_l.constprop.0+0x10>
 800a304:	2b01      	cmp	r3, #1
 800a306:	d106      	bne.n	800a316 <_strtol_l.constprop.0+0x1e>
 800a308:	f7fe f916 	bl	8008538 <__errno>
 800a30c:	2316      	movs	r3, #22
 800a30e:	6003      	str	r3, [r0, #0]
 800a310:	2000      	movs	r0, #0
 800a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a316:	4834      	ldr	r0, [pc, #208]	@ (800a3e8 <_strtol_l.constprop.0+0xf0>)
 800a318:	460d      	mov	r5, r1
 800a31a:	462a      	mov	r2, r5
 800a31c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a320:	5d06      	ldrb	r6, [r0, r4]
 800a322:	f016 0608 	ands.w	r6, r6, #8
 800a326:	d1f8      	bne.n	800a31a <_strtol_l.constprop.0+0x22>
 800a328:	2c2d      	cmp	r4, #45	@ 0x2d
 800a32a:	d12d      	bne.n	800a388 <_strtol_l.constprop.0+0x90>
 800a32c:	782c      	ldrb	r4, [r5, #0]
 800a32e:	2601      	movs	r6, #1
 800a330:	1c95      	adds	r5, r2, #2
 800a332:	f033 0210 	bics.w	r2, r3, #16
 800a336:	d109      	bne.n	800a34c <_strtol_l.constprop.0+0x54>
 800a338:	2c30      	cmp	r4, #48	@ 0x30
 800a33a:	d12a      	bne.n	800a392 <_strtol_l.constprop.0+0x9a>
 800a33c:	782a      	ldrb	r2, [r5, #0]
 800a33e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a342:	2a58      	cmp	r2, #88	@ 0x58
 800a344:	d125      	bne.n	800a392 <_strtol_l.constprop.0+0x9a>
 800a346:	786c      	ldrb	r4, [r5, #1]
 800a348:	2310      	movs	r3, #16
 800a34a:	3502      	adds	r5, #2
 800a34c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a350:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a354:	2200      	movs	r2, #0
 800a356:	fbbc f9f3 	udiv	r9, ip, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a360:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a364:	2f09      	cmp	r7, #9
 800a366:	d81b      	bhi.n	800a3a0 <_strtol_l.constprop.0+0xa8>
 800a368:	463c      	mov	r4, r7
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	dd27      	ble.n	800a3be <_strtol_l.constprop.0+0xc6>
 800a36e:	1c57      	adds	r7, r2, #1
 800a370:	d007      	beq.n	800a382 <_strtol_l.constprop.0+0x8a>
 800a372:	4581      	cmp	r9, r0
 800a374:	d320      	bcc.n	800a3b8 <_strtol_l.constprop.0+0xc0>
 800a376:	d101      	bne.n	800a37c <_strtol_l.constprop.0+0x84>
 800a378:	45a2      	cmp	sl, r4
 800a37a:	db1d      	blt.n	800a3b8 <_strtol_l.constprop.0+0xc0>
 800a37c:	fb00 4003 	mla	r0, r0, r3, r4
 800a380:	2201      	movs	r2, #1
 800a382:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a386:	e7eb      	b.n	800a360 <_strtol_l.constprop.0+0x68>
 800a388:	2c2b      	cmp	r4, #43	@ 0x2b
 800a38a:	bf04      	itt	eq
 800a38c:	782c      	ldrbeq	r4, [r5, #0]
 800a38e:	1c95      	addeq	r5, r2, #2
 800a390:	e7cf      	b.n	800a332 <_strtol_l.constprop.0+0x3a>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1da      	bne.n	800a34c <_strtol_l.constprop.0+0x54>
 800a396:	2c30      	cmp	r4, #48	@ 0x30
 800a398:	bf0c      	ite	eq
 800a39a:	2308      	moveq	r3, #8
 800a39c:	230a      	movne	r3, #10
 800a39e:	e7d5      	b.n	800a34c <_strtol_l.constprop.0+0x54>
 800a3a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3a4:	2f19      	cmp	r7, #25
 800a3a6:	d801      	bhi.n	800a3ac <_strtol_l.constprop.0+0xb4>
 800a3a8:	3c37      	subs	r4, #55	@ 0x37
 800a3aa:	e7de      	b.n	800a36a <_strtol_l.constprop.0+0x72>
 800a3ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3b0:	2f19      	cmp	r7, #25
 800a3b2:	d804      	bhi.n	800a3be <_strtol_l.constprop.0+0xc6>
 800a3b4:	3c57      	subs	r4, #87	@ 0x57
 800a3b6:	e7d8      	b.n	800a36a <_strtol_l.constprop.0+0x72>
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3bc:	e7e1      	b.n	800a382 <_strtol_l.constprop.0+0x8a>
 800a3be:	1c53      	adds	r3, r2, #1
 800a3c0:	d108      	bne.n	800a3d4 <_strtol_l.constprop.0+0xdc>
 800a3c2:	2322      	movs	r3, #34	@ 0x22
 800a3c4:	f8ce 3000 	str.w	r3, [lr]
 800a3c8:	4660      	mov	r0, ip
 800a3ca:	f1b8 0f00 	cmp.w	r8, #0
 800a3ce:	d0a0      	beq.n	800a312 <_strtol_l.constprop.0+0x1a>
 800a3d0:	1e69      	subs	r1, r5, #1
 800a3d2:	e006      	b.n	800a3e2 <_strtol_l.constprop.0+0xea>
 800a3d4:	b106      	cbz	r6, 800a3d8 <_strtol_l.constprop.0+0xe0>
 800a3d6:	4240      	negs	r0, r0
 800a3d8:	f1b8 0f00 	cmp.w	r8, #0
 800a3dc:	d099      	beq.n	800a312 <_strtol_l.constprop.0+0x1a>
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	d1f6      	bne.n	800a3d0 <_strtol_l.constprop.0+0xd8>
 800a3e2:	f8c8 1000 	str.w	r1, [r8]
 800a3e6:	e794      	b.n	800a312 <_strtol_l.constprop.0+0x1a>
 800a3e8:	0800b639 	.word	0x0800b639

0800a3ec <_strtol_r>:
 800a3ec:	f7ff bf84 	b.w	800a2f8 <_strtol_l.constprop.0>

0800a3f0 <__ascii_wctomb>:
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4608      	mov	r0, r1
 800a3f4:	b141      	cbz	r1, 800a408 <__ascii_wctomb+0x18>
 800a3f6:	2aff      	cmp	r2, #255	@ 0xff
 800a3f8:	d904      	bls.n	800a404 <__ascii_wctomb+0x14>
 800a3fa:	228a      	movs	r2, #138	@ 0x8a
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a402:	4770      	bx	lr
 800a404:	700a      	strb	r2, [r1, #0]
 800a406:	2001      	movs	r0, #1
 800a408:	4770      	bx	lr

0800a40a <__ssputs_r>:
 800a40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40e:	688e      	ldr	r6, [r1, #8]
 800a410:	461f      	mov	r7, r3
 800a412:	42be      	cmp	r6, r7
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	4682      	mov	sl, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	4690      	mov	r8, r2
 800a41c:	d82d      	bhi.n	800a47a <__ssputs_r+0x70>
 800a41e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a422:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a426:	d026      	beq.n	800a476 <__ssputs_r+0x6c>
 800a428:	6965      	ldr	r5, [r4, #20]
 800a42a:	6909      	ldr	r1, [r1, #16]
 800a42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a430:	eba3 0901 	sub.w	r9, r3, r1
 800a434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a438:	1c7b      	adds	r3, r7, #1
 800a43a:	444b      	add	r3, r9
 800a43c:	106d      	asrs	r5, r5, #1
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf38      	it	cc
 800a442:	461d      	movcc	r5, r3
 800a444:	0553      	lsls	r3, r2, #21
 800a446:	d527      	bpl.n	800a498 <__ssputs_r+0x8e>
 800a448:	4629      	mov	r1, r5
 800a44a:	f7fc f90f 	bl	800666c <_malloc_r>
 800a44e:	4606      	mov	r6, r0
 800a450:	b360      	cbz	r0, 800a4ac <__ssputs_r+0xa2>
 800a452:	6921      	ldr	r1, [r4, #16]
 800a454:	464a      	mov	r2, r9
 800a456:	f7fe f89c 	bl	8008592 <memcpy>
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	6126      	str	r6, [r4, #16]
 800a468:	6165      	str	r5, [r4, #20]
 800a46a:	444e      	add	r6, r9
 800a46c:	eba5 0509 	sub.w	r5, r5, r9
 800a470:	6026      	str	r6, [r4, #0]
 800a472:	60a5      	str	r5, [r4, #8]
 800a474:	463e      	mov	r6, r7
 800a476:	42be      	cmp	r6, r7
 800a478:	d900      	bls.n	800a47c <__ssputs_r+0x72>
 800a47a:	463e      	mov	r6, r7
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	4632      	mov	r2, r6
 800a480:	4641      	mov	r1, r8
 800a482:	f000 fa27 	bl	800a8d4 <memmove>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	1b9b      	subs	r3, r3, r6
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	4433      	add	r3, r6
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	2000      	movs	r0, #0
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	462a      	mov	r2, r5
 800a49a:	f000 fa89 	bl	800a9b0 <_realloc_r>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d1e0      	bne.n	800a466 <__ssputs_r+0x5c>
 800a4a4:	6921      	ldr	r1, [r4, #16]
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	f7fe fede 	bl	8009268 <_free_r>
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	f8ca 3000 	str.w	r3, [sl]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a4be:	e7e9      	b.n	800a494 <__ssputs_r+0x8a>

0800a4c0 <_svfiprintf_r>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	4698      	mov	r8, r3
 800a4c6:	898b      	ldrh	r3, [r1, #12]
 800a4c8:	061b      	lsls	r3, r3, #24
 800a4ca:	b09d      	sub	sp, #116	@ 0x74
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	d510      	bpl.n	800a4f6 <_svfiprintf_r+0x36>
 800a4d4:	690b      	ldr	r3, [r1, #16]
 800a4d6:	b973      	cbnz	r3, 800a4f6 <_svfiprintf_r+0x36>
 800a4d8:	2140      	movs	r1, #64	@ 0x40
 800a4da:	f7fc f8c7 	bl	800666c <_malloc_r>
 800a4de:	6028      	str	r0, [r5, #0]
 800a4e0:	6128      	str	r0, [r5, #16]
 800a4e2:	b930      	cbnz	r0, 800a4f2 <_svfiprintf_r+0x32>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ec:	b01d      	add	sp, #116	@ 0x74
 800a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	2340      	movs	r3, #64	@ 0x40
 800a4f4:	616b      	str	r3, [r5, #20]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fa:	2320      	movs	r3, #32
 800a4fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a500:	f8cd 800c 	str.w	r8, [sp, #12]
 800a504:	2330      	movs	r3, #48	@ 0x30
 800a506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6a4 <_svfiprintf_r+0x1e4>
 800a50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a50e:	f04f 0901 	mov.w	r9, #1
 800a512:	4623      	mov	r3, r4
 800a514:	469a      	mov	sl, r3
 800a516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a51a:	b10a      	cbz	r2, 800a520 <_svfiprintf_r+0x60>
 800a51c:	2a25      	cmp	r2, #37	@ 0x25
 800a51e:	d1f9      	bne.n	800a514 <_svfiprintf_r+0x54>
 800a520:	ebba 0b04 	subs.w	fp, sl, r4
 800a524:	d00b      	beq.n	800a53e <_svfiprintf_r+0x7e>
 800a526:	465b      	mov	r3, fp
 800a528:	4622      	mov	r2, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff ff6c 	bl	800a40a <__ssputs_r>
 800a532:	3001      	adds	r0, #1
 800a534:	f000 80a7 	beq.w	800a686 <_svfiprintf_r+0x1c6>
 800a538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53a:	445a      	add	r2, fp
 800a53c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a53e:	f89a 3000 	ldrb.w	r3, [sl]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 809f 	beq.w	800a686 <_svfiprintf_r+0x1c6>
 800a548:	2300      	movs	r3, #0
 800a54a:	f04f 32ff 	mov.w	r2, #4294967295
 800a54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a552:	f10a 0a01 	add.w	sl, sl, #1
 800a556:	9304      	str	r3, [sp, #16]
 800a558:	9307      	str	r3, [sp, #28]
 800a55a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a55e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a560:	4654      	mov	r4, sl
 800a562:	2205      	movs	r2, #5
 800a564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a568:	484e      	ldr	r0, [pc, #312]	@ (800a6a4 <_svfiprintf_r+0x1e4>)
 800a56a:	f7f5 fe39 	bl	80001e0 <memchr>
 800a56e:	9a04      	ldr	r2, [sp, #16]
 800a570:	b9d8      	cbnz	r0, 800a5aa <_svfiprintf_r+0xea>
 800a572:	06d0      	lsls	r0, r2, #27
 800a574:	bf44      	itt	mi
 800a576:	2320      	movmi	r3, #32
 800a578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a57c:	0711      	lsls	r1, r2, #28
 800a57e:	bf44      	itt	mi
 800a580:	232b      	movmi	r3, #43	@ 0x2b
 800a582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a586:	f89a 3000 	ldrb.w	r3, [sl]
 800a58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a58c:	d015      	beq.n	800a5ba <_svfiprintf_r+0xfa>
 800a58e:	9a07      	ldr	r2, [sp, #28]
 800a590:	4654      	mov	r4, sl
 800a592:	2000      	movs	r0, #0
 800a594:	f04f 0c0a 	mov.w	ip, #10
 800a598:	4621      	mov	r1, r4
 800a59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a59e:	3b30      	subs	r3, #48	@ 0x30
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d94b      	bls.n	800a63c <_svfiprintf_r+0x17c>
 800a5a4:	b1b0      	cbz	r0, 800a5d4 <_svfiprintf_r+0x114>
 800a5a6:	9207      	str	r2, [sp, #28]
 800a5a8:	e014      	b.n	800a5d4 <_svfiprintf_r+0x114>
 800a5aa:	eba0 0308 	sub.w	r3, r0, r8
 800a5ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	46a2      	mov	sl, r4
 800a5b8:	e7d2      	b.n	800a560 <_svfiprintf_r+0xa0>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	9103      	str	r1, [sp, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bfbb      	ittet	lt
 800a5c6:	425b      	neglt	r3, r3
 800a5c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a5cc:	9307      	strge	r3, [sp, #28]
 800a5ce:	9307      	strlt	r3, [sp, #28]
 800a5d0:	bfb8      	it	lt
 800a5d2:	9204      	strlt	r2, [sp, #16]
 800a5d4:	7823      	ldrb	r3, [r4, #0]
 800a5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5d8:	d10a      	bne.n	800a5f0 <_svfiprintf_r+0x130>
 800a5da:	7863      	ldrb	r3, [r4, #1]
 800a5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5de:	d132      	bne.n	800a646 <_svfiprintf_r+0x186>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	1d1a      	adds	r2, r3, #4
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	9203      	str	r2, [sp, #12]
 800a5e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5ec:	3402      	adds	r4, #2
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6b4 <_svfiprintf_r+0x1f4>
 800a5f4:	7821      	ldrb	r1, [r4, #0]
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	f7f5 fdf1 	bl	80001e0 <memchr>
 800a5fe:	b138      	cbz	r0, 800a610 <_svfiprintf_r+0x150>
 800a600:	9b04      	ldr	r3, [sp, #16]
 800a602:	eba0 000a 	sub.w	r0, r0, sl
 800a606:	2240      	movs	r2, #64	@ 0x40
 800a608:	4082      	lsls	r2, r0
 800a60a:	4313      	orrs	r3, r2
 800a60c:	3401      	adds	r4, #1
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a614:	4824      	ldr	r0, [pc, #144]	@ (800a6a8 <_svfiprintf_r+0x1e8>)
 800a616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a61a:	2206      	movs	r2, #6
 800a61c:	f7f5 fde0 	bl	80001e0 <memchr>
 800a620:	2800      	cmp	r0, #0
 800a622:	d036      	beq.n	800a692 <_svfiprintf_r+0x1d2>
 800a624:	4b21      	ldr	r3, [pc, #132]	@ (800a6ac <_svfiprintf_r+0x1ec>)
 800a626:	bb1b      	cbnz	r3, 800a670 <_svfiprintf_r+0x1b0>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	3307      	adds	r3, #7
 800a62c:	f023 0307 	bic.w	r3, r3, #7
 800a630:	3308      	adds	r3, #8
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a636:	4433      	add	r3, r6
 800a638:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63a:	e76a      	b.n	800a512 <_svfiprintf_r+0x52>
 800a63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a640:	460c      	mov	r4, r1
 800a642:	2001      	movs	r0, #1
 800a644:	e7a8      	b.n	800a598 <_svfiprintf_r+0xd8>
 800a646:	2300      	movs	r3, #0
 800a648:	3401      	adds	r4, #1
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	4619      	mov	r1, r3
 800a64e:	f04f 0c0a 	mov.w	ip, #10
 800a652:	4620      	mov	r0, r4
 800a654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a658:	3a30      	subs	r2, #48	@ 0x30
 800a65a:	2a09      	cmp	r2, #9
 800a65c:	d903      	bls.n	800a666 <_svfiprintf_r+0x1a6>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0c6      	beq.n	800a5f0 <_svfiprintf_r+0x130>
 800a662:	9105      	str	r1, [sp, #20]
 800a664:	e7c4      	b.n	800a5f0 <_svfiprintf_r+0x130>
 800a666:	fb0c 2101 	mla	r1, ip, r1, r2
 800a66a:	4604      	mov	r4, r0
 800a66c:	2301      	movs	r3, #1
 800a66e:	e7f0      	b.n	800a652 <_svfiprintf_r+0x192>
 800a670:	ab03      	add	r3, sp, #12
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	462a      	mov	r2, r5
 800a676:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b0 <_svfiprintf_r+0x1f0>)
 800a678:	a904      	add	r1, sp, #16
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7fc ff2a 	bl	80074d4 <_printf_float>
 800a680:	1c42      	adds	r2, r0, #1
 800a682:	4606      	mov	r6, r0
 800a684:	d1d6      	bne.n	800a634 <_svfiprintf_r+0x174>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	065b      	lsls	r3, r3, #25
 800a68a:	f53f af2d 	bmi.w	800a4e8 <_svfiprintf_r+0x28>
 800a68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a690:	e72c      	b.n	800a4ec <_svfiprintf_r+0x2c>
 800a692:	ab03      	add	r3, sp, #12
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	462a      	mov	r2, r5
 800a698:	4b05      	ldr	r3, [pc, #20]	@ (800a6b0 <_svfiprintf_r+0x1f0>)
 800a69a:	a904      	add	r1, sp, #16
 800a69c:	4638      	mov	r0, r7
 800a69e:	f7fd f9b1 	bl	8007a04 <_printf_i>
 800a6a2:	e7ed      	b.n	800a680 <_svfiprintf_r+0x1c0>
 800a6a4:	0800b739 	.word	0x0800b739
 800a6a8:	0800b743 	.word	0x0800b743
 800a6ac:	080074d5 	.word	0x080074d5
 800a6b0:	0800a40b 	.word	0x0800a40b
 800a6b4:	0800b73f 	.word	0x0800b73f

0800a6b8 <__sflush_r>:
 800a6b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c0:	0716      	lsls	r6, r2, #28
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	d454      	bmi.n	800a772 <__sflush_r+0xba>
 800a6c8:	684b      	ldr	r3, [r1, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dc02      	bgt.n	800a6d4 <__sflush_r+0x1c>
 800a6ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dd48      	ble.n	800a766 <__sflush_r+0xae>
 800a6d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d045      	beq.n	800a766 <__sflush_r+0xae>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6e0:	682f      	ldr	r7, [r5, #0]
 800a6e2:	6a21      	ldr	r1, [r4, #32]
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	d030      	beq.n	800a74a <__sflush_r+0x92>
 800a6e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	0759      	lsls	r1, r3, #29
 800a6ee:	d505      	bpl.n	800a6fc <__sflush_r+0x44>
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	1ad2      	subs	r2, r2, r3
 800a6f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6f6:	b10b      	cbz	r3, 800a6fc <__sflush_r+0x44>
 800a6f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a700:	6a21      	ldr	r1, [r4, #32]
 800a702:	4628      	mov	r0, r5
 800a704:	47b0      	blx	r6
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	d106      	bne.n	800a71a <__sflush_r+0x62>
 800a70c:	6829      	ldr	r1, [r5, #0]
 800a70e:	291d      	cmp	r1, #29
 800a710:	d82b      	bhi.n	800a76a <__sflush_r+0xb2>
 800a712:	4a2a      	ldr	r2, [pc, #168]	@ (800a7bc <__sflush_r+0x104>)
 800a714:	410a      	asrs	r2, r1
 800a716:	07d6      	lsls	r6, r2, #31
 800a718:	d427      	bmi.n	800a76a <__sflush_r+0xb2>
 800a71a:	2200      	movs	r2, #0
 800a71c:	6062      	str	r2, [r4, #4]
 800a71e:	04d9      	lsls	r1, r3, #19
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	6022      	str	r2, [r4, #0]
 800a724:	d504      	bpl.n	800a730 <__sflush_r+0x78>
 800a726:	1c42      	adds	r2, r0, #1
 800a728:	d101      	bne.n	800a72e <__sflush_r+0x76>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	b903      	cbnz	r3, 800a730 <__sflush_r+0x78>
 800a72e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a732:	602f      	str	r7, [r5, #0]
 800a734:	b1b9      	cbz	r1, 800a766 <__sflush_r+0xae>
 800a736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a73a:	4299      	cmp	r1, r3
 800a73c:	d002      	beq.n	800a744 <__sflush_r+0x8c>
 800a73e:	4628      	mov	r0, r5
 800a740:	f7fe fd92 	bl	8009268 <_free_r>
 800a744:	2300      	movs	r3, #0
 800a746:	6363      	str	r3, [r4, #52]	@ 0x34
 800a748:	e00d      	b.n	800a766 <__sflush_r+0xae>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b0      	blx	r6
 800a750:	4602      	mov	r2, r0
 800a752:	1c50      	adds	r0, r2, #1
 800a754:	d1c9      	bne.n	800a6ea <__sflush_r+0x32>
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0c6      	beq.n	800a6ea <__sflush_r+0x32>
 800a75c:	2b1d      	cmp	r3, #29
 800a75e:	d001      	beq.n	800a764 <__sflush_r+0xac>
 800a760:	2b16      	cmp	r3, #22
 800a762:	d11e      	bne.n	800a7a2 <__sflush_r+0xea>
 800a764:	602f      	str	r7, [r5, #0]
 800a766:	2000      	movs	r0, #0
 800a768:	e022      	b.n	800a7b0 <__sflush_r+0xf8>
 800a76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76e:	b21b      	sxth	r3, r3
 800a770:	e01b      	b.n	800a7aa <__sflush_r+0xf2>
 800a772:	690f      	ldr	r7, [r1, #16]
 800a774:	2f00      	cmp	r7, #0
 800a776:	d0f6      	beq.n	800a766 <__sflush_r+0xae>
 800a778:	0793      	lsls	r3, r2, #30
 800a77a:	680e      	ldr	r6, [r1, #0]
 800a77c:	bf08      	it	eq
 800a77e:	694b      	ldreq	r3, [r1, #20]
 800a780:	600f      	str	r7, [r1, #0]
 800a782:	bf18      	it	ne
 800a784:	2300      	movne	r3, #0
 800a786:	eba6 0807 	sub.w	r8, r6, r7
 800a78a:	608b      	str	r3, [r1, #8]
 800a78c:	f1b8 0f00 	cmp.w	r8, #0
 800a790:	dde9      	ble.n	800a766 <__sflush_r+0xae>
 800a792:	6a21      	ldr	r1, [r4, #32]
 800a794:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a796:	4643      	mov	r3, r8
 800a798:	463a      	mov	r2, r7
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b0      	blx	r6
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	dc08      	bgt.n	800a7b4 <__sflush_r+0xfc>
 800a7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b4:	4407      	add	r7, r0
 800a7b6:	eba8 0800 	sub.w	r8, r8, r0
 800a7ba:	e7e7      	b.n	800a78c <__sflush_r+0xd4>
 800a7bc:	dfbffffe 	.word	0xdfbffffe

0800a7c0 <_fflush_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	690b      	ldr	r3, [r1, #16]
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b913      	cbnz	r3, 800a7d0 <_fflush_r+0x10>
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	b118      	cbz	r0, 800a7da <_fflush_r+0x1a>
 800a7d2:	6a03      	ldr	r3, [r0, #32]
 800a7d4:	b90b      	cbnz	r3, 800a7da <_fflush_r+0x1a>
 800a7d6:	f7fd fcd5 	bl	8008184 <__sinit>
 800a7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0f3      	beq.n	800a7ca <_fflush_r+0xa>
 800a7e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7e4:	07d0      	lsls	r0, r2, #31
 800a7e6:	d404      	bmi.n	800a7f2 <_fflush_r+0x32>
 800a7e8:	0599      	lsls	r1, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_fflush_r+0x32>
 800a7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7ee:	f7fd fece 	bl	800858e <__retarget_lock_acquire_recursive>
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f7ff ff5f 	bl	800a6b8 <__sflush_r>
 800a7fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7fc:	07da      	lsls	r2, r3, #31
 800a7fe:	4605      	mov	r5, r0
 800a800:	d4e4      	bmi.n	800a7cc <_fflush_r+0xc>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	059b      	lsls	r3, r3, #22
 800a806:	d4e1      	bmi.n	800a7cc <_fflush_r+0xc>
 800a808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a80a:	f7fd fec1 	bl	8008590 <__retarget_lock_release_recursive>
 800a80e:	e7dd      	b.n	800a7cc <_fflush_r+0xc>

0800a810 <__swhatbuf_r>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	2900      	cmp	r1, #0
 800a81a:	b096      	sub	sp, #88	@ 0x58
 800a81c:	4615      	mov	r5, r2
 800a81e:	461e      	mov	r6, r3
 800a820:	da0d      	bge.n	800a83e <__swhatbuf_r+0x2e>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a828:	f04f 0100 	mov.w	r1, #0
 800a82c:	bf14      	ite	ne
 800a82e:	2340      	movne	r3, #64	@ 0x40
 800a830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a834:	2000      	movs	r0, #0
 800a836:	6031      	str	r1, [r6, #0]
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	b016      	add	sp, #88	@ 0x58
 800a83c:	bd70      	pop	{r4, r5, r6, pc}
 800a83e:	466a      	mov	r2, sp
 800a840:	f000 f862 	bl	800a908 <_fstat_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	dbec      	blt.n	800a822 <__swhatbuf_r+0x12>
 800a848:	9901      	ldr	r1, [sp, #4]
 800a84a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a84e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a852:	4259      	negs	r1, r3
 800a854:	4159      	adcs	r1, r3
 800a856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a85a:	e7eb      	b.n	800a834 <__swhatbuf_r+0x24>

0800a85c <__smakebuf_r>:
 800a85c:	898b      	ldrh	r3, [r1, #12]
 800a85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a860:	079d      	lsls	r5, r3, #30
 800a862:	4606      	mov	r6, r0
 800a864:	460c      	mov	r4, r1
 800a866:	d507      	bpl.n	800a878 <__smakebuf_r+0x1c>
 800a868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	2301      	movs	r3, #1
 800a872:	6163      	str	r3, [r4, #20]
 800a874:	b003      	add	sp, #12
 800a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a878:	ab01      	add	r3, sp, #4
 800a87a:	466a      	mov	r2, sp
 800a87c:	f7ff ffc8 	bl	800a810 <__swhatbuf_r>
 800a880:	9f00      	ldr	r7, [sp, #0]
 800a882:	4605      	mov	r5, r0
 800a884:	4639      	mov	r1, r7
 800a886:	4630      	mov	r0, r6
 800a888:	f7fb fef0 	bl	800666c <_malloc_r>
 800a88c:	b948      	cbnz	r0, 800a8a2 <__smakebuf_r+0x46>
 800a88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a892:	059a      	lsls	r2, r3, #22
 800a894:	d4ee      	bmi.n	800a874 <__smakebuf_r+0x18>
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	f043 0302 	orr.w	r3, r3, #2
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	e7e2      	b.n	800a868 <__smakebuf_r+0xc>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	6020      	str	r0, [r4, #0]
 800a8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8b2:	b15b      	cbz	r3, 800a8cc <__smakebuf_r+0x70>
 800a8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 f837 	bl	800a92c <_isatty_r>
 800a8be:	b128      	cbz	r0, 800a8cc <__smakebuf_r+0x70>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	431d      	orrs	r5, r3
 800a8d0:	81a5      	strh	r5, [r4, #12]
 800a8d2:	e7cf      	b.n	800a874 <__smakebuf_r+0x18>

0800a8d4 <memmove>:
 800a8d4:	4288      	cmp	r0, r1
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	eb01 0402 	add.w	r4, r1, r2
 800a8dc:	d902      	bls.n	800a8e4 <memmove+0x10>
 800a8de:	4284      	cmp	r4, r0
 800a8e0:	4623      	mov	r3, r4
 800a8e2:	d807      	bhi.n	800a8f4 <memmove+0x20>
 800a8e4:	1e43      	subs	r3, r0, #1
 800a8e6:	42a1      	cmp	r1, r4
 800a8e8:	d008      	beq.n	800a8fc <memmove+0x28>
 800a8ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8f2:	e7f8      	b.n	800a8e6 <memmove+0x12>
 800a8f4:	4402      	add	r2, r0
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	428a      	cmp	r2, r1
 800a8fa:	d100      	bne.n	800a8fe <memmove+0x2a>
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a906:	e7f7      	b.n	800a8f8 <memmove+0x24>

0800a908 <_fstat_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	@ (800a928 <_fstat_r+0x20>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	4611      	mov	r1, r2
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	f7f8 fe1a 	bl	800354e <_fstat>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d102      	bne.n	800a924 <_fstat_r+0x1c>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b103      	cbz	r3, 800a924 <_fstat_r+0x1c>
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	bf00      	nop
 800a928:	2000053c 	.word	0x2000053c

0800a92c <_isatty_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d06      	ldr	r5, [pc, #24]	@ (800a948 <_isatty_r+0x1c>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f8 fe19 	bl	800356e <_isatty>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_isatty_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_isatty_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	2000053c 	.word	0x2000053c

0800a94c <__assert_func>:
 800a94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a94e:	4614      	mov	r4, r2
 800a950:	461a      	mov	r2, r3
 800a952:	4b09      	ldr	r3, [pc, #36]	@ (800a978 <__assert_func+0x2c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4605      	mov	r5, r0
 800a958:	68d8      	ldr	r0, [r3, #12]
 800a95a:	b954      	cbnz	r4, 800a972 <__assert_func+0x26>
 800a95c:	4b07      	ldr	r3, [pc, #28]	@ (800a97c <__assert_func+0x30>)
 800a95e:	461c      	mov	r4, r3
 800a960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a964:	9100      	str	r1, [sp, #0]
 800a966:	462b      	mov	r3, r5
 800a968:	4905      	ldr	r1, [pc, #20]	@ (800a980 <__assert_func+0x34>)
 800a96a:	f000 f84f 	bl	800aa0c <fiprintf>
 800a96e:	f000 f85f 	bl	800aa30 <abort>
 800a972:	4b04      	ldr	r3, [pc, #16]	@ (800a984 <__assert_func+0x38>)
 800a974:	e7f4      	b.n	800a960 <__assert_func+0x14>
 800a976:	bf00      	nop
 800a978:	2000019c 	.word	0x2000019c
 800a97c:	0800b785 	.word	0x0800b785
 800a980:	0800b757 	.word	0x0800b757
 800a984:	0800b74a 	.word	0x0800b74a

0800a988 <_calloc_r>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	fba1 5402 	umull	r5, r4, r1, r2
 800a98e:	b93c      	cbnz	r4, 800a9a0 <_calloc_r+0x18>
 800a990:	4629      	mov	r1, r5
 800a992:	f7fb fe6b 	bl	800666c <_malloc_r>
 800a996:	4606      	mov	r6, r0
 800a998:	b928      	cbnz	r0, 800a9a6 <_calloc_r+0x1e>
 800a99a:	2600      	movs	r6, #0
 800a99c:	4630      	mov	r0, r6
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	220c      	movs	r2, #12
 800a9a2:	6002      	str	r2, [r0, #0]
 800a9a4:	e7f9      	b.n	800a99a <_calloc_r+0x12>
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f7fd fd51 	bl	8008450 <memset>
 800a9ae:	e7f5      	b.n	800a99c <_calloc_r+0x14>

0800a9b0 <_realloc_r>:
 800a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4615      	mov	r5, r2
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	b921      	cbnz	r1, 800a9c6 <_realloc_r+0x16>
 800a9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	f7fb be53 	b.w	800666c <_malloc_r>
 800a9c6:	b92a      	cbnz	r2, 800a9d4 <_realloc_r+0x24>
 800a9c8:	f7fe fc4e 	bl	8009268 <_free_r>
 800a9cc:	2400      	movs	r4, #0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	f000 f833 	bl	800aa3e <_malloc_usable_size_r>
 800a9d8:	4285      	cmp	r5, r0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	d802      	bhi.n	800a9e4 <_realloc_r+0x34>
 800a9de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9e2:	d8f4      	bhi.n	800a9ce <_realloc_r+0x1e>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f7fb fe40 	bl	800666c <_malloc_r>
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0ec      	beq.n	800a9cc <_realloc_r+0x1c>
 800a9f2:	42b5      	cmp	r5, r6
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	bf28      	it	cs
 800a9fa:	4632      	movcs	r2, r6
 800a9fc:	f7fd fdc9 	bl	8008592 <memcpy>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7fe fc30 	bl	8009268 <_free_r>
 800aa08:	463c      	mov	r4, r7
 800aa0a:	e7e0      	b.n	800a9ce <_realloc_r+0x1e>

0800aa0c <fiprintf>:
 800aa0c:	b40e      	push	{r1, r2, r3}
 800aa0e:	b503      	push	{r0, r1, lr}
 800aa10:	4601      	mov	r1, r0
 800aa12:	ab03      	add	r3, sp, #12
 800aa14:	4805      	ldr	r0, [pc, #20]	@ (800aa2c <fiprintf+0x20>)
 800aa16:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	f000 f83f 	bl	800aaa0 <_vfiprintf_r>
 800aa22:	b002      	add	sp, #8
 800aa24:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa28:	b003      	add	sp, #12
 800aa2a:	4770      	bx	lr
 800aa2c:	2000019c 	.word	0x2000019c

0800aa30 <abort>:
 800aa30:	b508      	push	{r3, lr}
 800aa32:	2006      	movs	r0, #6
 800aa34:	f000 f974 	bl	800ad20 <raise>
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f7f8 fd38 	bl	80034ae <_exit>

0800aa3e <_malloc_usable_size_r>:
 800aa3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa42:	1f18      	subs	r0, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfbc      	itt	lt
 800aa48:	580b      	ldrlt	r3, [r1, r0]
 800aa4a:	18c0      	addlt	r0, r0, r3
 800aa4c:	4770      	bx	lr

0800aa4e <__sfputc_r>:
 800aa4e:	6893      	ldr	r3, [r2, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	b410      	push	{r4}
 800aa56:	6093      	str	r3, [r2, #8]
 800aa58:	da08      	bge.n	800aa6c <__sfputc_r+0x1e>
 800aa5a:	6994      	ldr	r4, [r2, #24]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	db01      	blt.n	800aa64 <__sfputc_r+0x16>
 800aa60:	290a      	cmp	r1, #10
 800aa62:	d103      	bne.n	800aa6c <__sfputc_r+0x1e>
 800aa64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa68:	f7fd bc5e 	b.w	8008328 <__swbuf_r>
 800aa6c:	6813      	ldr	r3, [r2, #0]
 800aa6e:	1c58      	adds	r0, r3, #1
 800aa70:	6010      	str	r0, [r2, #0]
 800aa72:	7019      	strb	r1, [r3, #0]
 800aa74:	4608      	mov	r0, r1
 800aa76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <__sfputs_r>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	4614      	mov	r4, r2
 800aa84:	18d5      	adds	r5, r2, r3
 800aa86:	42ac      	cmp	r4, r5
 800aa88:	d101      	bne.n	800aa8e <__sfputs_r+0x12>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e007      	b.n	800aa9e <__sfputs_r+0x22>
 800aa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa92:	463a      	mov	r2, r7
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff ffda 	bl	800aa4e <__sfputc_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d1f3      	bne.n	800aa86 <__sfputs_r+0xa>
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaa0 <_vfiprintf_r>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	b09d      	sub	sp, #116	@ 0x74
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4698      	mov	r8, r3
 800aaac:	4606      	mov	r6, r0
 800aaae:	b118      	cbz	r0, 800aab8 <_vfiprintf_r+0x18>
 800aab0:	6a03      	ldr	r3, [r0, #32]
 800aab2:	b90b      	cbnz	r3, 800aab8 <_vfiprintf_r+0x18>
 800aab4:	f7fd fb66 	bl	8008184 <__sinit>
 800aab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaba:	07d9      	lsls	r1, r3, #31
 800aabc:	d405      	bmi.n	800aaca <_vfiprintf_r+0x2a>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	059a      	lsls	r2, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_vfiprintf_r+0x2a>
 800aac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aac6:	f7fd fd62 	bl	800858e <__retarget_lock_acquire_recursive>
 800aaca:	89ab      	ldrh	r3, [r5, #12]
 800aacc:	071b      	lsls	r3, r3, #28
 800aace:	d501      	bpl.n	800aad4 <_vfiprintf_r+0x34>
 800aad0:	692b      	ldr	r3, [r5, #16]
 800aad2:	b99b      	cbnz	r3, 800aafc <_vfiprintf_r+0x5c>
 800aad4:	4629      	mov	r1, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7fd fc64 	bl	80083a4 <__swsetup_r>
 800aadc:	b170      	cbz	r0, 800aafc <_vfiprintf_r+0x5c>
 800aade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aae0:	07dc      	lsls	r4, r3, #31
 800aae2:	d504      	bpl.n	800aaee <_vfiprintf_r+0x4e>
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b01d      	add	sp, #116	@ 0x74
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	89ab      	ldrh	r3, [r5, #12]
 800aaf0:	0598      	lsls	r0, r3, #22
 800aaf2:	d4f7      	bmi.n	800aae4 <_vfiprintf_r+0x44>
 800aaf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaf6:	f7fd fd4b 	bl	8008590 <__retarget_lock_release_recursive>
 800aafa:	e7f3      	b.n	800aae4 <_vfiprintf_r+0x44>
 800aafc:	2300      	movs	r3, #0
 800aafe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab00:	2320      	movs	r3, #32
 800ab02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab0a:	2330      	movs	r3, #48	@ 0x30
 800ab0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acbc <_vfiprintf_r+0x21c>
 800ab10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab14:	f04f 0901 	mov.w	r9, #1
 800ab18:	4623      	mov	r3, r4
 800ab1a:	469a      	mov	sl, r3
 800ab1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab20:	b10a      	cbz	r2, 800ab26 <_vfiprintf_r+0x86>
 800ab22:	2a25      	cmp	r2, #37	@ 0x25
 800ab24:	d1f9      	bne.n	800ab1a <_vfiprintf_r+0x7a>
 800ab26:	ebba 0b04 	subs.w	fp, sl, r4
 800ab2a:	d00b      	beq.n	800ab44 <_vfiprintf_r+0xa4>
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	4622      	mov	r2, r4
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ffa2 	bl	800aa7c <__sfputs_r>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	f000 80a7 	beq.w	800ac8c <_vfiprintf_r+0x1ec>
 800ab3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab40:	445a      	add	r2, fp
 800ab42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab44:	f89a 3000 	ldrb.w	r3, [sl]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 809f 	beq.w	800ac8c <_vfiprintf_r+0x1ec>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f04f 32ff 	mov.w	r2, #4294967295
 800ab54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab58:	f10a 0a01 	add.w	sl, sl, #1
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	9307      	str	r3, [sp, #28]
 800ab60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab66:	4654      	mov	r4, sl
 800ab68:	2205      	movs	r2, #5
 800ab6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6e:	4853      	ldr	r0, [pc, #332]	@ (800acbc <_vfiprintf_r+0x21c>)
 800ab70:	f7f5 fb36 	bl	80001e0 <memchr>
 800ab74:	9a04      	ldr	r2, [sp, #16]
 800ab76:	b9d8      	cbnz	r0, 800abb0 <_vfiprintf_r+0x110>
 800ab78:	06d1      	lsls	r1, r2, #27
 800ab7a:	bf44      	itt	mi
 800ab7c:	2320      	movmi	r3, #32
 800ab7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab82:	0713      	lsls	r3, r2, #28
 800ab84:	bf44      	itt	mi
 800ab86:	232b      	movmi	r3, #43	@ 0x2b
 800ab88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab92:	d015      	beq.n	800abc0 <_vfiprintf_r+0x120>
 800ab94:	9a07      	ldr	r2, [sp, #28]
 800ab96:	4654      	mov	r4, sl
 800ab98:	2000      	movs	r0, #0
 800ab9a:	f04f 0c0a 	mov.w	ip, #10
 800ab9e:	4621      	mov	r1, r4
 800aba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aba4:	3b30      	subs	r3, #48	@ 0x30
 800aba6:	2b09      	cmp	r3, #9
 800aba8:	d94b      	bls.n	800ac42 <_vfiprintf_r+0x1a2>
 800abaa:	b1b0      	cbz	r0, 800abda <_vfiprintf_r+0x13a>
 800abac:	9207      	str	r2, [sp, #28]
 800abae:	e014      	b.n	800abda <_vfiprintf_r+0x13a>
 800abb0:	eba0 0308 	sub.w	r3, r0, r8
 800abb4:	fa09 f303 	lsl.w	r3, r9, r3
 800abb8:	4313      	orrs	r3, r2
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	46a2      	mov	sl, r4
 800abbe:	e7d2      	b.n	800ab66 <_vfiprintf_r+0xc6>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	1d19      	adds	r1, r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	9103      	str	r1, [sp, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfbb      	ittet	lt
 800abcc:	425b      	neglt	r3, r3
 800abce:	f042 0202 	orrlt.w	r2, r2, #2
 800abd2:	9307      	strge	r3, [sp, #28]
 800abd4:	9307      	strlt	r3, [sp, #28]
 800abd6:	bfb8      	it	lt
 800abd8:	9204      	strlt	r2, [sp, #16]
 800abda:	7823      	ldrb	r3, [r4, #0]
 800abdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800abde:	d10a      	bne.n	800abf6 <_vfiprintf_r+0x156>
 800abe0:	7863      	ldrb	r3, [r4, #1]
 800abe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe4:	d132      	bne.n	800ac4c <_vfiprintf_r+0x1ac>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	9203      	str	r2, [sp, #12]
 800abee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abf2:	3402      	adds	r4, #2
 800abf4:	9305      	str	r3, [sp, #20]
 800abf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800accc <_vfiprintf_r+0x22c>
 800abfa:	7821      	ldrb	r1, [r4, #0]
 800abfc:	2203      	movs	r2, #3
 800abfe:	4650      	mov	r0, sl
 800ac00:	f7f5 faee 	bl	80001e0 <memchr>
 800ac04:	b138      	cbz	r0, 800ac16 <_vfiprintf_r+0x176>
 800ac06:	9b04      	ldr	r3, [sp, #16]
 800ac08:	eba0 000a 	sub.w	r0, r0, sl
 800ac0c:	2240      	movs	r2, #64	@ 0x40
 800ac0e:	4082      	lsls	r2, r0
 800ac10:	4313      	orrs	r3, r2
 800ac12:	3401      	adds	r4, #1
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1a:	4829      	ldr	r0, [pc, #164]	@ (800acc0 <_vfiprintf_r+0x220>)
 800ac1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac20:	2206      	movs	r2, #6
 800ac22:	f7f5 fadd 	bl	80001e0 <memchr>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d03f      	beq.n	800acaa <_vfiprintf_r+0x20a>
 800ac2a:	4b26      	ldr	r3, [pc, #152]	@ (800acc4 <_vfiprintf_r+0x224>)
 800ac2c:	bb1b      	cbnz	r3, 800ac76 <_vfiprintf_r+0x1d6>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	3307      	adds	r3, #7
 800ac32:	f023 0307 	bic.w	r3, r3, #7
 800ac36:	3308      	adds	r3, #8
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac3c:	443b      	add	r3, r7
 800ac3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac40:	e76a      	b.n	800ab18 <_vfiprintf_r+0x78>
 800ac42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac46:	460c      	mov	r4, r1
 800ac48:	2001      	movs	r0, #1
 800ac4a:	e7a8      	b.n	800ab9e <_vfiprintf_r+0xfe>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	3401      	adds	r4, #1
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	4619      	mov	r1, r3
 800ac54:	f04f 0c0a 	mov.w	ip, #10
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac5e:	3a30      	subs	r2, #48	@ 0x30
 800ac60:	2a09      	cmp	r2, #9
 800ac62:	d903      	bls.n	800ac6c <_vfiprintf_r+0x1cc>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0c6      	beq.n	800abf6 <_vfiprintf_r+0x156>
 800ac68:	9105      	str	r1, [sp, #20]
 800ac6a:	e7c4      	b.n	800abf6 <_vfiprintf_r+0x156>
 800ac6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac70:	4604      	mov	r4, r0
 800ac72:	2301      	movs	r3, #1
 800ac74:	e7f0      	b.n	800ac58 <_vfiprintf_r+0x1b8>
 800ac76:	ab03      	add	r3, sp, #12
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4b12      	ldr	r3, [pc, #72]	@ (800acc8 <_vfiprintf_r+0x228>)
 800ac7e:	a904      	add	r1, sp, #16
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7fc fc27 	bl	80074d4 <_printf_float>
 800ac86:	4607      	mov	r7, r0
 800ac88:	1c78      	adds	r0, r7, #1
 800ac8a:	d1d6      	bne.n	800ac3a <_vfiprintf_r+0x19a>
 800ac8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac8e:	07d9      	lsls	r1, r3, #31
 800ac90:	d405      	bmi.n	800ac9e <_vfiprintf_r+0x1fe>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	059a      	lsls	r2, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_vfiprintf_r+0x1fe>
 800ac98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac9a:	f7fd fc79 	bl	8008590 <__retarget_lock_release_recursive>
 800ac9e:	89ab      	ldrh	r3, [r5, #12]
 800aca0:	065b      	lsls	r3, r3, #25
 800aca2:	f53f af1f 	bmi.w	800aae4 <_vfiprintf_r+0x44>
 800aca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aca8:	e71e      	b.n	800aae8 <_vfiprintf_r+0x48>
 800acaa:	ab03      	add	r3, sp, #12
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	462a      	mov	r2, r5
 800acb0:	4b05      	ldr	r3, [pc, #20]	@ (800acc8 <_vfiprintf_r+0x228>)
 800acb2:	a904      	add	r1, sp, #16
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7fc fea5 	bl	8007a04 <_printf_i>
 800acba:	e7e4      	b.n	800ac86 <_vfiprintf_r+0x1e6>
 800acbc:	0800b739 	.word	0x0800b739
 800acc0:	0800b743 	.word	0x0800b743
 800acc4:	080074d5 	.word	0x080074d5
 800acc8:	0800aa7d 	.word	0x0800aa7d
 800accc:	0800b73f 	.word	0x0800b73f

0800acd0 <_raise_r>:
 800acd0:	291f      	cmp	r1, #31
 800acd2:	b538      	push	{r3, r4, r5, lr}
 800acd4:	4605      	mov	r5, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	d904      	bls.n	800ace4 <_raise_r+0x14>
 800acda:	2316      	movs	r3, #22
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ace6:	b112      	cbz	r2, 800acee <_raise_r+0x1e>
 800ace8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acec:	b94b      	cbnz	r3, 800ad02 <_raise_r+0x32>
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 f830 	bl	800ad54 <_getpid_r>
 800acf4:	4622      	mov	r2, r4
 800acf6:	4601      	mov	r1, r0
 800acf8:	4628      	mov	r0, r5
 800acfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acfe:	f000 b817 	b.w	800ad30 <_kill_r>
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d00a      	beq.n	800ad1c <_raise_r+0x4c>
 800ad06:	1c59      	adds	r1, r3, #1
 800ad08:	d103      	bne.n	800ad12 <_raise_r+0x42>
 800ad0a:	2316      	movs	r3, #22
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	2001      	movs	r0, #1
 800ad10:	e7e7      	b.n	800ace2 <_raise_r+0x12>
 800ad12:	2100      	movs	r1, #0
 800ad14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	4798      	blx	r3
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e7e0      	b.n	800ace2 <_raise_r+0x12>

0800ad20 <raise>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	@ (800ad2c <raise+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f7ff bfd3 	b.w	800acd0 <_raise_r>
 800ad2a:	bf00      	nop
 800ad2c:	2000019c 	.word	0x2000019c

0800ad30 <_kill_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d07      	ldr	r5, [pc, #28]	@ (800ad50 <_kill_r+0x20>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	602b      	str	r3, [r5, #0]
 800ad3e:	f7f8 fba6 	bl	800348e <_kill>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	d102      	bne.n	800ad4c <_kill_r+0x1c>
 800ad46:	682b      	ldr	r3, [r5, #0]
 800ad48:	b103      	cbz	r3, 800ad4c <_kill_r+0x1c>
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd38      	pop	{r3, r4, r5, pc}
 800ad4e:	bf00      	nop
 800ad50:	2000053c 	.word	0x2000053c

0800ad54 <_getpid_r>:
 800ad54:	f7f8 bb93 	b.w	800347e <_getpid>

0800ad58 <_init>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr

0800ad64 <_fini>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	bf00      	nop
 800ad68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6a:	bc08      	pop	{r3}
 800ad6c:	469e      	mov	lr, r3
 800ad6e:	4770      	bx	lr
